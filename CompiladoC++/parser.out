Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASM
    ATOI
    BOOL
    CALLOC
    CATCH
    CERR
    CIN
    CLASS
    CONST_CAST
    COUT
    DELETE
    DEREF
    DEREF_ONE
    DEREF_TWO
    DO
    DYNAMIC_CAST
    ENUM
    EXIT
    EXPLICIT
    EXPORT
    FALSE
    FOR
    FRIEND
    GETS
    HASH
    INCLUDE
    INLINE
    KEYWORD
    LSHIFT_EQ
    MALLOC
    MUTABLE
    NAMESPACE
    NEW
    OPERATOR
    PREDEFINED_FUNCTION
    PRIVATE
    PROTECTED
    PUBLIC
    PUTS
    REALLOC
    REINTERPRET_CAST
    RSHIFT_EQ
    STATIC_CAST
    STD
    STRUCT
    TEMPLATE
    THIS
    THROW
    TRUE
    TRY
    TYPEID
    TYPENAME
    UNION
    USING
    VIRTUAL
    WCHAR_T
    WHILE

Grammar

Rule 0     S' -> mainFunc
Rule 1     mainFunc -> INT DOLAR MAIN LPAREN RPAREN statement
Rule 2     expression -> assignmentExpression
Rule 3     expression -> expression COMMA assignmentExpression
Rule 4     assignmentExpression -> conditionalExpression
Rule 5     assignmentExpression -> unaryExpression assignOper assignmentExpression
Rule 6     unaryExpression -> postfixExpression
Rule 7     unaryExpression -> PLUSPLUS unaryExpression
Rule 8     unaryExpression -> MINUSMINUS unaryExpression
Rule 9     unaryExpression -> unaryOper unaryExpression
Rule 10    unaryExpression -> SIZEOF unaryExpression
Rule 11    unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN
Rule 12    primaryExpression -> markid
Rule 13    primaryExpression -> constant
Rule 14    primaryExpression -> markstr STRING
Rule 15    primaryExpression -> LPAREN expression RPAREN
Rule 16    markid -> identifier
Rule 17    markstr -> <empty>
Rule 18    postfixExpression -> primaryExpression
Rule 19    postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
Rule 20    postfixExpression -> postfixExpression PLUSPLUS
Rule 21    postfixExpression -> postfixExpression MINUSMINUS
Rule 22    constant -> markint INTNUM
Rule 23    constant -> markfloat FLOATNUM
Rule 24    constant -> markchar CHAR_CONST
Rule 25    markint -> empty
Rule 26    markfloat -> empty
Rule 27    markchar -> empty
Rule 28    assignOper -> ASSIGNMENT
Rule 29    assignOper -> MULT_EQ
Rule 30    assignOper -> DIVIDE_EQ
Rule 31    assignOper -> MOD_EQ
Rule 32    assignOper -> PLUS_EQ
Rule 33    assignOper -> MINUS_EQ
Rule 34    assignOper -> GTEQ
Rule 35    assignOper -> LTEQ
Rule 36    assignOper -> AND_EQ
Rule 37    assignOper -> XOR_EQ
Rule 38    assignOper -> OR_EQ
Rule 39    conditionalExpression -> logicalOrExpression
Rule 40    conditionalExpression -> logicalOrExpression QUES_MARK expression COLON conditionalExpression
Rule 41    logicalOrExpression -> logicalAndExpression
Rule 42    logicalOrExpression -> logicalOrExpression OR logicalAndExpression
Rule 43    logicalAndExpression -> inclusiveOrExpression
Rule 44    logicalAndExpression -> logicalAndExpression AND inclusiveOrExpression
Rule 45    inclusiveOrExpression -> exclusiveOrExpression
Rule 46    inclusiveOrExpression -> inclusiveOrExpression BIT_OR exclusiveOrExpression
Rule 47    exclusiveOrExpression -> andExpression
Rule 48    exclusiveOrExpression -> exclusiveOrExpression BIT_XOR andExpression
Rule 49    andExpression -> equalityExpression
Rule 50    andExpression -> andExpression BIT_AND equalityExpression
Rule 51    equalityExpression -> relationalExpression
Rule 52    equalityExpression -> equalityExpression EQUAL relationalExpression
Rule 53    equalityExpression -> equalityExpression NEQUAL relationalExpression
Rule 54    relationalExpression -> shiftExpression
Rule 55    relationalExpression -> relationalExpression LT shiftExpression
Rule 56    relationalExpression -> relationalExpression GT shiftExpression
Rule 57    relationalExpression -> relationalExpression LTEQ shiftExpression
Rule 58    relationalExpression -> relationalExpression GTEQ shiftExpression
Rule 59    shiftExpression -> additiveExpression
Rule 60    shiftExpression -> shiftExpression LSHIFT additiveExpression
Rule 61    shiftExpression -> shiftExpression RSHIFT additiveExpression
Rule 62    additiveExpression -> multiplicativeExpression
Rule 63    additiveExpression -> additiveExpression U_PLUS multiplicativeExpression
Rule 64    additiveExpression -> additiveExpression U_MINUS multiplicativeExpression
Rule 65    multiplicativeExpression -> castExpression
Rule 66    multiplicativeExpression -> multiplicativeExpression TIMES castExpression
Rule 67    multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression
Rule 68    multiplicativeExpression -> multiplicativeExpression MOD castExpression
Rule 69    castExpression -> unaryExpression
Rule 70    castExpression -> LPAREN simpleTypeName RPAREN castExpression
Rule 71    unaryOper -> TIMES
Rule 72    unaryOper -> BIT_AND
Rule 73    unaryOper -> U_PLUS
Rule 74    unaryOper -> U_MINUS
Rule 75    unaryOper -> NOT
Rule 76    unaryOper -> BIT_NOT
Rule 77    simpleTypeName -> CHAR
Rule 78    simpleTypeName -> SHORT
Rule 79    simpleTypeName -> INT
Rule 80    simpleTypeName -> LONG
Rule 81    simpleTypeName -> SIGNED
Rule 82    simpleTypeName -> UNSIGNED
Rule 83    simpleTypeName -> FLOAT
Rule 84    simpleTypeName -> DOUBLE
Rule 85    simpleTypeName -> VOID
Rule 86    empty -> <empty>
Rule 87    statement -> labeledStatement
Rule 88    statement -> expressionStatement
Rule 89    statement -> compoundStatement
Rule 90    statement -> selectionStatement
Rule 91    statement -> jumpStatement
Rule 92    labeledStatement -> identifier COLON statement
Rule 93    labeledStatement -> caseList default
Rule 94    caseList -> caseList CASE constantExpression COLON statement
Rule 95    caseList -> empty
Rule 96    default -> DEFAULT defaultmark COLON statement enddefault
Rule 97    default -> empty
Rule 98    defaultmark -> empty
Rule 99    enddefault -> empty
Rule 100   constantExpression -> conditionalExpression
Rule 101   expressionStatement -> expression TERMINAL
Rule 102   expressionStatement -> empty
Rule 103   compoundStatement -> oscope declarationList statementList cscope
Rule 104   compoundStatement -> empty
Rule 105   oscope -> LEFTCURLYBRACKET
Rule 106   cscope -> RIGHTCURLYBRACKET
Rule 107   statementList -> statementList statement
Rule 108   statementList -> empty
Rule 109   declarationList -> declarationList declaration
Rule 110   declarationList -> empty
Rule 111   declaration -> decSpecList initDecList TERMINAL
Rule 112   initDecList -> initDecList COMMA markDec initDec
Rule 113   initDecList -> initDec
Rule 114   markDec -> empty
Rule 115   decSpecList -> decSpecList decSpec
Rule 116   decSpecList -> decSpec
Rule 117   initDec -> declarator
Rule 118   initDec -> declarator ASSIGNMENT assignmentExpression
Rule 119   declarator -> pointerList directDec
Rule 120   pointerList -> pointer
Rule 121   pointerList -> empty
Rule 122   pointer -> star typeQualList
Rule 123   pointer -> empty
Rule 124   star -> star TIMES
Rule 125   star -> TIMES
Rule 126   typeQualList -> typeQualifier
Rule 127   typeQualList -> empty
Rule 128   directDec -> identifier
Rule 129   directDec -> identifier arrayDec
Rule 130   arrayDec -> arrayDec LEFTSQRBRACKET INTNUM RIGHTSQRBRACKET
Rule 131   arrayDec -> LEFTSQRBRACKET INTNUM RIGHTSQRBRACKET
Rule 132   identifier -> ID
Rule 133   decSpec -> StorageClassSpec
Rule 134   decSpec -> simpleTypeName
Rule 135   decSpec -> typeQualifier
Rule 136   typeQualifier -> CONST
Rule 137   typeQualifier -> VOLATILE
Rule 138   StorageClassSpec -> AUTO
Rule 139   StorageClassSpec -> REGISTER
Rule 140   StorageClassSpec -> STATIC
Rule 141   StorageClassSpec -> EXTERN
Rule 142   StorageClassSpec -> TYPEDEF
Rule 143   selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark
Rule 144   selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement
Rule 145   selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark
Rule 146   ifmark -> empty
Rule 147   endifmark -> empty
Rule 148   elsemark -> empty
Rule 149   switchmark -> empty
Rule 150   endswitchmark -> empty
Rule 151   jumpStatement -> BREAK TERMINAL
Rule 152   jumpStatement -> CONTINUE TERMINAL
Rule 153   jumpStatement -> RETURN expression TERMINAL
Rule 154   jumpStatement -> RETURN TERMINAL
Rule 155   jumpStatement -> GOTO identifier TERMINAL

Terminals, with rules where they appear

AND                  : 44
AND_EQ               : 36
ASM                  : 
ASSIGNMENT           : 28 118
ATOI                 : 
AUTO                 : 138
BIT_AND              : 50 72
BIT_NOT              : 76
BIT_OR               : 46
BIT_XOR              : 48
BOOL                 : 
BREAK                : 151
CALLOC               : 
CASE                 : 94
CATCH                : 
CERR                 : 
CHAR                 : 77
CHAR_CONST           : 24
CIN                  : 
CLASS                : 
COLON                : 40 92 94 96
COMMA                : 3 112
CONST                : 136
CONST_CAST           : 
CONTINUE             : 152
COUT                 : 
DEFAULT              : 96
DELETE               : 
DEREF                : 
DEREF_ONE            : 
DEREF_TWO            : 
DIVIDE               : 67
DIVIDE_EQ            : 30
DO                   : 
DOLAR                : 1
DOUBLE               : 84
DYNAMIC_CAST         : 
ELSE                 : 144
ENUM                 : 
EQUAL                : 52
EXIT                 : 
EXPLICIT             : 
EXPORT               : 
EXTERN               : 141
FALSE                : 
FLOAT                : 83
FLOATNUM             : 23
FOR                  : 
FRIEND               : 
GETS                 : 
GOTO                 : 155
GT                   : 56
GTEQ                 : 34 58
HASH                 : 
ID                   : 132
IF                   : 143 144
INCLUDE              : 
INLINE               : 
INT                  : 1 79
INTNUM               : 22 130 131
KEYWORD              : 
LEFTCURLYBRACKET     : 105
LEFTSQRBRACKET       : 19 130 131
LONG                 : 80
LPAREN               : 1 11 15 70 143 144 145
LSHIFT               : 60
LSHIFT_EQ            : 
LT                   : 55
LTEQ                 : 35 57
MAIN                 : 1
MALLOC               : 
MINUSMINUS           : 8 21
MINUS_EQ             : 33
MOD                  : 68
MOD_EQ               : 31
MULT_EQ              : 29
MUTABLE              : 
NAMESPACE            : 
NEQUAL               : 53
NEW                  : 
NOT                  : 75
OPERATOR             : 
OR                   : 42
OR_EQ                : 38
PLUSPLUS             : 7 20
PLUS_EQ              : 32
PREDEFINED_FUNCTION  : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUTS                 : 
QUES_MARK            : 40
REALLOC              : 
REGISTER             : 139
REINTERPRET_CAST     : 
RETURN               : 153 154
RIGHTCURLYBRACKET    : 106
RIGHTSQRBRACKET      : 19 130 131
RPAREN               : 1 11 15 70 143 144 145
RSHIFT               : 61
RSHIFT_EQ            : 
SHORT                : 78
SIGNED               : 81
SIZEOF               : 10 11
STATIC               : 140
STATIC_CAST          : 
STD                  : 
STRING               : 14
STRUCT               : 
SWITCH               : 145
TEMPLATE             : 
TERMINAL             : 101 111 151 152 153 154 155
THIS                 : 
THROW                : 
TIMES                : 66 71 124 125
TRUE                 : 
TRY                  : 
TYPEDEF              : 142
TYPEID               : 
TYPENAME             : 
UNION                : 
UNSIGNED             : 82
USING                : 
U_MINUS              : 64 74
U_PLUS               : 63 73
VIRTUAL              : 
VOID                 : 85
VOLATILE             : 137
WCHAR_T              : 
WHILE                : 
XOR_EQ               : 37
error                : 

Nonterminals, with rules where they appear

StorageClassSpec     : 133
additiveExpression   : 59 60 61 63 64
andExpression        : 47 48 50
arrayDec             : 129 130
assignOper           : 5
assignmentExpression : 2 3 5 118
caseList             : 93 94
castExpression       : 65 66 67 68 70
compoundStatement    : 89
conditionalExpression : 4 40 100
constant             : 13
constantExpression   : 94
cscope               : 103
decSpec              : 115 116
decSpecList          : 111 115
declaration          : 109
declarationList      : 103 109
declarator           : 117 118
default              : 93
defaultmark          : 96
directDec            : 119
elsemark             : 144
empty                : 25 26 27 95 97 98 99 102 104 108 110 114 121 123 127 146 147 148 149 150
enddefault           : 96
endifmark            : 143 144
endswitchmark        : 145
equalityExpression   : 49 50 52 53
exclusiveOrExpression : 45 46 48
expression           : 3 15 19 40 101 143 144 145 153
expressionStatement  : 88
identifier           : 16 92 128 129 155
ifmark               : 143 144
inclusiveOrExpression : 43 44 46
initDec              : 112 113
initDecList          : 111 112
jumpStatement        : 91
labeledStatement     : 87
logicalAndExpression : 41 42 44
logicalOrExpression  : 39 40 42
mainFunc             : 0
markDec              : 112
markchar             : 24
markfloat            : 23
markid               : 12
markint              : 22
markstr              : 14
multiplicativeExpression : 62 63 64 66 67 68
oscope               : 103
pointer              : 120
pointerList          : 119
postfixExpression    : 6 19 20 21
primaryExpression    : 18
relationalExpression : 51 52 53 55 56 57 58
selectionStatement   : 90
shiftExpression      : 54 55 56 57 58 60 61
simpleTypeName       : 11 70 134
star                 : 122 124
statement            : 1 92 94 96 107 143 144 144 145
statementList        : 103 107
switchmark           : 145
typeQualList         : 122
typeQualifier        : 126 135
unaryExpression      : 5 7 8 9 10 69
unaryOper            : 9

Parsing method: LALR

state 0

    (0) S' -> . mainFunc
    (1) mainFunc -> . INT DOLAR MAIN LPAREN RPAREN statement

    INT             shift and go to state 2

    mainFunc                       shift and go to state 1

state 1

    (0) S' -> mainFunc .



state 2

    (1) mainFunc -> INT . DOLAR MAIN LPAREN RPAREN statement

    DOLAR           shift and go to state 3


state 3

    (1) mainFunc -> INT DOLAR . MAIN LPAREN RPAREN statement

    MAIN            shift and go to state 4


state 4

    (1) mainFunc -> INT DOLAR MAIN . LPAREN RPAREN statement

    LPAREN          shift and go to state 5


state 5

    (1) mainFunc -> INT DOLAR MAIN LPAREN . RPAREN statement

    RPAREN          shift and go to state 6


state 6

    (1) mainFunc -> INT DOLAR MAIN LPAREN RPAREN . statement
    (87) statement -> . labeledStatement
    (88) statement -> . expressionStatement
    (89) statement -> . compoundStatement
    (90) statement -> . selectionStatement
    (91) statement -> . jumpStatement
    (92) labeledStatement -> . identifier COLON statement
    (93) labeledStatement -> . caseList default
    (101) expressionStatement -> . expression TERMINAL
    (102) expressionStatement -> . empty
    (103) compoundStatement -> . oscope declarationList statementList cscope
    (104) compoundStatement -> . empty
    (143) selectionStatement -> . IF LPAREN ifmark expression RPAREN statement endifmark
    (144) selectionStatement -> . IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement
    (145) selectionStatement -> . SWITCH LPAREN switchmark expression RPAREN statement endswitchmark
    (151) jumpStatement -> . BREAK TERMINAL
    (152) jumpStatement -> . CONTINUE TERMINAL
    (153) jumpStatement -> . RETURN expression TERMINAL
    (154) jumpStatement -> . RETURN TERMINAL
    (155) jumpStatement -> . GOTO identifier TERMINAL
    (132) identifier -> . ID
    (94) caseList -> . caseList CASE constantExpression COLON statement
    (95) caseList -> . empty
    (2) expression -> . assignmentExpression
    (3) expression -> . expression COMMA assignmentExpression
    (86) empty -> .
    (105) oscope -> . LEFTCURLYBRACKET
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

    IF              shift and go to state 19
    SWITCH          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    RETURN          shift and go to state 23
    GOTO            shift and go to state 24
    ID              shift and go to state 25
    $end            reduce using rule 86 (empty -> .)
    CASE            reduce using rule 86 (empty -> .)
    DEFAULT         reduce using rule 86 (empty -> .)
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)
    LEFTCURLYBRACKET shift and go to state 27
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)

    statement                      shift and go to state 8
    labeledStatement               shift and go to state 9
    expressionStatement            shift and go to state 10
    compoundStatement              shift and go to state 11
    selectionStatement             shift and go to state 12
    jumpStatement                  shift and go to state 13
    identifier                     shift and go to state 14
    caseList                       shift and go to state 15
    expression                     shift and go to state 16
    empty                          shift and go to state 17
    oscope                         shift and go to state 18
    assignmentExpression           shift and go to state 26
    conditionalExpression          shift and go to state 28
    unaryExpression                shift and go to state 29
    logicalOrExpression            shift and go to state 30
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58

state 7

    (15) primaryExpression -> LPAREN . expression RPAREN
    (70) castExpression -> LPAREN . simpleTypeName RPAREN castExpression
    (2) expression -> . assignmentExpression
    (3) expression -> . expression COMMA assignmentExpression
    (77) simpleTypeName -> . CHAR
    (78) simpleTypeName -> . SHORT
    (79) simpleTypeName -> . INT
    (80) simpleTypeName -> . LONG
    (81) simpleTypeName -> . SIGNED
    (82) simpleTypeName -> . UNSIGNED
    (83) simpleTypeName -> . FLOAT
    (84) simpleTypeName -> . DOUBLE
    (85) simpleTypeName -> . VOID
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (86) empty -> .
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

    CHAR            shift and go to state 61
    SHORT           shift and go to state 62
    INT             shift and go to state 63
    LONG            shift and go to state 64
    SIGNED          shift and go to state 65
    UNSIGNED        shift and go to state 66
    FLOAT           shift and go to state 67
    DOUBLE          shift and go to state 68
    VOID            shift and go to state 69
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    expression                     shift and go to state 59
    simpleTypeName                 shift and go to state 60
    castExpression                 shift and go to state 58
    assignmentExpression           shift and go to state 26
    conditionalExpression          shift and go to state 28
    unaryExpression                shift and go to state 29
    logicalOrExpression            shift and go to state 30
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    empty                          shift and go to state 71
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57

state 8

    (1) mainFunc -> INT DOLAR MAIN LPAREN RPAREN statement .

    $end            reduce using rule 1 (mainFunc -> INT DOLAR MAIN LPAREN RPAREN statement .)


state 9

    (87) statement -> labeledStatement .

    $end            reduce using rule 87 (statement -> labeledStatement .)
    RIGHTCURLYBRACKET reduce using rule 87 (statement -> labeledStatement .)
    IF              reduce using rule 87 (statement -> labeledStatement .)
    SWITCH          reduce using rule 87 (statement -> labeledStatement .)
    BREAK           reduce using rule 87 (statement -> labeledStatement .)
    CONTINUE        reduce using rule 87 (statement -> labeledStatement .)
    RETURN          reduce using rule 87 (statement -> labeledStatement .)
    GOTO            reduce using rule 87 (statement -> labeledStatement .)
    ID              reduce using rule 87 (statement -> labeledStatement .)
    LEFTCURLYBRACKET reduce using rule 87 (statement -> labeledStatement .)
    PLUSPLUS        reduce using rule 87 (statement -> labeledStatement .)
    MINUSMINUS      reduce using rule 87 (statement -> labeledStatement .)
    SIZEOF          reduce using rule 87 (statement -> labeledStatement .)
    TIMES           reduce using rule 87 (statement -> labeledStatement .)
    BIT_AND         reduce using rule 87 (statement -> labeledStatement .)
    U_PLUS          reduce using rule 87 (statement -> labeledStatement .)
    U_MINUS         reduce using rule 87 (statement -> labeledStatement .)
    NOT             reduce using rule 87 (statement -> labeledStatement .)
    BIT_NOT         reduce using rule 87 (statement -> labeledStatement .)
    LPAREN          reduce using rule 87 (statement -> labeledStatement .)
    CASE            reduce using rule 87 (statement -> labeledStatement .)
    DEFAULT         reduce using rule 87 (statement -> labeledStatement .)
    STRING          reduce using rule 87 (statement -> labeledStatement .)
    INTNUM          reduce using rule 87 (statement -> labeledStatement .)
    FLOATNUM        reduce using rule 87 (statement -> labeledStatement .)
    CHAR_CONST      reduce using rule 87 (statement -> labeledStatement .)
    ELSE            reduce using rule 87 (statement -> labeledStatement .)


state 10

    (88) statement -> expressionStatement .

    $end            reduce using rule 88 (statement -> expressionStatement .)
    RIGHTCURLYBRACKET reduce using rule 88 (statement -> expressionStatement .)
    IF              reduce using rule 88 (statement -> expressionStatement .)
    SWITCH          reduce using rule 88 (statement -> expressionStatement .)
    BREAK           reduce using rule 88 (statement -> expressionStatement .)
    CONTINUE        reduce using rule 88 (statement -> expressionStatement .)
    RETURN          reduce using rule 88 (statement -> expressionStatement .)
    GOTO            reduce using rule 88 (statement -> expressionStatement .)
    ID              reduce using rule 88 (statement -> expressionStatement .)
    LEFTCURLYBRACKET reduce using rule 88 (statement -> expressionStatement .)
    PLUSPLUS        reduce using rule 88 (statement -> expressionStatement .)
    MINUSMINUS      reduce using rule 88 (statement -> expressionStatement .)
    SIZEOF          reduce using rule 88 (statement -> expressionStatement .)
    TIMES           reduce using rule 88 (statement -> expressionStatement .)
    BIT_AND         reduce using rule 88 (statement -> expressionStatement .)
    U_PLUS          reduce using rule 88 (statement -> expressionStatement .)
    U_MINUS         reduce using rule 88 (statement -> expressionStatement .)
    NOT             reduce using rule 88 (statement -> expressionStatement .)
    BIT_NOT         reduce using rule 88 (statement -> expressionStatement .)
    LPAREN          reduce using rule 88 (statement -> expressionStatement .)
    CASE            reduce using rule 88 (statement -> expressionStatement .)
    DEFAULT         reduce using rule 88 (statement -> expressionStatement .)
    STRING          reduce using rule 88 (statement -> expressionStatement .)
    INTNUM          reduce using rule 88 (statement -> expressionStatement .)
    FLOATNUM        reduce using rule 88 (statement -> expressionStatement .)
    CHAR_CONST      reduce using rule 88 (statement -> expressionStatement .)
    ELSE            reduce using rule 88 (statement -> expressionStatement .)


state 11

    (89) statement -> compoundStatement .

    $end            reduce using rule 89 (statement -> compoundStatement .)
    RIGHTCURLYBRACKET reduce using rule 89 (statement -> compoundStatement .)
    IF              reduce using rule 89 (statement -> compoundStatement .)
    SWITCH          reduce using rule 89 (statement -> compoundStatement .)
    BREAK           reduce using rule 89 (statement -> compoundStatement .)
    CONTINUE        reduce using rule 89 (statement -> compoundStatement .)
    RETURN          reduce using rule 89 (statement -> compoundStatement .)
    GOTO            reduce using rule 89 (statement -> compoundStatement .)
    ID              reduce using rule 89 (statement -> compoundStatement .)
    LEFTCURLYBRACKET reduce using rule 89 (statement -> compoundStatement .)
    PLUSPLUS        reduce using rule 89 (statement -> compoundStatement .)
    MINUSMINUS      reduce using rule 89 (statement -> compoundStatement .)
    SIZEOF          reduce using rule 89 (statement -> compoundStatement .)
    TIMES           reduce using rule 89 (statement -> compoundStatement .)
    BIT_AND         reduce using rule 89 (statement -> compoundStatement .)
    U_PLUS          reduce using rule 89 (statement -> compoundStatement .)
    U_MINUS         reduce using rule 89 (statement -> compoundStatement .)
    NOT             reduce using rule 89 (statement -> compoundStatement .)
    BIT_NOT         reduce using rule 89 (statement -> compoundStatement .)
    LPAREN          reduce using rule 89 (statement -> compoundStatement .)
    CASE            reduce using rule 89 (statement -> compoundStatement .)
    DEFAULT         reduce using rule 89 (statement -> compoundStatement .)
    STRING          reduce using rule 89 (statement -> compoundStatement .)
    INTNUM          reduce using rule 89 (statement -> compoundStatement .)
    FLOATNUM        reduce using rule 89 (statement -> compoundStatement .)
    CHAR_CONST      reduce using rule 89 (statement -> compoundStatement .)
    ELSE            reduce using rule 89 (statement -> compoundStatement .)


state 12

    (90) statement -> selectionStatement .

    $end            reduce using rule 90 (statement -> selectionStatement .)
    RIGHTCURLYBRACKET reduce using rule 90 (statement -> selectionStatement .)
    IF              reduce using rule 90 (statement -> selectionStatement .)
    SWITCH          reduce using rule 90 (statement -> selectionStatement .)
    BREAK           reduce using rule 90 (statement -> selectionStatement .)
    CONTINUE        reduce using rule 90 (statement -> selectionStatement .)
    RETURN          reduce using rule 90 (statement -> selectionStatement .)
    GOTO            reduce using rule 90 (statement -> selectionStatement .)
    ID              reduce using rule 90 (statement -> selectionStatement .)
    LEFTCURLYBRACKET reduce using rule 90 (statement -> selectionStatement .)
    PLUSPLUS        reduce using rule 90 (statement -> selectionStatement .)
    MINUSMINUS      reduce using rule 90 (statement -> selectionStatement .)
    SIZEOF          reduce using rule 90 (statement -> selectionStatement .)
    TIMES           reduce using rule 90 (statement -> selectionStatement .)
    BIT_AND         reduce using rule 90 (statement -> selectionStatement .)
    U_PLUS          reduce using rule 90 (statement -> selectionStatement .)
    U_MINUS         reduce using rule 90 (statement -> selectionStatement .)
    NOT             reduce using rule 90 (statement -> selectionStatement .)
    BIT_NOT         reduce using rule 90 (statement -> selectionStatement .)
    LPAREN          reduce using rule 90 (statement -> selectionStatement .)
    CASE            reduce using rule 90 (statement -> selectionStatement .)
    DEFAULT         reduce using rule 90 (statement -> selectionStatement .)
    STRING          reduce using rule 90 (statement -> selectionStatement .)
    INTNUM          reduce using rule 90 (statement -> selectionStatement .)
    FLOATNUM        reduce using rule 90 (statement -> selectionStatement .)
    CHAR_CONST      reduce using rule 90 (statement -> selectionStatement .)
    ELSE            reduce using rule 90 (statement -> selectionStatement .)


state 13

    (91) statement -> jumpStatement .

    $end            reduce using rule 91 (statement -> jumpStatement .)
    RIGHTCURLYBRACKET reduce using rule 91 (statement -> jumpStatement .)
    IF              reduce using rule 91 (statement -> jumpStatement .)
    SWITCH          reduce using rule 91 (statement -> jumpStatement .)
    BREAK           reduce using rule 91 (statement -> jumpStatement .)
    CONTINUE        reduce using rule 91 (statement -> jumpStatement .)
    RETURN          reduce using rule 91 (statement -> jumpStatement .)
    GOTO            reduce using rule 91 (statement -> jumpStatement .)
    ID              reduce using rule 91 (statement -> jumpStatement .)
    LEFTCURLYBRACKET reduce using rule 91 (statement -> jumpStatement .)
    PLUSPLUS        reduce using rule 91 (statement -> jumpStatement .)
    MINUSMINUS      reduce using rule 91 (statement -> jumpStatement .)
    SIZEOF          reduce using rule 91 (statement -> jumpStatement .)
    TIMES           reduce using rule 91 (statement -> jumpStatement .)
    BIT_AND         reduce using rule 91 (statement -> jumpStatement .)
    U_PLUS          reduce using rule 91 (statement -> jumpStatement .)
    U_MINUS         reduce using rule 91 (statement -> jumpStatement .)
    NOT             reduce using rule 91 (statement -> jumpStatement .)
    BIT_NOT         reduce using rule 91 (statement -> jumpStatement .)
    LPAREN          reduce using rule 91 (statement -> jumpStatement .)
    CASE            reduce using rule 91 (statement -> jumpStatement .)
    DEFAULT         reduce using rule 91 (statement -> jumpStatement .)
    STRING          reduce using rule 91 (statement -> jumpStatement .)
    INTNUM          reduce using rule 91 (statement -> jumpStatement .)
    FLOATNUM        reduce using rule 91 (statement -> jumpStatement .)
    CHAR_CONST      reduce using rule 91 (statement -> jumpStatement .)
    ELSE            reduce using rule 91 (statement -> jumpStatement .)


state 14

    (92) labeledStatement -> identifier . COLON statement
    (16) markid -> identifier .

    COLON           shift and go to state 72
    LEFTSQRBRACKET  reduce using rule 16 (markid -> identifier .)
    PLUSPLUS        reduce using rule 16 (markid -> identifier .)
    MINUSMINUS      reduce using rule 16 (markid -> identifier .)
    ASSIGNMENT      reduce using rule 16 (markid -> identifier .)
    MULT_EQ         reduce using rule 16 (markid -> identifier .)
    DIVIDE_EQ       reduce using rule 16 (markid -> identifier .)
    MOD_EQ          reduce using rule 16 (markid -> identifier .)
    PLUS_EQ         reduce using rule 16 (markid -> identifier .)
    MINUS_EQ        reduce using rule 16 (markid -> identifier .)
    GTEQ            reduce using rule 16 (markid -> identifier .)
    LTEQ            reduce using rule 16 (markid -> identifier .)
    AND_EQ          reduce using rule 16 (markid -> identifier .)
    XOR_EQ          reduce using rule 16 (markid -> identifier .)
    OR_EQ           reduce using rule 16 (markid -> identifier .)
    TIMES           reduce using rule 16 (markid -> identifier .)
    DIVIDE          reduce using rule 16 (markid -> identifier .)
    MOD             reduce using rule 16 (markid -> identifier .)
    U_PLUS          reduce using rule 16 (markid -> identifier .)
    U_MINUS         reduce using rule 16 (markid -> identifier .)
    LSHIFT          reduce using rule 16 (markid -> identifier .)
    RSHIFT          reduce using rule 16 (markid -> identifier .)
    LT              reduce using rule 16 (markid -> identifier .)
    GT              reduce using rule 16 (markid -> identifier .)
    EQUAL           reduce using rule 16 (markid -> identifier .)
    NEQUAL          reduce using rule 16 (markid -> identifier .)
    BIT_AND         reduce using rule 16 (markid -> identifier .)
    BIT_XOR         reduce using rule 16 (markid -> identifier .)
    BIT_OR          reduce using rule 16 (markid -> identifier .)
    AND             reduce using rule 16 (markid -> identifier .)
    QUES_MARK       reduce using rule 16 (markid -> identifier .)
    OR              reduce using rule 16 (markid -> identifier .)
    TERMINAL        reduce using rule 16 (markid -> identifier .)
    COMMA           reduce using rule 16 (markid -> identifier .)


state 15

    (93) labeledStatement -> caseList . default
    (94) caseList -> caseList . CASE constantExpression COLON statement
    (96) default -> . DEFAULT defaultmark COLON statement enddefault
    (97) default -> . empty
    (86) empty -> .

  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
    CASE            shift and go to state 74
    DEFAULT         shift and go to state 75
    $end            reduce using rule 86 (empty -> .)
    RIGHTCURLYBRACKET reduce using rule 86 (empty -> .)
    IF              reduce using rule 86 (empty -> .)
    SWITCH          reduce using rule 86 (empty -> .)
    BREAK           reduce using rule 86 (empty -> .)
    CONTINUE        reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    GOTO            reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    LEFTCURLYBRACKET reduce using rule 86 (empty -> .)
    PLUSPLUS        reduce using rule 86 (empty -> .)
    MINUSMINUS      reduce using rule 86 (empty -> .)
    SIZEOF          reduce using rule 86 (empty -> .)
    TIMES           reduce using rule 86 (empty -> .)
    BIT_AND         reduce using rule 86 (empty -> .)
    U_PLUS          reduce using rule 86 (empty -> .)
    U_MINUS         reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    BIT_NOT         reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)

  ! CASE            [ reduce using rule 86 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 86 (empty -> .) ]

    default                        shift and go to state 73
    empty                          shift and go to state 76

state 16

    (101) expressionStatement -> expression . TERMINAL
    (3) expression -> expression . COMMA assignmentExpression

    TERMINAL        shift and go to state 77
    COMMA           shift and go to state 78


state 17

    (102) expressionStatement -> empty .
    (104) compoundStatement -> empty .
    (95) caseList -> empty .
    (25) markint -> empty .
    (26) markfloat -> empty .
    (27) markchar -> empty .

  ! reduce/reduce conflict for $end resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for RIGHTCURLYBRACKET resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for SWITCH resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for BREAK resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for GOTO resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for LEFTCURLYBRACKET resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for SIZEOF resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for TIMES resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for BIT_AND resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for U_PLUS resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for U_MINUS resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for NOT resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for BIT_NOT resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for LPAREN resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for CASE resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for STRING resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for INTNUM resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for FLOATNUM resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for CHAR_CONST resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 102 (expressionStatement -> empty .)
  ! reduce/reduce conflict for CASE resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for RIGHTCURLYBRACKET resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for SWITCH resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for BREAK resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for GOTO resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for LEFTCURLYBRACKET resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for PLUSPLUS resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for MINUSMINUS resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for SIZEOF resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for TIMES resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for BIT_AND resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for U_PLUS resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for U_MINUS resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for NOT resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for BIT_NOT resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for LPAREN resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for STRING resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for INTNUM resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for FLOATNUM resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for CHAR_CONST resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 95 (caseList -> empty .)
  ! reduce/reduce conflict for INTNUM resolved using rule 25 (markint -> empty .)
  ! reduce/reduce conflict for FLOATNUM resolved using rule 26 (markfloat -> empty .)
  ! reduce/reduce conflict for CHAR_CONST resolved using rule 27 (markchar -> empty .)
    CASE            reduce using rule 95 (caseList -> empty .)
    DEFAULT         reduce using rule 95 (caseList -> empty .)
    $end            reduce using rule 95 (caseList -> empty .)
    RIGHTCURLYBRACKET reduce using rule 95 (caseList -> empty .)
    IF              reduce using rule 95 (caseList -> empty .)
    SWITCH          reduce using rule 95 (caseList -> empty .)
    BREAK           reduce using rule 95 (caseList -> empty .)
    CONTINUE        reduce using rule 95 (caseList -> empty .)
    RETURN          reduce using rule 95 (caseList -> empty .)
    GOTO            reduce using rule 95 (caseList -> empty .)
    ID              reduce using rule 95 (caseList -> empty .)
    LEFTCURLYBRACKET reduce using rule 95 (caseList -> empty .)
    PLUSPLUS        reduce using rule 95 (caseList -> empty .)
    MINUSMINUS      reduce using rule 95 (caseList -> empty .)
    SIZEOF          reduce using rule 95 (caseList -> empty .)
    TIMES           reduce using rule 95 (caseList -> empty .)
    BIT_AND         reduce using rule 95 (caseList -> empty .)
    U_PLUS          reduce using rule 95 (caseList -> empty .)
    U_MINUS         reduce using rule 95 (caseList -> empty .)
    NOT             reduce using rule 95 (caseList -> empty .)
    BIT_NOT         reduce using rule 95 (caseList -> empty .)
    LPAREN          reduce using rule 95 (caseList -> empty .)
    STRING          reduce using rule 95 (caseList -> empty .)
    ELSE            reduce using rule 95 (caseList -> empty .)
    INTNUM          reduce using rule 25 (markint -> empty .)
    FLOATNUM        reduce using rule 26 (markfloat -> empty .)
    CHAR_CONST      reduce using rule 27 (markchar -> empty .)

  ! $end            [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! RIGHTCURLYBRACKET [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! IF              [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! SWITCH          [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! BREAK           [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! CONTINUE        [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! RETURN          [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! GOTO            [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! ID              [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! LEFTCURLYBRACKET [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! PLUSPLUS        [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! MINUSMINUS      [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! SIZEOF          [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! TIMES           [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! BIT_AND         [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! U_PLUS          [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! U_MINUS         [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! NOT             [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! BIT_NOT         [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! LPAREN          [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! CASE            [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! DEFAULT         [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! STRING          [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! INTNUM          [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! FLOATNUM        [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! CHAR_CONST      [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! ELSE            [ reduce using rule 102 (expressionStatement -> empty .) ]
  ! $end            [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! RIGHTCURLYBRACKET [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! IF              [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! SWITCH          [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! BREAK           [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! CONTINUE        [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! RETURN          [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! GOTO            [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! ID              [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! LEFTCURLYBRACKET [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! PLUSPLUS        [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! MINUSMINUS      [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! SIZEOF          [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! TIMES           [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! BIT_AND         [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! U_PLUS          [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! U_MINUS         [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! NOT             [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! BIT_NOT         [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! LPAREN          [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! CASE            [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! DEFAULT         [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! STRING          [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! INTNUM          [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! FLOATNUM        [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! CHAR_CONST      [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! ELSE            [ reduce using rule 104 (compoundStatement -> empty .) ]
  ! INTNUM          [ reduce using rule 95 (caseList -> empty .) ]
  ! FLOATNUM        [ reduce using rule 95 (caseList -> empty .) ]
  ! CHAR_CONST      [ reduce using rule 95 (caseList -> empty .) ]


state 18

    (103) compoundStatement -> oscope . declarationList statementList cscope
    (109) declarationList -> . declarationList declaration
    (110) declarationList -> . empty
    (86) empty -> .

    AUTO            reduce using rule 86 (empty -> .)
    REGISTER        reduce using rule 86 (empty -> .)
    STATIC          reduce using rule 86 (empty -> .)
    EXTERN          reduce using rule 86 (empty -> .)
    TYPEDEF         reduce using rule 86 (empty -> .)
    CHAR            reduce using rule 86 (empty -> .)
    SHORT           reduce using rule 86 (empty -> .)
    INT             reduce using rule 86 (empty -> .)
    LONG            reduce using rule 86 (empty -> .)
    SIGNED          reduce using rule 86 (empty -> .)
    UNSIGNED        reduce using rule 86 (empty -> .)
    FLOAT           reduce using rule 86 (empty -> .)
    DOUBLE          reduce using rule 86 (empty -> .)
    VOID            reduce using rule 86 (empty -> .)
    CONST           reduce using rule 86 (empty -> .)
    VOLATILE        reduce using rule 86 (empty -> .)
    RIGHTCURLYBRACKET reduce using rule 86 (empty -> .)
    IF              reduce using rule 86 (empty -> .)
    SWITCH          reduce using rule 86 (empty -> .)
    BREAK           reduce using rule 86 (empty -> .)
    CONTINUE        reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    GOTO            reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    LEFTCURLYBRACKET reduce using rule 86 (empty -> .)
    PLUSPLUS        reduce using rule 86 (empty -> .)
    MINUSMINUS      reduce using rule 86 (empty -> .)
    SIZEOF          reduce using rule 86 (empty -> .)
    TIMES           reduce using rule 86 (empty -> .)
    BIT_AND         reduce using rule 86 (empty -> .)
    U_PLUS          reduce using rule 86 (empty -> .)
    U_MINUS         reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    BIT_NOT         reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    CASE            reduce using rule 86 (empty -> .)
    DEFAULT         reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    declarationList                shift and go to state 79
    empty                          shift and go to state 80

state 19

    (143) selectionStatement -> IF . LPAREN ifmark expression RPAREN statement endifmark
    (144) selectionStatement -> IF . LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement

    LPAREN          shift and go to state 81


state 20

    (145) selectionStatement -> SWITCH . LPAREN switchmark expression RPAREN statement endswitchmark

    LPAREN          shift and go to state 82


state 21

    (151) jumpStatement -> BREAK . TERMINAL

    TERMINAL        shift and go to state 83


state 22

    (152) jumpStatement -> CONTINUE . TERMINAL

    TERMINAL        shift and go to state 84


state 23

    (153) jumpStatement -> RETURN . expression TERMINAL
    (154) jumpStatement -> RETURN . TERMINAL
    (2) expression -> . assignmentExpression
    (3) expression -> . expression COMMA assignmentExpression
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (86) empty -> .
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

    TERMINAL        shift and go to state 86
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    expression                     shift and go to state 85
    assignmentExpression           shift and go to state 26
    conditionalExpression          shift and go to state 28
    unaryExpression                shift and go to state 29
    logicalOrExpression            shift and go to state 30
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    empty                          shift and go to state 71
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58

state 24

    (155) jumpStatement -> GOTO . identifier TERMINAL
    (132) identifier -> . ID

    ID              shift and go to state 25

    identifier                     shift and go to state 87

state 25

    (132) identifier -> ID .

    COLON           reduce using rule 132 (identifier -> ID .)
    LEFTSQRBRACKET  reduce using rule 132 (identifier -> ID .)
    PLUSPLUS        reduce using rule 132 (identifier -> ID .)
    MINUSMINUS      reduce using rule 132 (identifier -> ID .)
    ASSIGNMENT      reduce using rule 132 (identifier -> ID .)
    MULT_EQ         reduce using rule 132 (identifier -> ID .)
    DIVIDE_EQ       reduce using rule 132 (identifier -> ID .)
    MOD_EQ          reduce using rule 132 (identifier -> ID .)
    PLUS_EQ         reduce using rule 132 (identifier -> ID .)
    MINUS_EQ        reduce using rule 132 (identifier -> ID .)
    GTEQ            reduce using rule 132 (identifier -> ID .)
    LTEQ            reduce using rule 132 (identifier -> ID .)
    AND_EQ          reduce using rule 132 (identifier -> ID .)
    XOR_EQ          reduce using rule 132 (identifier -> ID .)
    OR_EQ           reduce using rule 132 (identifier -> ID .)
    TIMES           reduce using rule 132 (identifier -> ID .)
    DIVIDE          reduce using rule 132 (identifier -> ID .)
    MOD             reduce using rule 132 (identifier -> ID .)
    U_PLUS          reduce using rule 132 (identifier -> ID .)
    U_MINUS         reduce using rule 132 (identifier -> ID .)
    LSHIFT          reduce using rule 132 (identifier -> ID .)
    RSHIFT          reduce using rule 132 (identifier -> ID .)
    LT              reduce using rule 132 (identifier -> ID .)
    GT              reduce using rule 132 (identifier -> ID .)
    EQUAL           reduce using rule 132 (identifier -> ID .)
    NEQUAL          reduce using rule 132 (identifier -> ID .)
    BIT_AND         reduce using rule 132 (identifier -> ID .)
    BIT_XOR         reduce using rule 132 (identifier -> ID .)
    BIT_OR          reduce using rule 132 (identifier -> ID .)
    AND             reduce using rule 132 (identifier -> ID .)
    QUES_MARK       reduce using rule 132 (identifier -> ID .)
    OR              reduce using rule 132 (identifier -> ID .)
    TERMINAL        reduce using rule 132 (identifier -> ID .)
    COMMA           reduce using rule 132 (identifier -> ID .)
    RPAREN          reduce using rule 132 (identifier -> ID .)
    RIGHTSQRBRACKET reduce using rule 132 (identifier -> ID .)


state 26

    (2) expression -> assignmentExpression .

    TERMINAL        reduce using rule 2 (expression -> assignmentExpression .)
    COMMA           reduce using rule 2 (expression -> assignmentExpression .)
    RPAREN          reduce using rule 2 (expression -> assignmentExpression .)
    COLON           reduce using rule 2 (expression -> assignmentExpression .)
    RIGHTSQRBRACKET reduce using rule 2 (expression -> assignmentExpression .)


state 27

    (105) oscope -> LEFTCURLYBRACKET .

    AUTO            reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    REGISTER        reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    STATIC          reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    EXTERN          reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    TYPEDEF         reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    CHAR            reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    SHORT           reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    INT             reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    LONG            reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    SIGNED          reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    UNSIGNED        reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    FLOAT           reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    DOUBLE          reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    VOID            reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    CONST           reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    VOLATILE        reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    RIGHTCURLYBRACKET reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    IF              reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    SWITCH          reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    BREAK           reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    CONTINUE        reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    RETURN          reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    GOTO            reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    ID              reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    LEFTCURLYBRACKET reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    PLUSPLUS        reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    MINUSMINUS      reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    SIZEOF          reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    TIMES           reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    BIT_AND         reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    U_PLUS          reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    U_MINUS         reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    NOT             reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    BIT_NOT         reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    LPAREN          reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    CASE            reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    DEFAULT         reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    STRING          reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    INTNUM          reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    FLOATNUM        reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)
    CHAR_CONST      reduce using rule 105 (oscope -> LEFTCURLYBRACKET .)


state 28

    (4) assignmentExpression -> conditionalExpression .

    TERMINAL        reduce using rule 4 (assignmentExpression -> conditionalExpression .)
    COMMA           reduce using rule 4 (assignmentExpression -> conditionalExpression .)
    RPAREN          reduce using rule 4 (assignmentExpression -> conditionalExpression .)
    COLON           reduce using rule 4 (assignmentExpression -> conditionalExpression .)
    RIGHTSQRBRACKET reduce using rule 4 (assignmentExpression -> conditionalExpression .)


state 29

    (5) assignmentExpression -> unaryExpression . assignOper assignmentExpression
    (69) castExpression -> unaryExpression .
    (28) assignOper -> . ASSIGNMENT
    (29) assignOper -> . MULT_EQ
    (30) assignOper -> . DIVIDE_EQ
    (31) assignOper -> . MOD_EQ
    (32) assignOper -> . PLUS_EQ
    (33) assignOper -> . MINUS_EQ
    (34) assignOper -> . GTEQ
    (35) assignOper -> . LTEQ
    (36) assignOper -> . AND_EQ
    (37) assignOper -> . XOR_EQ
    (38) assignOper -> . OR_EQ

  ! shift/reduce conflict for GTEQ resolved as shift
  ! shift/reduce conflict for LTEQ resolved as shift
    TIMES           reduce using rule 69 (castExpression -> unaryExpression .)
    DIVIDE          reduce using rule 69 (castExpression -> unaryExpression .)
    MOD             reduce using rule 69 (castExpression -> unaryExpression .)
    U_PLUS          reduce using rule 69 (castExpression -> unaryExpression .)
    U_MINUS         reduce using rule 69 (castExpression -> unaryExpression .)
    LSHIFT          reduce using rule 69 (castExpression -> unaryExpression .)
    RSHIFT          reduce using rule 69 (castExpression -> unaryExpression .)
    LT              reduce using rule 69 (castExpression -> unaryExpression .)
    GT              reduce using rule 69 (castExpression -> unaryExpression .)
    EQUAL           reduce using rule 69 (castExpression -> unaryExpression .)
    NEQUAL          reduce using rule 69 (castExpression -> unaryExpression .)
    BIT_AND         reduce using rule 69 (castExpression -> unaryExpression .)
    BIT_XOR         reduce using rule 69 (castExpression -> unaryExpression .)
    BIT_OR          reduce using rule 69 (castExpression -> unaryExpression .)
    AND             reduce using rule 69 (castExpression -> unaryExpression .)
    QUES_MARK       reduce using rule 69 (castExpression -> unaryExpression .)
    OR              reduce using rule 69 (castExpression -> unaryExpression .)
    TERMINAL        reduce using rule 69 (castExpression -> unaryExpression .)
    COMMA           reduce using rule 69 (castExpression -> unaryExpression .)
    RPAREN          reduce using rule 69 (castExpression -> unaryExpression .)
    COLON           reduce using rule 69 (castExpression -> unaryExpression .)
    RIGHTSQRBRACKET reduce using rule 69 (castExpression -> unaryExpression .)
    ASSIGNMENT      shift and go to state 89
    MULT_EQ         shift and go to state 90
    DIVIDE_EQ       shift and go to state 91
    MOD_EQ          shift and go to state 92
    PLUS_EQ         shift and go to state 93
    MINUS_EQ        shift and go to state 94
    GTEQ            shift and go to state 95
    LTEQ            shift and go to state 96
    AND_EQ          shift and go to state 97
    XOR_EQ          shift and go to state 98
    OR_EQ           shift and go to state 99

  ! LTEQ            [ reduce using rule 69 (castExpression -> unaryExpression .) ]
  ! GTEQ            [ reduce using rule 69 (castExpression -> unaryExpression .) ]

    assignOper                     shift and go to state 88

state 30

    (39) conditionalExpression -> logicalOrExpression .
    (40) conditionalExpression -> logicalOrExpression . QUES_MARK expression COLON conditionalExpression
    (42) logicalOrExpression -> logicalOrExpression . OR logicalAndExpression

    TERMINAL        reduce using rule 39 (conditionalExpression -> logicalOrExpression .)
    COMMA           reduce using rule 39 (conditionalExpression -> logicalOrExpression .)
    RPAREN          reduce using rule 39 (conditionalExpression -> logicalOrExpression .)
    COLON           reduce using rule 39 (conditionalExpression -> logicalOrExpression .)
    RIGHTSQRBRACKET reduce using rule 39 (conditionalExpression -> logicalOrExpression .)
    QUES_MARK       shift and go to state 100
    OR              shift and go to state 101


state 31

    (6) unaryExpression -> postfixExpression .
    (19) postfixExpression -> postfixExpression . LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> postfixExpression . PLUSPLUS
    (21) postfixExpression -> postfixExpression . MINUSMINUS

    ASSIGNMENT      reduce using rule 6 (unaryExpression -> postfixExpression .)
    MULT_EQ         reduce using rule 6 (unaryExpression -> postfixExpression .)
    DIVIDE_EQ       reduce using rule 6 (unaryExpression -> postfixExpression .)
    MOD_EQ          reduce using rule 6 (unaryExpression -> postfixExpression .)
    PLUS_EQ         reduce using rule 6 (unaryExpression -> postfixExpression .)
    MINUS_EQ        reduce using rule 6 (unaryExpression -> postfixExpression .)
    GTEQ            reduce using rule 6 (unaryExpression -> postfixExpression .)
    LTEQ            reduce using rule 6 (unaryExpression -> postfixExpression .)
    AND_EQ          reduce using rule 6 (unaryExpression -> postfixExpression .)
    XOR_EQ          reduce using rule 6 (unaryExpression -> postfixExpression .)
    OR_EQ           reduce using rule 6 (unaryExpression -> postfixExpression .)
    TIMES           reduce using rule 6 (unaryExpression -> postfixExpression .)
    DIVIDE          reduce using rule 6 (unaryExpression -> postfixExpression .)
    MOD             reduce using rule 6 (unaryExpression -> postfixExpression .)
    U_PLUS          reduce using rule 6 (unaryExpression -> postfixExpression .)
    U_MINUS         reduce using rule 6 (unaryExpression -> postfixExpression .)
    LSHIFT          reduce using rule 6 (unaryExpression -> postfixExpression .)
    RSHIFT          reduce using rule 6 (unaryExpression -> postfixExpression .)
    LT              reduce using rule 6 (unaryExpression -> postfixExpression .)
    GT              reduce using rule 6 (unaryExpression -> postfixExpression .)
    EQUAL           reduce using rule 6 (unaryExpression -> postfixExpression .)
    NEQUAL          reduce using rule 6 (unaryExpression -> postfixExpression .)
    BIT_AND         reduce using rule 6 (unaryExpression -> postfixExpression .)
    BIT_XOR         reduce using rule 6 (unaryExpression -> postfixExpression .)
    BIT_OR          reduce using rule 6 (unaryExpression -> postfixExpression .)
    AND             reduce using rule 6 (unaryExpression -> postfixExpression .)
    QUES_MARK       reduce using rule 6 (unaryExpression -> postfixExpression .)
    OR              reduce using rule 6 (unaryExpression -> postfixExpression .)
    TERMINAL        reduce using rule 6 (unaryExpression -> postfixExpression .)
    COMMA           reduce using rule 6 (unaryExpression -> postfixExpression .)
    RPAREN          reduce using rule 6 (unaryExpression -> postfixExpression .)
    COLON           reduce using rule 6 (unaryExpression -> postfixExpression .)
    RIGHTSQRBRACKET reduce using rule 6 (unaryExpression -> postfixExpression .)
    LEFTSQRBRACKET  shift and go to state 102
    PLUSPLUS        shift and go to state 103
    MINUSMINUS      shift and go to state 104


state 32

    (7) unaryExpression -> PLUSPLUS . unaryExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 106
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    unaryExpression                shift and go to state 105
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 33

    (8) unaryExpression -> MINUSMINUS . unaryExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 106
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    unaryExpression                shift and go to state 107
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 34

    (9) unaryExpression -> unaryOper . unaryExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 106
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    unaryOper                      shift and go to state 34
    unaryExpression                shift and go to state 108
    postfixExpression              shift and go to state 31
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 35

    (10) unaryExpression -> SIZEOF . unaryExpression
    (11) unaryExpression -> SIZEOF . LPAREN simpleTypeName RPAREN
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 110
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    unaryExpression                shift and go to state 109
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 36

    (41) logicalOrExpression -> logicalAndExpression .
    (44) logicalAndExpression -> logicalAndExpression . AND inclusiveOrExpression

    QUES_MARK       reduce using rule 41 (logicalOrExpression -> logicalAndExpression .)
    OR              reduce using rule 41 (logicalOrExpression -> logicalAndExpression .)
    TERMINAL        reduce using rule 41 (logicalOrExpression -> logicalAndExpression .)
    COMMA           reduce using rule 41 (logicalOrExpression -> logicalAndExpression .)
    RPAREN          reduce using rule 41 (logicalOrExpression -> logicalAndExpression .)
    COLON           reduce using rule 41 (logicalOrExpression -> logicalAndExpression .)
    RIGHTSQRBRACKET reduce using rule 41 (logicalOrExpression -> logicalAndExpression .)
    AND             shift and go to state 111


state 37

    (18) postfixExpression -> primaryExpression .

    LEFTSQRBRACKET  reduce using rule 18 (postfixExpression -> primaryExpression .)
    PLUSPLUS        reduce using rule 18 (postfixExpression -> primaryExpression .)
    MINUSMINUS      reduce using rule 18 (postfixExpression -> primaryExpression .)
    ASSIGNMENT      reduce using rule 18 (postfixExpression -> primaryExpression .)
    MULT_EQ         reduce using rule 18 (postfixExpression -> primaryExpression .)
    DIVIDE_EQ       reduce using rule 18 (postfixExpression -> primaryExpression .)
    MOD_EQ          reduce using rule 18 (postfixExpression -> primaryExpression .)
    PLUS_EQ         reduce using rule 18 (postfixExpression -> primaryExpression .)
    MINUS_EQ        reduce using rule 18 (postfixExpression -> primaryExpression .)
    GTEQ            reduce using rule 18 (postfixExpression -> primaryExpression .)
    LTEQ            reduce using rule 18 (postfixExpression -> primaryExpression .)
    AND_EQ          reduce using rule 18 (postfixExpression -> primaryExpression .)
    XOR_EQ          reduce using rule 18 (postfixExpression -> primaryExpression .)
    OR_EQ           reduce using rule 18 (postfixExpression -> primaryExpression .)
    TIMES           reduce using rule 18 (postfixExpression -> primaryExpression .)
    DIVIDE          reduce using rule 18 (postfixExpression -> primaryExpression .)
    MOD             reduce using rule 18 (postfixExpression -> primaryExpression .)
    U_PLUS          reduce using rule 18 (postfixExpression -> primaryExpression .)
    U_MINUS         reduce using rule 18 (postfixExpression -> primaryExpression .)
    LSHIFT          reduce using rule 18 (postfixExpression -> primaryExpression .)
    RSHIFT          reduce using rule 18 (postfixExpression -> primaryExpression .)
    LT              reduce using rule 18 (postfixExpression -> primaryExpression .)
    GT              reduce using rule 18 (postfixExpression -> primaryExpression .)
    EQUAL           reduce using rule 18 (postfixExpression -> primaryExpression .)
    NEQUAL          reduce using rule 18 (postfixExpression -> primaryExpression .)
    BIT_AND         reduce using rule 18 (postfixExpression -> primaryExpression .)
    BIT_XOR         reduce using rule 18 (postfixExpression -> primaryExpression .)
    BIT_OR          reduce using rule 18 (postfixExpression -> primaryExpression .)
    AND             reduce using rule 18 (postfixExpression -> primaryExpression .)
    QUES_MARK       reduce using rule 18 (postfixExpression -> primaryExpression .)
    OR              reduce using rule 18 (postfixExpression -> primaryExpression .)
    TERMINAL        reduce using rule 18 (postfixExpression -> primaryExpression .)
    COMMA           reduce using rule 18 (postfixExpression -> primaryExpression .)
    RPAREN          reduce using rule 18 (postfixExpression -> primaryExpression .)
    COLON           reduce using rule 18 (postfixExpression -> primaryExpression .)
    RIGHTSQRBRACKET reduce using rule 18 (postfixExpression -> primaryExpression .)


state 38

    (71) unaryOper -> TIMES .

    PLUSPLUS        reduce using rule 71 (unaryOper -> TIMES .)
    MINUSMINUS      reduce using rule 71 (unaryOper -> TIMES .)
    SIZEOF          reduce using rule 71 (unaryOper -> TIMES .)
    TIMES           reduce using rule 71 (unaryOper -> TIMES .)
    BIT_AND         reduce using rule 71 (unaryOper -> TIMES .)
    U_PLUS          reduce using rule 71 (unaryOper -> TIMES .)
    U_MINUS         reduce using rule 71 (unaryOper -> TIMES .)
    NOT             reduce using rule 71 (unaryOper -> TIMES .)
    BIT_NOT         reduce using rule 71 (unaryOper -> TIMES .)
    LPAREN          reduce using rule 71 (unaryOper -> TIMES .)
    ID              reduce using rule 71 (unaryOper -> TIMES .)
    STRING          reduce using rule 71 (unaryOper -> TIMES .)
    INTNUM          reduce using rule 71 (unaryOper -> TIMES .)
    FLOATNUM        reduce using rule 71 (unaryOper -> TIMES .)
    CHAR_CONST      reduce using rule 71 (unaryOper -> TIMES .)


state 39

    (72) unaryOper -> BIT_AND .

    PLUSPLUS        reduce using rule 72 (unaryOper -> BIT_AND .)
    MINUSMINUS      reduce using rule 72 (unaryOper -> BIT_AND .)
    SIZEOF          reduce using rule 72 (unaryOper -> BIT_AND .)
    TIMES           reduce using rule 72 (unaryOper -> BIT_AND .)
    BIT_AND         reduce using rule 72 (unaryOper -> BIT_AND .)
    U_PLUS          reduce using rule 72 (unaryOper -> BIT_AND .)
    U_MINUS         reduce using rule 72 (unaryOper -> BIT_AND .)
    NOT             reduce using rule 72 (unaryOper -> BIT_AND .)
    BIT_NOT         reduce using rule 72 (unaryOper -> BIT_AND .)
    LPAREN          reduce using rule 72 (unaryOper -> BIT_AND .)
    ID              reduce using rule 72 (unaryOper -> BIT_AND .)
    STRING          reduce using rule 72 (unaryOper -> BIT_AND .)
    INTNUM          reduce using rule 72 (unaryOper -> BIT_AND .)
    FLOATNUM        reduce using rule 72 (unaryOper -> BIT_AND .)
    CHAR_CONST      reduce using rule 72 (unaryOper -> BIT_AND .)


state 40

    (73) unaryOper -> U_PLUS .

    PLUSPLUS        reduce using rule 73 (unaryOper -> U_PLUS .)
    MINUSMINUS      reduce using rule 73 (unaryOper -> U_PLUS .)
    SIZEOF          reduce using rule 73 (unaryOper -> U_PLUS .)
    TIMES           reduce using rule 73 (unaryOper -> U_PLUS .)
    BIT_AND         reduce using rule 73 (unaryOper -> U_PLUS .)
    U_PLUS          reduce using rule 73 (unaryOper -> U_PLUS .)
    U_MINUS         reduce using rule 73 (unaryOper -> U_PLUS .)
    NOT             reduce using rule 73 (unaryOper -> U_PLUS .)
    BIT_NOT         reduce using rule 73 (unaryOper -> U_PLUS .)
    LPAREN          reduce using rule 73 (unaryOper -> U_PLUS .)
    ID              reduce using rule 73 (unaryOper -> U_PLUS .)
    STRING          reduce using rule 73 (unaryOper -> U_PLUS .)
    INTNUM          reduce using rule 73 (unaryOper -> U_PLUS .)
    FLOATNUM        reduce using rule 73 (unaryOper -> U_PLUS .)
    CHAR_CONST      reduce using rule 73 (unaryOper -> U_PLUS .)


state 41

    (74) unaryOper -> U_MINUS .

    PLUSPLUS        reduce using rule 74 (unaryOper -> U_MINUS .)
    MINUSMINUS      reduce using rule 74 (unaryOper -> U_MINUS .)
    SIZEOF          reduce using rule 74 (unaryOper -> U_MINUS .)
    TIMES           reduce using rule 74 (unaryOper -> U_MINUS .)
    BIT_AND         reduce using rule 74 (unaryOper -> U_MINUS .)
    U_PLUS          reduce using rule 74 (unaryOper -> U_MINUS .)
    U_MINUS         reduce using rule 74 (unaryOper -> U_MINUS .)
    NOT             reduce using rule 74 (unaryOper -> U_MINUS .)
    BIT_NOT         reduce using rule 74 (unaryOper -> U_MINUS .)
    LPAREN          reduce using rule 74 (unaryOper -> U_MINUS .)
    ID              reduce using rule 74 (unaryOper -> U_MINUS .)
    STRING          reduce using rule 74 (unaryOper -> U_MINUS .)
    INTNUM          reduce using rule 74 (unaryOper -> U_MINUS .)
    FLOATNUM        reduce using rule 74 (unaryOper -> U_MINUS .)
    CHAR_CONST      reduce using rule 74 (unaryOper -> U_MINUS .)


state 42

    (75) unaryOper -> NOT .

    PLUSPLUS        reduce using rule 75 (unaryOper -> NOT .)
    MINUSMINUS      reduce using rule 75 (unaryOper -> NOT .)
    SIZEOF          reduce using rule 75 (unaryOper -> NOT .)
    TIMES           reduce using rule 75 (unaryOper -> NOT .)
    BIT_AND         reduce using rule 75 (unaryOper -> NOT .)
    U_PLUS          reduce using rule 75 (unaryOper -> NOT .)
    U_MINUS         reduce using rule 75 (unaryOper -> NOT .)
    NOT             reduce using rule 75 (unaryOper -> NOT .)
    BIT_NOT         reduce using rule 75 (unaryOper -> NOT .)
    LPAREN          reduce using rule 75 (unaryOper -> NOT .)
    ID              reduce using rule 75 (unaryOper -> NOT .)
    STRING          reduce using rule 75 (unaryOper -> NOT .)
    INTNUM          reduce using rule 75 (unaryOper -> NOT .)
    FLOATNUM        reduce using rule 75 (unaryOper -> NOT .)
    CHAR_CONST      reduce using rule 75 (unaryOper -> NOT .)


state 43

    (76) unaryOper -> BIT_NOT .

    PLUSPLUS        reduce using rule 76 (unaryOper -> BIT_NOT .)
    MINUSMINUS      reduce using rule 76 (unaryOper -> BIT_NOT .)
    SIZEOF          reduce using rule 76 (unaryOper -> BIT_NOT .)
    TIMES           reduce using rule 76 (unaryOper -> BIT_NOT .)
    BIT_AND         reduce using rule 76 (unaryOper -> BIT_NOT .)
    U_PLUS          reduce using rule 76 (unaryOper -> BIT_NOT .)
    U_MINUS         reduce using rule 76 (unaryOper -> BIT_NOT .)
    NOT             reduce using rule 76 (unaryOper -> BIT_NOT .)
    BIT_NOT         reduce using rule 76 (unaryOper -> BIT_NOT .)
    LPAREN          reduce using rule 76 (unaryOper -> BIT_NOT .)
    ID              reduce using rule 76 (unaryOper -> BIT_NOT .)
    STRING          reduce using rule 76 (unaryOper -> BIT_NOT .)
    INTNUM          reduce using rule 76 (unaryOper -> BIT_NOT .)
    FLOATNUM        reduce using rule 76 (unaryOper -> BIT_NOT .)
    CHAR_CONST      reduce using rule 76 (unaryOper -> BIT_NOT .)


state 44

    (43) logicalAndExpression -> inclusiveOrExpression .
    (46) inclusiveOrExpression -> inclusiveOrExpression . BIT_OR exclusiveOrExpression

    AND             reduce using rule 43 (logicalAndExpression -> inclusiveOrExpression .)
    QUES_MARK       reduce using rule 43 (logicalAndExpression -> inclusiveOrExpression .)
    OR              reduce using rule 43 (logicalAndExpression -> inclusiveOrExpression .)
    TERMINAL        reduce using rule 43 (logicalAndExpression -> inclusiveOrExpression .)
    COMMA           reduce using rule 43 (logicalAndExpression -> inclusiveOrExpression .)
    RPAREN          reduce using rule 43 (logicalAndExpression -> inclusiveOrExpression .)
    COLON           reduce using rule 43 (logicalAndExpression -> inclusiveOrExpression .)
    RIGHTSQRBRACKET reduce using rule 43 (logicalAndExpression -> inclusiveOrExpression .)
    BIT_OR          shift and go to state 112


state 45

    (12) primaryExpression -> markid .

    LEFTSQRBRACKET  reduce using rule 12 (primaryExpression -> markid .)
    PLUSPLUS        reduce using rule 12 (primaryExpression -> markid .)
    MINUSMINUS      reduce using rule 12 (primaryExpression -> markid .)
    ASSIGNMENT      reduce using rule 12 (primaryExpression -> markid .)
    MULT_EQ         reduce using rule 12 (primaryExpression -> markid .)
    DIVIDE_EQ       reduce using rule 12 (primaryExpression -> markid .)
    MOD_EQ          reduce using rule 12 (primaryExpression -> markid .)
    PLUS_EQ         reduce using rule 12 (primaryExpression -> markid .)
    MINUS_EQ        reduce using rule 12 (primaryExpression -> markid .)
    GTEQ            reduce using rule 12 (primaryExpression -> markid .)
    LTEQ            reduce using rule 12 (primaryExpression -> markid .)
    AND_EQ          reduce using rule 12 (primaryExpression -> markid .)
    XOR_EQ          reduce using rule 12 (primaryExpression -> markid .)
    OR_EQ           reduce using rule 12 (primaryExpression -> markid .)
    TIMES           reduce using rule 12 (primaryExpression -> markid .)
    DIVIDE          reduce using rule 12 (primaryExpression -> markid .)
    MOD             reduce using rule 12 (primaryExpression -> markid .)
    U_PLUS          reduce using rule 12 (primaryExpression -> markid .)
    U_MINUS         reduce using rule 12 (primaryExpression -> markid .)
    LSHIFT          reduce using rule 12 (primaryExpression -> markid .)
    RSHIFT          reduce using rule 12 (primaryExpression -> markid .)
    LT              reduce using rule 12 (primaryExpression -> markid .)
    GT              reduce using rule 12 (primaryExpression -> markid .)
    EQUAL           reduce using rule 12 (primaryExpression -> markid .)
    NEQUAL          reduce using rule 12 (primaryExpression -> markid .)
    BIT_AND         reduce using rule 12 (primaryExpression -> markid .)
    BIT_XOR         reduce using rule 12 (primaryExpression -> markid .)
    BIT_OR          reduce using rule 12 (primaryExpression -> markid .)
    AND             reduce using rule 12 (primaryExpression -> markid .)
    QUES_MARK       reduce using rule 12 (primaryExpression -> markid .)
    OR              reduce using rule 12 (primaryExpression -> markid .)
    TERMINAL        reduce using rule 12 (primaryExpression -> markid .)
    COMMA           reduce using rule 12 (primaryExpression -> markid .)
    RPAREN          reduce using rule 12 (primaryExpression -> markid .)
    COLON           reduce using rule 12 (primaryExpression -> markid .)
    RIGHTSQRBRACKET reduce using rule 12 (primaryExpression -> markid .)


state 46

    (13) primaryExpression -> constant .

    LEFTSQRBRACKET  reduce using rule 13 (primaryExpression -> constant .)
    PLUSPLUS        reduce using rule 13 (primaryExpression -> constant .)
    MINUSMINUS      reduce using rule 13 (primaryExpression -> constant .)
    ASSIGNMENT      reduce using rule 13 (primaryExpression -> constant .)
    MULT_EQ         reduce using rule 13 (primaryExpression -> constant .)
    DIVIDE_EQ       reduce using rule 13 (primaryExpression -> constant .)
    MOD_EQ          reduce using rule 13 (primaryExpression -> constant .)
    PLUS_EQ         reduce using rule 13 (primaryExpression -> constant .)
    MINUS_EQ        reduce using rule 13 (primaryExpression -> constant .)
    GTEQ            reduce using rule 13 (primaryExpression -> constant .)
    LTEQ            reduce using rule 13 (primaryExpression -> constant .)
    AND_EQ          reduce using rule 13 (primaryExpression -> constant .)
    XOR_EQ          reduce using rule 13 (primaryExpression -> constant .)
    OR_EQ           reduce using rule 13 (primaryExpression -> constant .)
    TIMES           reduce using rule 13 (primaryExpression -> constant .)
    DIVIDE          reduce using rule 13 (primaryExpression -> constant .)
    MOD             reduce using rule 13 (primaryExpression -> constant .)
    U_PLUS          reduce using rule 13 (primaryExpression -> constant .)
    U_MINUS         reduce using rule 13 (primaryExpression -> constant .)
    LSHIFT          reduce using rule 13 (primaryExpression -> constant .)
    RSHIFT          reduce using rule 13 (primaryExpression -> constant .)
    LT              reduce using rule 13 (primaryExpression -> constant .)
    GT              reduce using rule 13 (primaryExpression -> constant .)
    EQUAL           reduce using rule 13 (primaryExpression -> constant .)
    NEQUAL          reduce using rule 13 (primaryExpression -> constant .)
    BIT_AND         reduce using rule 13 (primaryExpression -> constant .)
    BIT_XOR         reduce using rule 13 (primaryExpression -> constant .)
    BIT_OR          reduce using rule 13 (primaryExpression -> constant .)
    AND             reduce using rule 13 (primaryExpression -> constant .)
    QUES_MARK       reduce using rule 13 (primaryExpression -> constant .)
    OR              reduce using rule 13 (primaryExpression -> constant .)
    TERMINAL        reduce using rule 13 (primaryExpression -> constant .)
    COMMA           reduce using rule 13 (primaryExpression -> constant .)
    RPAREN          reduce using rule 13 (primaryExpression -> constant .)
    COLON           reduce using rule 13 (primaryExpression -> constant .)
    RIGHTSQRBRACKET reduce using rule 13 (primaryExpression -> constant .)


state 47

    (14) primaryExpression -> markstr . STRING

    STRING          shift and go to state 113


state 48

    (45) inclusiveOrExpression -> exclusiveOrExpression .
    (48) exclusiveOrExpression -> exclusiveOrExpression . BIT_XOR andExpression

    BIT_OR          reduce using rule 45 (inclusiveOrExpression -> exclusiveOrExpression .)
    AND             reduce using rule 45 (inclusiveOrExpression -> exclusiveOrExpression .)
    QUES_MARK       reduce using rule 45 (inclusiveOrExpression -> exclusiveOrExpression .)
    OR              reduce using rule 45 (inclusiveOrExpression -> exclusiveOrExpression .)
    TERMINAL        reduce using rule 45 (inclusiveOrExpression -> exclusiveOrExpression .)
    COMMA           reduce using rule 45 (inclusiveOrExpression -> exclusiveOrExpression .)
    RPAREN          reduce using rule 45 (inclusiveOrExpression -> exclusiveOrExpression .)
    COLON           reduce using rule 45 (inclusiveOrExpression -> exclusiveOrExpression .)
    RIGHTSQRBRACKET reduce using rule 45 (inclusiveOrExpression -> exclusiveOrExpression .)
    BIT_XOR         shift and go to state 114


state 49

    (22) constant -> markint . INTNUM

    INTNUM          shift and go to state 115


state 50

    (23) constant -> markfloat . FLOATNUM

    FLOATNUM        shift and go to state 116


state 51

    (24) constant -> markchar . CHAR_CONST

    CHAR_CONST      shift and go to state 117


state 52

    (47) exclusiveOrExpression -> andExpression .
    (50) andExpression -> andExpression . BIT_AND equalityExpression

    BIT_XOR         reduce using rule 47 (exclusiveOrExpression -> andExpression .)
    BIT_OR          reduce using rule 47 (exclusiveOrExpression -> andExpression .)
    AND             reduce using rule 47 (exclusiveOrExpression -> andExpression .)
    QUES_MARK       reduce using rule 47 (exclusiveOrExpression -> andExpression .)
    OR              reduce using rule 47 (exclusiveOrExpression -> andExpression .)
    TERMINAL        reduce using rule 47 (exclusiveOrExpression -> andExpression .)
    COMMA           reduce using rule 47 (exclusiveOrExpression -> andExpression .)
    RPAREN          reduce using rule 47 (exclusiveOrExpression -> andExpression .)
    COLON           reduce using rule 47 (exclusiveOrExpression -> andExpression .)
    RIGHTSQRBRACKET reduce using rule 47 (exclusiveOrExpression -> andExpression .)
    BIT_AND         shift and go to state 118


state 53

    (49) andExpression -> equalityExpression .
    (52) equalityExpression -> equalityExpression . EQUAL relationalExpression
    (53) equalityExpression -> equalityExpression . NEQUAL relationalExpression

    BIT_AND         reduce using rule 49 (andExpression -> equalityExpression .)
    BIT_XOR         reduce using rule 49 (andExpression -> equalityExpression .)
    BIT_OR          reduce using rule 49 (andExpression -> equalityExpression .)
    AND             reduce using rule 49 (andExpression -> equalityExpression .)
    QUES_MARK       reduce using rule 49 (andExpression -> equalityExpression .)
    OR              reduce using rule 49 (andExpression -> equalityExpression .)
    TERMINAL        reduce using rule 49 (andExpression -> equalityExpression .)
    COMMA           reduce using rule 49 (andExpression -> equalityExpression .)
    RPAREN          reduce using rule 49 (andExpression -> equalityExpression .)
    COLON           reduce using rule 49 (andExpression -> equalityExpression .)
    RIGHTSQRBRACKET reduce using rule 49 (andExpression -> equalityExpression .)
    EQUAL           shift and go to state 119
    NEQUAL          shift and go to state 120


state 54

    (51) equalityExpression -> relationalExpression .
    (55) relationalExpression -> relationalExpression . LT shiftExpression
    (56) relationalExpression -> relationalExpression . GT shiftExpression
    (57) relationalExpression -> relationalExpression . LTEQ shiftExpression
    (58) relationalExpression -> relationalExpression . GTEQ shiftExpression

    EQUAL           reduce using rule 51 (equalityExpression -> relationalExpression .)
    NEQUAL          reduce using rule 51 (equalityExpression -> relationalExpression .)
    BIT_AND         reduce using rule 51 (equalityExpression -> relationalExpression .)
    BIT_XOR         reduce using rule 51 (equalityExpression -> relationalExpression .)
    BIT_OR          reduce using rule 51 (equalityExpression -> relationalExpression .)
    AND             reduce using rule 51 (equalityExpression -> relationalExpression .)
    QUES_MARK       reduce using rule 51 (equalityExpression -> relationalExpression .)
    OR              reduce using rule 51 (equalityExpression -> relationalExpression .)
    TERMINAL        reduce using rule 51 (equalityExpression -> relationalExpression .)
    COMMA           reduce using rule 51 (equalityExpression -> relationalExpression .)
    RPAREN          reduce using rule 51 (equalityExpression -> relationalExpression .)
    COLON           reduce using rule 51 (equalityExpression -> relationalExpression .)
    RIGHTSQRBRACKET reduce using rule 51 (equalityExpression -> relationalExpression .)
    LT              shift and go to state 121
    GT              shift and go to state 122
    LTEQ            shift and go to state 123
    GTEQ            shift and go to state 124


state 55

    (54) relationalExpression -> shiftExpression .
    (60) shiftExpression -> shiftExpression . LSHIFT additiveExpression
    (61) shiftExpression -> shiftExpression . RSHIFT additiveExpression

    LT              reduce using rule 54 (relationalExpression -> shiftExpression .)
    GT              reduce using rule 54 (relationalExpression -> shiftExpression .)
    LTEQ            reduce using rule 54 (relationalExpression -> shiftExpression .)
    GTEQ            reduce using rule 54 (relationalExpression -> shiftExpression .)
    EQUAL           reduce using rule 54 (relationalExpression -> shiftExpression .)
    NEQUAL          reduce using rule 54 (relationalExpression -> shiftExpression .)
    BIT_AND         reduce using rule 54 (relationalExpression -> shiftExpression .)
    BIT_XOR         reduce using rule 54 (relationalExpression -> shiftExpression .)
    BIT_OR          reduce using rule 54 (relationalExpression -> shiftExpression .)
    AND             reduce using rule 54 (relationalExpression -> shiftExpression .)
    QUES_MARK       reduce using rule 54 (relationalExpression -> shiftExpression .)
    OR              reduce using rule 54 (relationalExpression -> shiftExpression .)
    TERMINAL        reduce using rule 54 (relationalExpression -> shiftExpression .)
    COMMA           reduce using rule 54 (relationalExpression -> shiftExpression .)
    RPAREN          reduce using rule 54 (relationalExpression -> shiftExpression .)
    COLON           reduce using rule 54 (relationalExpression -> shiftExpression .)
    RIGHTSQRBRACKET reduce using rule 54 (relationalExpression -> shiftExpression .)
    LSHIFT          shift and go to state 125
    RSHIFT          shift and go to state 126


state 56

    (59) shiftExpression -> additiveExpression .
    (63) additiveExpression -> additiveExpression . U_PLUS multiplicativeExpression
    (64) additiveExpression -> additiveExpression . U_MINUS multiplicativeExpression

    LSHIFT          reduce using rule 59 (shiftExpression -> additiveExpression .)
    RSHIFT          reduce using rule 59 (shiftExpression -> additiveExpression .)
    LT              reduce using rule 59 (shiftExpression -> additiveExpression .)
    GT              reduce using rule 59 (shiftExpression -> additiveExpression .)
    LTEQ            reduce using rule 59 (shiftExpression -> additiveExpression .)
    GTEQ            reduce using rule 59 (shiftExpression -> additiveExpression .)
    EQUAL           reduce using rule 59 (shiftExpression -> additiveExpression .)
    NEQUAL          reduce using rule 59 (shiftExpression -> additiveExpression .)
    BIT_AND         reduce using rule 59 (shiftExpression -> additiveExpression .)
    BIT_XOR         reduce using rule 59 (shiftExpression -> additiveExpression .)
    BIT_OR          reduce using rule 59 (shiftExpression -> additiveExpression .)
    AND             reduce using rule 59 (shiftExpression -> additiveExpression .)
    QUES_MARK       reduce using rule 59 (shiftExpression -> additiveExpression .)
    OR              reduce using rule 59 (shiftExpression -> additiveExpression .)
    TERMINAL        reduce using rule 59 (shiftExpression -> additiveExpression .)
    COMMA           reduce using rule 59 (shiftExpression -> additiveExpression .)
    RPAREN          reduce using rule 59 (shiftExpression -> additiveExpression .)
    COLON           reduce using rule 59 (shiftExpression -> additiveExpression .)
    RIGHTSQRBRACKET reduce using rule 59 (shiftExpression -> additiveExpression .)
    U_PLUS          shift and go to state 127
    U_MINUS         shift and go to state 128


state 57

    (62) additiveExpression -> multiplicativeExpression .
    (66) multiplicativeExpression -> multiplicativeExpression . TIMES castExpression
    (67) multiplicativeExpression -> multiplicativeExpression . DIVIDE castExpression
    (68) multiplicativeExpression -> multiplicativeExpression . MOD castExpression

    U_PLUS          reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    U_MINUS         reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    LSHIFT          reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    RSHIFT          reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    LT              reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    GT              reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    LTEQ            reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    GTEQ            reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    EQUAL           reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    NEQUAL          reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    BIT_AND         reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    BIT_XOR         reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    BIT_OR          reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    AND             reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    QUES_MARK       reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    OR              reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    TERMINAL        reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    COMMA           reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    RPAREN          reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    COLON           reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    RIGHTSQRBRACKET reduce using rule 62 (additiveExpression -> multiplicativeExpression .)
    TIMES           shift and go to state 129
    DIVIDE          shift and go to state 130
    MOD             shift and go to state 131


state 58

    (65) multiplicativeExpression -> castExpression .

    TIMES           reduce using rule 65 (multiplicativeExpression -> castExpression .)
    DIVIDE          reduce using rule 65 (multiplicativeExpression -> castExpression .)
    MOD             reduce using rule 65 (multiplicativeExpression -> castExpression .)
    U_PLUS          reduce using rule 65 (multiplicativeExpression -> castExpression .)
    U_MINUS         reduce using rule 65 (multiplicativeExpression -> castExpression .)
    LSHIFT          reduce using rule 65 (multiplicativeExpression -> castExpression .)
    RSHIFT          reduce using rule 65 (multiplicativeExpression -> castExpression .)
    LT              reduce using rule 65 (multiplicativeExpression -> castExpression .)
    GT              reduce using rule 65 (multiplicativeExpression -> castExpression .)
    LTEQ            reduce using rule 65 (multiplicativeExpression -> castExpression .)
    GTEQ            reduce using rule 65 (multiplicativeExpression -> castExpression .)
    EQUAL           reduce using rule 65 (multiplicativeExpression -> castExpression .)
    NEQUAL          reduce using rule 65 (multiplicativeExpression -> castExpression .)
    BIT_AND         reduce using rule 65 (multiplicativeExpression -> castExpression .)
    BIT_XOR         reduce using rule 65 (multiplicativeExpression -> castExpression .)
    BIT_OR          reduce using rule 65 (multiplicativeExpression -> castExpression .)
    AND             reduce using rule 65 (multiplicativeExpression -> castExpression .)
    QUES_MARK       reduce using rule 65 (multiplicativeExpression -> castExpression .)
    OR              reduce using rule 65 (multiplicativeExpression -> castExpression .)
    TERMINAL        reduce using rule 65 (multiplicativeExpression -> castExpression .)
    COMMA           reduce using rule 65 (multiplicativeExpression -> castExpression .)
    RPAREN          reduce using rule 65 (multiplicativeExpression -> castExpression .)
    COLON           reduce using rule 65 (multiplicativeExpression -> castExpression .)
    RIGHTSQRBRACKET reduce using rule 65 (multiplicativeExpression -> castExpression .)


state 59

    (15) primaryExpression -> LPAREN expression . RPAREN
    (3) expression -> expression . COMMA assignmentExpression

    RPAREN          shift and go to state 132
    COMMA           shift and go to state 78


state 60

    (70) castExpression -> LPAREN simpleTypeName . RPAREN castExpression

    RPAREN          shift and go to state 133


state 61

    (77) simpleTypeName -> CHAR .

    RPAREN          reduce using rule 77 (simpleTypeName -> CHAR .)
    AUTO            reduce using rule 77 (simpleTypeName -> CHAR .)
    REGISTER        reduce using rule 77 (simpleTypeName -> CHAR .)
    STATIC          reduce using rule 77 (simpleTypeName -> CHAR .)
    EXTERN          reduce using rule 77 (simpleTypeName -> CHAR .)
    TYPEDEF         reduce using rule 77 (simpleTypeName -> CHAR .)
    CHAR            reduce using rule 77 (simpleTypeName -> CHAR .)
    SHORT           reduce using rule 77 (simpleTypeName -> CHAR .)
    INT             reduce using rule 77 (simpleTypeName -> CHAR .)
    LONG            reduce using rule 77 (simpleTypeName -> CHAR .)
    SIGNED          reduce using rule 77 (simpleTypeName -> CHAR .)
    UNSIGNED        reduce using rule 77 (simpleTypeName -> CHAR .)
    FLOAT           reduce using rule 77 (simpleTypeName -> CHAR .)
    DOUBLE          reduce using rule 77 (simpleTypeName -> CHAR .)
    VOID            reduce using rule 77 (simpleTypeName -> CHAR .)
    CONST           reduce using rule 77 (simpleTypeName -> CHAR .)
    VOLATILE        reduce using rule 77 (simpleTypeName -> CHAR .)
    TIMES           reduce using rule 77 (simpleTypeName -> CHAR .)
    ID              reduce using rule 77 (simpleTypeName -> CHAR .)


state 62

    (78) simpleTypeName -> SHORT .

    RPAREN          reduce using rule 78 (simpleTypeName -> SHORT .)
    AUTO            reduce using rule 78 (simpleTypeName -> SHORT .)
    REGISTER        reduce using rule 78 (simpleTypeName -> SHORT .)
    STATIC          reduce using rule 78 (simpleTypeName -> SHORT .)
    EXTERN          reduce using rule 78 (simpleTypeName -> SHORT .)
    TYPEDEF         reduce using rule 78 (simpleTypeName -> SHORT .)
    CHAR            reduce using rule 78 (simpleTypeName -> SHORT .)
    SHORT           reduce using rule 78 (simpleTypeName -> SHORT .)
    INT             reduce using rule 78 (simpleTypeName -> SHORT .)
    LONG            reduce using rule 78 (simpleTypeName -> SHORT .)
    SIGNED          reduce using rule 78 (simpleTypeName -> SHORT .)
    UNSIGNED        reduce using rule 78 (simpleTypeName -> SHORT .)
    FLOAT           reduce using rule 78 (simpleTypeName -> SHORT .)
    DOUBLE          reduce using rule 78 (simpleTypeName -> SHORT .)
    VOID            reduce using rule 78 (simpleTypeName -> SHORT .)
    CONST           reduce using rule 78 (simpleTypeName -> SHORT .)
    VOLATILE        reduce using rule 78 (simpleTypeName -> SHORT .)
    TIMES           reduce using rule 78 (simpleTypeName -> SHORT .)
    ID              reduce using rule 78 (simpleTypeName -> SHORT .)


state 63

    (79) simpleTypeName -> INT .

    RPAREN          reduce using rule 79 (simpleTypeName -> INT .)
    AUTO            reduce using rule 79 (simpleTypeName -> INT .)
    REGISTER        reduce using rule 79 (simpleTypeName -> INT .)
    STATIC          reduce using rule 79 (simpleTypeName -> INT .)
    EXTERN          reduce using rule 79 (simpleTypeName -> INT .)
    TYPEDEF         reduce using rule 79 (simpleTypeName -> INT .)
    CHAR            reduce using rule 79 (simpleTypeName -> INT .)
    SHORT           reduce using rule 79 (simpleTypeName -> INT .)
    INT             reduce using rule 79 (simpleTypeName -> INT .)
    LONG            reduce using rule 79 (simpleTypeName -> INT .)
    SIGNED          reduce using rule 79 (simpleTypeName -> INT .)
    UNSIGNED        reduce using rule 79 (simpleTypeName -> INT .)
    FLOAT           reduce using rule 79 (simpleTypeName -> INT .)
    DOUBLE          reduce using rule 79 (simpleTypeName -> INT .)
    VOID            reduce using rule 79 (simpleTypeName -> INT .)
    CONST           reduce using rule 79 (simpleTypeName -> INT .)
    VOLATILE        reduce using rule 79 (simpleTypeName -> INT .)
    TIMES           reduce using rule 79 (simpleTypeName -> INT .)
    ID              reduce using rule 79 (simpleTypeName -> INT .)


state 64

    (80) simpleTypeName -> LONG .

    RPAREN          reduce using rule 80 (simpleTypeName -> LONG .)
    AUTO            reduce using rule 80 (simpleTypeName -> LONG .)
    REGISTER        reduce using rule 80 (simpleTypeName -> LONG .)
    STATIC          reduce using rule 80 (simpleTypeName -> LONG .)
    EXTERN          reduce using rule 80 (simpleTypeName -> LONG .)
    TYPEDEF         reduce using rule 80 (simpleTypeName -> LONG .)
    CHAR            reduce using rule 80 (simpleTypeName -> LONG .)
    SHORT           reduce using rule 80 (simpleTypeName -> LONG .)
    INT             reduce using rule 80 (simpleTypeName -> LONG .)
    LONG            reduce using rule 80 (simpleTypeName -> LONG .)
    SIGNED          reduce using rule 80 (simpleTypeName -> LONG .)
    UNSIGNED        reduce using rule 80 (simpleTypeName -> LONG .)
    FLOAT           reduce using rule 80 (simpleTypeName -> LONG .)
    DOUBLE          reduce using rule 80 (simpleTypeName -> LONG .)
    VOID            reduce using rule 80 (simpleTypeName -> LONG .)
    CONST           reduce using rule 80 (simpleTypeName -> LONG .)
    VOLATILE        reduce using rule 80 (simpleTypeName -> LONG .)
    TIMES           reduce using rule 80 (simpleTypeName -> LONG .)
    ID              reduce using rule 80 (simpleTypeName -> LONG .)


state 65

    (81) simpleTypeName -> SIGNED .

    RPAREN          reduce using rule 81 (simpleTypeName -> SIGNED .)
    AUTO            reduce using rule 81 (simpleTypeName -> SIGNED .)
    REGISTER        reduce using rule 81 (simpleTypeName -> SIGNED .)
    STATIC          reduce using rule 81 (simpleTypeName -> SIGNED .)
    EXTERN          reduce using rule 81 (simpleTypeName -> SIGNED .)
    TYPEDEF         reduce using rule 81 (simpleTypeName -> SIGNED .)
    CHAR            reduce using rule 81 (simpleTypeName -> SIGNED .)
    SHORT           reduce using rule 81 (simpleTypeName -> SIGNED .)
    INT             reduce using rule 81 (simpleTypeName -> SIGNED .)
    LONG            reduce using rule 81 (simpleTypeName -> SIGNED .)
    SIGNED          reduce using rule 81 (simpleTypeName -> SIGNED .)
    UNSIGNED        reduce using rule 81 (simpleTypeName -> SIGNED .)
    FLOAT           reduce using rule 81 (simpleTypeName -> SIGNED .)
    DOUBLE          reduce using rule 81 (simpleTypeName -> SIGNED .)
    VOID            reduce using rule 81 (simpleTypeName -> SIGNED .)
    CONST           reduce using rule 81 (simpleTypeName -> SIGNED .)
    VOLATILE        reduce using rule 81 (simpleTypeName -> SIGNED .)
    TIMES           reduce using rule 81 (simpleTypeName -> SIGNED .)
    ID              reduce using rule 81 (simpleTypeName -> SIGNED .)


state 66

    (82) simpleTypeName -> UNSIGNED .

    RPAREN          reduce using rule 82 (simpleTypeName -> UNSIGNED .)
    AUTO            reduce using rule 82 (simpleTypeName -> UNSIGNED .)
    REGISTER        reduce using rule 82 (simpleTypeName -> UNSIGNED .)
    STATIC          reduce using rule 82 (simpleTypeName -> UNSIGNED .)
    EXTERN          reduce using rule 82 (simpleTypeName -> UNSIGNED .)
    TYPEDEF         reduce using rule 82 (simpleTypeName -> UNSIGNED .)
    CHAR            reduce using rule 82 (simpleTypeName -> UNSIGNED .)
    SHORT           reduce using rule 82 (simpleTypeName -> UNSIGNED .)
    INT             reduce using rule 82 (simpleTypeName -> UNSIGNED .)
    LONG            reduce using rule 82 (simpleTypeName -> UNSIGNED .)
    SIGNED          reduce using rule 82 (simpleTypeName -> UNSIGNED .)
    UNSIGNED        reduce using rule 82 (simpleTypeName -> UNSIGNED .)
    FLOAT           reduce using rule 82 (simpleTypeName -> UNSIGNED .)
    DOUBLE          reduce using rule 82 (simpleTypeName -> UNSIGNED .)
    VOID            reduce using rule 82 (simpleTypeName -> UNSIGNED .)
    CONST           reduce using rule 82 (simpleTypeName -> UNSIGNED .)
    VOLATILE        reduce using rule 82 (simpleTypeName -> UNSIGNED .)
    TIMES           reduce using rule 82 (simpleTypeName -> UNSIGNED .)
    ID              reduce using rule 82 (simpleTypeName -> UNSIGNED .)


state 67

    (83) simpleTypeName -> FLOAT .

    RPAREN          reduce using rule 83 (simpleTypeName -> FLOAT .)
    AUTO            reduce using rule 83 (simpleTypeName -> FLOAT .)
    REGISTER        reduce using rule 83 (simpleTypeName -> FLOAT .)
    STATIC          reduce using rule 83 (simpleTypeName -> FLOAT .)
    EXTERN          reduce using rule 83 (simpleTypeName -> FLOAT .)
    TYPEDEF         reduce using rule 83 (simpleTypeName -> FLOAT .)
    CHAR            reduce using rule 83 (simpleTypeName -> FLOAT .)
    SHORT           reduce using rule 83 (simpleTypeName -> FLOAT .)
    INT             reduce using rule 83 (simpleTypeName -> FLOAT .)
    LONG            reduce using rule 83 (simpleTypeName -> FLOAT .)
    SIGNED          reduce using rule 83 (simpleTypeName -> FLOAT .)
    UNSIGNED        reduce using rule 83 (simpleTypeName -> FLOAT .)
    FLOAT           reduce using rule 83 (simpleTypeName -> FLOAT .)
    DOUBLE          reduce using rule 83 (simpleTypeName -> FLOAT .)
    VOID            reduce using rule 83 (simpleTypeName -> FLOAT .)
    CONST           reduce using rule 83 (simpleTypeName -> FLOAT .)
    VOLATILE        reduce using rule 83 (simpleTypeName -> FLOAT .)
    TIMES           reduce using rule 83 (simpleTypeName -> FLOAT .)
    ID              reduce using rule 83 (simpleTypeName -> FLOAT .)


state 68

    (84) simpleTypeName -> DOUBLE .

    RPAREN          reduce using rule 84 (simpleTypeName -> DOUBLE .)
    AUTO            reduce using rule 84 (simpleTypeName -> DOUBLE .)
    REGISTER        reduce using rule 84 (simpleTypeName -> DOUBLE .)
    STATIC          reduce using rule 84 (simpleTypeName -> DOUBLE .)
    EXTERN          reduce using rule 84 (simpleTypeName -> DOUBLE .)
    TYPEDEF         reduce using rule 84 (simpleTypeName -> DOUBLE .)
    CHAR            reduce using rule 84 (simpleTypeName -> DOUBLE .)
    SHORT           reduce using rule 84 (simpleTypeName -> DOUBLE .)
    INT             reduce using rule 84 (simpleTypeName -> DOUBLE .)
    LONG            reduce using rule 84 (simpleTypeName -> DOUBLE .)
    SIGNED          reduce using rule 84 (simpleTypeName -> DOUBLE .)
    UNSIGNED        reduce using rule 84 (simpleTypeName -> DOUBLE .)
    FLOAT           reduce using rule 84 (simpleTypeName -> DOUBLE .)
    DOUBLE          reduce using rule 84 (simpleTypeName -> DOUBLE .)
    VOID            reduce using rule 84 (simpleTypeName -> DOUBLE .)
    CONST           reduce using rule 84 (simpleTypeName -> DOUBLE .)
    VOLATILE        reduce using rule 84 (simpleTypeName -> DOUBLE .)
    TIMES           reduce using rule 84 (simpleTypeName -> DOUBLE .)
    ID              reduce using rule 84 (simpleTypeName -> DOUBLE .)


state 69

    (85) simpleTypeName -> VOID .

    RPAREN          reduce using rule 85 (simpleTypeName -> VOID .)
    AUTO            reduce using rule 85 (simpleTypeName -> VOID .)
    REGISTER        reduce using rule 85 (simpleTypeName -> VOID .)
    STATIC          reduce using rule 85 (simpleTypeName -> VOID .)
    EXTERN          reduce using rule 85 (simpleTypeName -> VOID .)
    TYPEDEF         reduce using rule 85 (simpleTypeName -> VOID .)
    CHAR            reduce using rule 85 (simpleTypeName -> VOID .)
    SHORT           reduce using rule 85 (simpleTypeName -> VOID .)
    INT             reduce using rule 85 (simpleTypeName -> VOID .)
    LONG            reduce using rule 85 (simpleTypeName -> VOID .)
    SIGNED          reduce using rule 85 (simpleTypeName -> VOID .)
    UNSIGNED        reduce using rule 85 (simpleTypeName -> VOID .)
    FLOAT           reduce using rule 85 (simpleTypeName -> VOID .)
    DOUBLE          reduce using rule 85 (simpleTypeName -> VOID .)
    VOID            reduce using rule 85 (simpleTypeName -> VOID .)
    CONST           reduce using rule 85 (simpleTypeName -> VOID .)
    VOLATILE        reduce using rule 85 (simpleTypeName -> VOID .)
    TIMES           reduce using rule 85 (simpleTypeName -> VOID .)
    ID              reduce using rule 85 (simpleTypeName -> VOID .)


state 70

    (16) markid -> identifier .

    LEFTSQRBRACKET  reduce using rule 16 (markid -> identifier .)
    PLUSPLUS        reduce using rule 16 (markid -> identifier .)
    MINUSMINUS      reduce using rule 16 (markid -> identifier .)
    ASSIGNMENT      reduce using rule 16 (markid -> identifier .)
    MULT_EQ         reduce using rule 16 (markid -> identifier .)
    DIVIDE_EQ       reduce using rule 16 (markid -> identifier .)
    MOD_EQ          reduce using rule 16 (markid -> identifier .)
    PLUS_EQ         reduce using rule 16 (markid -> identifier .)
    MINUS_EQ        reduce using rule 16 (markid -> identifier .)
    GTEQ            reduce using rule 16 (markid -> identifier .)
    LTEQ            reduce using rule 16 (markid -> identifier .)
    AND_EQ          reduce using rule 16 (markid -> identifier .)
    XOR_EQ          reduce using rule 16 (markid -> identifier .)
    OR_EQ           reduce using rule 16 (markid -> identifier .)
    TIMES           reduce using rule 16 (markid -> identifier .)
    DIVIDE          reduce using rule 16 (markid -> identifier .)
    MOD             reduce using rule 16 (markid -> identifier .)
    U_PLUS          reduce using rule 16 (markid -> identifier .)
    U_MINUS         reduce using rule 16 (markid -> identifier .)
    LSHIFT          reduce using rule 16 (markid -> identifier .)
    RSHIFT          reduce using rule 16 (markid -> identifier .)
    LT              reduce using rule 16 (markid -> identifier .)
    GT              reduce using rule 16 (markid -> identifier .)
    EQUAL           reduce using rule 16 (markid -> identifier .)
    NEQUAL          reduce using rule 16 (markid -> identifier .)
    BIT_AND         reduce using rule 16 (markid -> identifier .)
    BIT_XOR         reduce using rule 16 (markid -> identifier .)
    BIT_OR          reduce using rule 16 (markid -> identifier .)
    AND             reduce using rule 16 (markid -> identifier .)
    QUES_MARK       reduce using rule 16 (markid -> identifier .)
    OR              reduce using rule 16 (markid -> identifier .)
    RPAREN          reduce using rule 16 (markid -> identifier .)
    COMMA           reduce using rule 16 (markid -> identifier .)
    TERMINAL        reduce using rule 16 (markid -> identifier .)
    COLON           reduce using rule 16 (markid -> identifier .)
    RIGHTSQRBRACKET reduce using rule 16 (markid -> identifier .)


state 71

    (25) markint -> empty .
    (26) markfloat -> empty .
    (27) markchar -> empty .

    INTNUM          reduce using rule 25 (markint -> empty .)
    FLOATNUM        reduce using rule 26 (markfloat -> empty .)
    CHAR_CONST      reduce using rule 27 (markchar -> empty .)


state 72

    (92) labeledStatement -> identifier COLON . statement
    (87) statement -> . labeledStatement
    (88) statement -> . expressionStatement
    (89) statement -> . compoundStatement
    (90) statement -> . selectionStatement
    (91) statement -> . jumpStatement
    (92) labeledStatement -> . identifier COLON statement
    (93) labeledStatement -> . caseList default
    (101) expressionStatement -> . expression TERMINAL
    (102) expressionStatement -> . empty
    (103) compoundStatement -> . oscope declarationList statementList cscope
    (104) compoundStatement -> . empty
    (143) selectionStatement -> . IF LPAREN ifmark expression RPAREN statement endifmark
    (144) selectionStatement -> . IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement
    (145) selectionStatement -> . SWITCH LPAREN switchmark expression RPAREN statement endswitchmark
    (151) jumpStatement -> . BREAK TERMINAL
    (152) jumpStatement -> . CONTINUE TERMINAL
    (153) jumpStatement -> . RETURN expression TERMINAL
    (154) jumpStatement -> . RETURN TERMINAL
    (155) jumpStatement -> . GOTO identifier TERMINAL
    (132) identifier -> . ID
    (94) caseList -> . caseList CASE constantExpression COLON statement
    (95) caseList -> . empty
    (2) expression -> . assignmentExpression
    (3) expression -> . expression COMMA assignmentExpression
    (86) empty -> .
    (105) oscope -> . LEFTCURLYBRACKET
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTCURLYBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for SIZEOF resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for U_PLUS resolved as shift
  ! shift/reduce conflict for U_MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BIT_NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for STRING resolved using rule 17 (markstr -> .)
    IF              shift and go to state 19
    SWITCH          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    RETURN          shift and go to state 23
    GOTO            shift and go to state 24
    ID              shift and go to state 25
    $end            reduce using rule 86 (empty -> .)
    RIGHTCURLYBRACKET reduce using rule 86 (empty -> .)
    CASE            reduce using rule 86 (empty -> .)
    DEFAULT         reduce using rule 86 (empty -> .)
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)
    LEFTCURLYBRACKET shift and go to state 27
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)

  ! IF              [ reduce using rule 86 (empty -> .) ]
  ! SWITCH          [ reduce using rule 86 (empty -> .) ]
  ! BREAK           [ reduce using rule 86 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 86 (empty -> .) ]
  ! RETURN          [ reduce using rule 86 (empty -> .) ]
  ! GOTO            [ reduce using rule 86 (empty -> .) ]
  ! ID              [ reduce using rule 86 (empty -> .) ]
  ! LEFTCURLYBRACKET [ reduce using rule 86 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 86 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 86 (empty -> .) ]
  ! SIZEOF          [ reduce using rule 86 (empty -> .) ]
  ! TIMES           [ reduce using rule 86 (empty -> .) ]
  ! BIT_AND         [ reduce using rule 86 (empty -> .) ]
  ! U_PLUS          [ reduce using rule 86 (empty -> .) ]
  ! U_MINUS         [ reduce using rule 86 (empty -> .) ]
  ! NOT             [ reduce using rule 86 (empty -> .) ]
  ! BIT_NOT         [ reduce using rule 86 (empty -> .) ]
  ! LPAREN          [ reduce using rule 86 (empty -> .) ]
  ! STRING          [ reduce using rule 86 (empty -> .) ]

    identifier                     shift and go to state 14
    statement                      shift and go to state 134
    labeledStatement               shift and go to state 9
    expressionStatement            shift and go to state 10
    compoundStatement              shift and go to state 11
    selectionStatement             shift and go to state 12
    jumpStatement                  shift and go to state 13
    caseList                       shift and go to state 15
    expression                     shift and go to state 16
    empty                          shift and go to state 17
    oscope                         shift and go to state 18
    assignmentExpression           shift and go to state 26
    conditionalExpression          shift and go to state 28
    unaryExpression                shift and go to state 29
    logicalOrExpression            shift and go to state 30
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58

state 73

    (93) labeledStatement -> caseList default .

    $end            reduce using rule 93 (labeledStatement -> caseList default .)
    RIGHTCURLYBRACKET reduce using rule 93 (labeledStatement -> caseList default .)
    IF              reduce using rule 93 (labeledStatement -> caseList default .)
    SWITCH          reduce using rule 93 (labeledStatement -> caseList default .)
    BREAK           reduce using rule 93 (labeledStatement -> caseList default .)
    CONTINUE        reduce using rule 93 (labeledStatement -> caseList default .)
    RETURN          reduce using rule 93 (labeledStatement -> caseList default .)
    GOTO            reduce using rule 93 (labeledStatement -> caseList default .)
    ID              reduce using rule 93 (labeledStatement -> caseList default .)
    LEFTCURLYBRACKET reduce using rule 93 (labeledStatement -> caseList default .)
    PLUSPLUS        reduce using rule 93 (labeledStatement -> caseList default .)
    MINUSMINUS      reduce using rule 93 (labeledStatement -> caseList default .)
    SIZEOF          reduce using rule 93 (labeledStatement -> caseList default .)
    TIMES           reduce using rule 93 (labeledStatement -> caseList default .)
    BIT_AND         reduce using rule 93 (labeledStatement -> caseList default .)
    U_PLUS          reduce using rule 93 (labeledStatement -> caseList default .)
    U_MINUS         reduce using rule 93 (labeledStatement -> caseList default .)
    NOT             reduce using rule 93 (labeledStatement -> caseList default .)
    BIT_NOT         reduce using rule 93 (labeledStatement -> caseList default .)
    LPAREN          reduce using rule 93 (labeledStatement -> caseList default .)
    CASE            reduce using rule 93 (labeledStatement -> caseList default .)
    DEFAULT         reduce using rule 93 (labeledStatement -> caseList default .)
    STRING          reduce using rule 93 (labeledStatement -> caseList default .)
    INTNUM          reduce using rule 93 (labeledStatement -> caseList default .)
    FLOATNUM        reduce using rule 93 (labeledStatement -> caseList default .)
    CHAR_CONST      reduce using rule 93 (labeledStatement -> caseList default .)
    ELSE            reduce using rule 93 (labeledStatement -> caseList default .)


state 74

    (94) caseList -> caseList CASE . constantExpression COLON statement
    (100) constantExpression -> . conditionalExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    constantExpression             shift and go to state 135
    conditionalExpression          shift and go to state 136
    logicalOrExpression            shift and go to state 30
    logicalAndExpression           shift and go to state 36
    inclusiveOrExpression          shift and go to state 44
    exclusiveOrExpression          shift and go to state 48
    andExpression                  shift and go to state 52
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 75

    (96) default -> DEFAULT . defaultmark COLON statement enddefault
    (98) defaultmark -> . empty
    (86) empty -> .

    COLON           reduce using rule 86 (empty -> .)

    defaultmark                    shift and go to state 139
    empty                          shift and go to state 140

state 76

    (97) default -> empty .

    $end            reduce using rule 97 (default -> empty .)
    RIGHTCURLYBRACKET reduce using rule 97 (default -> empty .)
    IF              reduce using rule 97 (default -> empty .)
    SWITCH          reduce using rule 97 (default -> empty .)
    BREAK           reduce using rule 97 (default -> empty .)
    CONTINUE        reduce using rule 97 (default -> empty .)
    RETURN          reduce using rule 97 (default -> empty .)
    GOTO            reduce using rule 97 (default -> empty .)
    ID              reduce using rule 97 (default -> empty .)
    LEFTCURLYBRACKET reduce using rule 97 (default -> empty .)
    PLUSPLUS        reduce using rule 97 (default -> empty .)
    MINUSMINUS      reduce using rule 97 (default -> empty .)
    SIZEOF          reduce using rule 97 (default -> empty .)
    TIMES           reduce using rule 97 (default -> empty .)
    BIT_AND         reduce using rule 97 (default -> empty .)
    U_PLUS          reduce using rule 97 (default -> empty .)
    U_MINUS         reduce using rule 97 (default -> empty .)
    NOT             reduce using rule 97 (default -> empty .)
    BIT_NOT         reduce using rule 97 (default -> empty .)
    LPAREN          reduce using rule 97 (default -> empty .)
    CASE            reduce using rule 97 (default -> empty .)
    DEFAULT         reduce using rule 97 (default -> empty .)
    STRING          reduce using rule 97 (default -> empty .)
    INTNUM          reduce using rule 97 (default -> empty .)
    FLOATNUM        reduce using rule 97 (default -> empty .)
    CHAR_CONST      reduce using rule 97 (default -> empty .)
    ELSE            reduce using rule 97 (default -> empty .)


state 77

    (101) expressionStatement -> expression TERMINAL .

    $end            reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    RIGHTCURLYBRACKET reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    IF              reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    SWITCH          reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    BREAK           reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    CONTINUE        reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    RETURN          reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    GOTO            reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    ID              reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    LEFTCURLYBRACKET reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    PLUSPLUS        reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    MINUSMINUS      reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    SIZEOF          reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    TIMES           reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    BIT_AND         reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    U_PLUS          reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    U_MINUS         reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    NOT             reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    BIT_NOT         reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    LPAREN          reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    CASE            reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    DEFAULT         reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    STRING          reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    INTNUM          reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    FLOATNUM        reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    CHAR_CONST      reduce using rule 101 (expressionStatement -> expression TERMINAL .)
    ELSE            reduce using rule 101 (expressionStatement -> expression TERMINAL .)


state 78

    (3) expression -> expression COMMA . assignmentExpression
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (86) empty -> .
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    assignmentExpression           shift and go to state 141
    conditionalExpression          shift and go to state 28
    unaryExpression                shift and go to state 29
    logicalOrExpression            shift and go to state 30
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    empty                          shift and go to state 71
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58

state 79

    (103) compoundStatement -> oscope declarationList . statementList cscope
    (109) declarationList -> declarationList . declaration
    (107) statementList -> . statementList statement
    (108) statementList -> . empty
    (111) declaration -> . decSpecList initDecList TERMINAL
    (86) empty -> .
    (115) decSpecList -> . decSpecList decSpec
    (116) decSpecList -> . decSpec
    (133) decSpec -> . StorageClassSpec
    (134) decSpec -> . simpleTypeName
    (135) decSpec -> . typeQualifier
    (138) StorageClassSpec -> . AUTO
    (139) StorageClassSpec -> . REGISTER
    (140) StorageClassSpec -> . STATIC
    (141) StorageClassSpec -> . EXTERN
    (142) StorageClassSpec -> . TYPEDEF
    (77) simpleTypeName -> . CHAR
    (78) simpleTypeName -> . SHORT
    (79) simpleTypeName -> . INT
    (80) simpleTypeName -> . LONG
    (81) simpleTypeName -> . SIGNED
    (82) simpleTypeName -> . UNSIGNED
    (83) simpleTypeName -> . FLOAT
    (84) simpleTypeName -> . DOUBLE
    (85) simpleTypeName -> . VOID
    (136) typeQualifier -> . CONST
    (137) typeQualifier -> . VOLATILE

    RIGHTCURLYBRACKET reduce using rule 86 (empty -> .)
    IF              reduce using rule 86 (empty -> .)
    SWITCH          reduce using rule 86 (empty -> .)
    BREAK           reduce using rule 86 (empty -> .)
    CONTINUE        reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    GOTO            reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    LEFTCURLYBRACKET reduce using rule 86 (empty -> .)
    PLUSPLUS        reduce using rule 86 (empty -> .)
    MINUSMINUS      reduce using rule 86 (empty -> .)
    SIZEOF          reduce using rule 86 (empty -> .)
    TIMES           reduce using rule 86 (empty -> .)
    BIT_AND         reduce using rule 86 (empty -> .)
    U_PLUS          reduce using rule 86 (empty -> .)
    U_MINUS         reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    BIT_NOT         reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    CASE            reduce using rule 86 (empty -> .)
    DEFAULT         reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)
    AUTO            shift and go to state 150
    REGISTER        shift and go to state 151
    STATIC          shift and go to state 152
    EXTERN          shift and go to state 153
    TYPEDEF         shift and go to state 154
    CHAR            shift and go to state 61
    SHORT           shift and go to state 62
    INT             shift and go to state 63
    LONG            shift and go to state 64
    SIGNED          shift and go to state 65
    UNSIGNED        shift and go to state 66
    FLOAT           shift and go to state 67
    DOUBLE          shift and go to state 68
    VOID            shift and go to state 69
    CONST           shift and go to state 155
    VOLATILE        shift and go to state 156

    statementList                  shift and go to state 142
    declaration                    shift and go to state 143
    empty                          shift and go to state 144
    decSpecList                    shift and go to state 145
    decSpec                        shift and go to state 146
    StorageClassSpec               shift and go to state 147
    simpleTypeName                 shift and go to state 148
    typeQualifier                  shift and go to state 149

state 80

    (110) declarationList -> empty .

    AUTO            reduce using rule 110 (declarationList -> empty .)
    REGISTER        reduce using rule 110 (declarationList -> empty .)
    STATIC          reduce using rule 110 (declarationList -> empty .)
    EXTERN          reduce using rule 110 (declarationList -> empty .)
    TYPEDEF         reduce using rule 110 (declarationList -> empty .)
    CHAR            reduce using rule 110 (declarationList -> empty .)
    SHORT           reduce using rule 110 (declarationList -> empty .)
    INT             reduce using rule 110 (declarationList -> empty .)
    LONG            reduce using rule 110 (declarationList -> empty .)
    SIGNED          reduce using rule 110 (declarationList -> empty .)
    UNSIGNED        reduce using rule 110 (declarationList -> empty .)
    FLOAT           reduce using rule 110 (declarationList -> empty .)
    DOUBLE          reduce using rule 110 (declarationList -> empty .)
    VOID            reduce using rule 110 (declarationList -> empty .)
    CONST           reduce using rule 110 (declarationList -> empty .)
    VOLATILE        reduce using rule 110 (declarationList -> empty .)
    RIGHTCURLYBRACKET reduce using rule 110 (declarationList -> empty .)
    IF              reduce using rule 110 (declarationList -> empty .)
    SWITCH          reduce using rule 110 (declarationList -> empty .)
    BREAK           reduce using rule 110 (declarationList -> empty .)
    CONTINUE        reduce using rule 110 (declarationList -> empty .)
    RETURN          reduce using rule 110 (declarationList -> empty .)
    GOTO            reduce using rule 110 (declarationList -> empty .)
    ID              reduce using rule 110 (declarationList -> empty .)
    LEFTCURLYBRACKET reduce using rule 110 (declarationList -> empty .)
    PLUSPLUS        reduce using rule 110 (declarationList -> empty .)
    MINUSMINUS      reduce using rule 110 (declarationList -> empty .)
    SIZEOF          reduce using rule 110 (declarationList -> empty .)
    TIMES           reduce using rule 110 (declarationList -> empty .)
    BIT_AND         reduce using rule 110 (declarationList -> empty .)
    U_PLUS          reduce using rule 110 (declarationList -> empty .)
    U_MINUS         reduce using rule 110 (declarationList -> empty .)
    NOT             reduce using rule 110 (declarationList -> empty .)
    BIT_NOT         reduce using rule 110 (declarationList -> empty .)
    LPAREN          reduce using rule 110 (declarationList -> empty .)
    CASE            reduce using rule 110 (declarationList -> empty .)
    DEFAULT         reduce using rule 110 (declarationList -> empty .)
    STRING          reduce using rule 110 (declarationList -> empty .)
    INTNUM          reduce using rule 110 (declarationList -> empty .)
    FLOATNUM        reduce using rule 110 (declarationList -> empty .)
    CHAR_CONST      reduce using rule 110 (declarationList -> empty .)


state 81

    (143) selectionStatement -> IF LPAREN . ifmark expression RPAREN statement endifmark
    (144) selectionStatement -> IF LPAREN . ifmark expression RPAREN statement endifmark ELSE elsemark statement
    (146) ifmark -> . empty
    (86) empty -> .

    PLUSPLUS        reduce using rule 86 (empty -> .)
    MINUSMINUS      reduce using rule 86 (empty -> .)
    SIZEOF          reduce using rule 86 (empty -> .)
    TIMES           reduce using rule 86 (empty -> .)
    BIT_AND         reduce using rule 86 (empty -> .)
    U_PLUS          reduce using rule 86 (empty -> .)
    U_MINUS         reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    BIT_NOT         reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    ifmark                         shift and go to state 157
    empty                          shift and go to state 158

state 82

    (145) selectionStatement -> SWITCH LPAREN . switchmark expression RPAREN statement endswitchmark
    (149) switchmark -> . empty
    (86) empty -> .

    PLUSPLUS        reduce using rule 86 (empty -> .)
    MINUSMINUS      reduce using rule 86 (empty -> .)
    SIZEOF          reduce using rule 86 (empty -> .)
    TIMES           reduce using rule 86 (empty -> .)
    BIT_AND         reduce using rule 86 (empty -> .)
    U_PLUS          reduce using rule 86 (empty -> .)
    U_MINUS         reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    BIT_NOT         reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    switchmark                     shift and go to state 159
    empty                          shift and go to state 160

state 83

    (151) jumpStatement -> BREAK TERMINAL .

    $end            reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    RIGHTCURLYBRACKET reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    IF              reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    SWITCH          reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    BREAK           reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    CONTINUE        reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    RETURN          reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    GOTO            reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    ID              reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    LEFTCURLYBRACKET reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    PLUSPLUS        reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    MINUSMINUS      reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    SIZEOF          reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    TIMES           reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    BIT_AND         reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    U_PLUS          reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    U_MINUS         reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    NOT             reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    BIT_NOT         reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    LPAREN          reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    CASE            reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    DEFAULT         reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    STRING          reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    INTNUM          reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    FLOATNUM        reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    CHAR_CONST      reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)
    ELSE            reduce using rule 151 (jumpStatement -> BREAK TERMINAL .)


state 84

    (152) jumpStatement -> CONTINUE TERMINAL .

    $end            reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    RIGHTCURLYBRACKET reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    IF              reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    SWITCH          reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    BREAK           reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    CONTINUE        reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    RETURN          reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    GOTO            reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    ID              reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    LEFTCURLYBRACKET reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    PLUSPLUS        reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    MINUSMINUS      reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    SIZEOF          reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    TIMES           reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    BIT_AND         reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    U_PLUS          reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    U_MINUS         reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    NOT             reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    BIT_NOT         reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    LPAREN          reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    CASE            reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    DEFAULT         reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    STRING          reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    INTNUM          reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    FLOATNUM        reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    CHAR_CONST      reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)
    ELSE            reduce using rule 152 (jumpStatement -> CONTINUE TERMINAL .)


state 85

    (153) jumpStatement -> RETURN expression . TERMINAL
    (3) expression -> expression . COMMA assignmentExpression

    TERMINAL        shift and go to state 161
    COMMA           shift and go to state 78


state 86

    (154) jumpStatement -> RETURN TERMINAL .

    $end            reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    RIGHTCURLYBRACKET reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    IF              reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    SWITCH          reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    BREAK           reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    CONTINUE        reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    RETURN          reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    GOTO            reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    ID              reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    LEFTCURLYBRACKET reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    PLUSPLUS        reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    MINUSMINUS      reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    SIZEOF          reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    TIMES           reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    BIT_AND         reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    U_PLUS          reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    U_MINUS         reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    NOT             reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    BIT_NOT         reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    LPAREN          reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    CASE            reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    DEFAULT         reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    STRING          reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    INTNUM          reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    FLOATNUM        reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    CHAR_CONST      reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)
    ELSE            reduce using rule 154 (jumpStatement -> RETURN TERMINAL .)


state 87

    (155) jumpStatement -> GOTO identifier . TERMINAL

    TERMINAL        shift and go to state 162


state 88

    (5) assignmentExpression -> unaryExpression assignOper . assignmentExpression
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (86) empty -> .
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    unaryExpression                shift and go to state 29
    assignmentExpression           shift and go to state 163
    conditionalExpression          shift and go to state 28
    logicalOrExpression            shift and go to state 30
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    empty                          shift and go to state 71
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58

state 89

    (28) assignOper -> ASSIGNMENT .

    PLUSPLUS        reduce using rule 28 (assignOper -> ASSIGNMENT .)
    MINUSMINUS      reduce using rule 28 (assignOper -> ASSIGNMENT .)
    SIZEOF          reduce using rule 28 (assignOper -> ASSIGNMENT .)
    TIMES           reduce using rule 28 (assignOper -> ASSIGNMENT .)
    BIT_AND         reduce using rule 28 (assignOper -> ASSIGNMENT .)
    U_PLUS          reduce using rule 28 (assignOper -> ASSIGNMENT .)
    U_MINUS         reduce using rule 28 (assignOper -> ASSIGNMENT .)
    NOT             reduce using rule 28 (assignOper -> ASSIGNMENT .)
    BIT_NOT         reduce using rule 28 (assignOper -> ASSIGNMENT .)
    LPAREN          reduce using rule 28 (assignOper -> ASSIGNMENT .)
    ID              reduce using rule 28 (assignOper -> ASSIGNMENT .)
    STRING          reduce using rule 28 (assignOper -> ASSIGNMENT .)
    INTNUM          reduce using rule 28 (assignOper -> ASSIGNMENT .)
    FLOATNUM        reduce using rule 28 (assignOper -> ASSIGNMENT .)
    CHAR_CONST      reduce using rule 28 (assignOper -> ASSIGNMENT .)


state 90

    (29) assignOper -> MULT_EQ .

    PLUSPLUS        reduce using rule 29 (assignOper -> MULT_EQ .)
    MINUSMINUS      reduce using rule 29 (assignOper -> MULT_EQ .)
    SIZEOF          reduce using rule 29 (assignOper -> MULT_EQ .)
    TIMES           reduce using rule 29 (assignOper -> MULT_EQ .)
    BIT_AND         reduce using rule 29 (assignOper -> MULT_EQ .)
    U_PLUS          reduce using rule 29 (assignOper -> MULT_EQ .)
    U_MINUS         reduce using rule 29 (assignOper -> MULT_EQ .)
    NOT             reduce using rule 29 (assignOper -> MULT_EQ .)
    BIT_NOT         reduce using rule 29 (assignOper -> MULT_EQ .)
    LPAREN          reduce using rule 29 (assignOper -> MULT_EQ .)
    ID              reduce using rule 29 (assignOper -> MULT_EQ .)
    STRING          reduce using rule 29 (assignOper -> MULT_EQ .)
    INTNUM          reduce using rule 29 (assignOper -> MULT_EQ .)
    FLOATNUM        reduce using rule 29 (assignOper -> MULT_EQ .)
    CHAR_CONST      reduce using rule 29 (assignOper -> MULT_EQ .)


state 91

    (30) assignOper -> DIVIDE_EQ .

    PLUSPLUS        reduce using rule 30 (assignOper -> DIVIDE_EQ .)
    MINUSMINUS      reduce using rule 30 (assignOper -> DIVIDE_EQ .)
    SIZEOF          reduce using rule 30 (assignOper -> DIVIDE_EQ .)
    TIMES           reduce using rule 30 (assignOper -> DIVIDE_EQ .)
    BIT_AND         reduce using rule 30 (assignOper -> DIVIDE_EQ .)
    U_PLUS          reduce using rule 30 (assignOper -> DIVIDE_EQ .)
    U_MINUS         reduce using rule 30 (assignOper -> DIVIDE_EQ .)
    NOT             reduce using rule 30 (assignOper -> DIVIDE_EQ .)
    BIT_NOT         reduce using rule 30 (assignOper -> DIVIDE_EQ .)
    LPAREN          reduce using rule 30 (assignOper -> DIVIDE_EQ .)
    ID              reduce using rule 30 (assignOper -> DIVIDE_EQ .)
    STRING          reduce using rule 30 (assignOper -> DIVIDE_EQ .)
    INTNUM          reduce using rule 30 (assignOper -> DIVIDE_EQ .)
    FLOATNUM        reduce using rule 30 (assignOper -> DIVIDE_EQ .)
    CHAR_CONST      reduce using rule 30 (assignOper -> DIVIDE_EQ .)


state 92

    (31) assignOper -> MOD_EQ .

    PLUSPLUS        reduce using rule 31 (assignOper -> MOD_EQ .)
    MINUSMINUS      reduce using rule 31 (assignOper -> MOD_EQ .)
    SIZEOF          reduce using rule 31 (assignOper -> MOD_EQ .)
    TIMES           reduce using rule 31 (assignOper -> MOD_EQ .)
    BIT_AND         reduce using rule 31 (assignOper -> MOD_EQ .)
    U_PLUS          reduce using rule 31 (assignOper -> MOD_EQ .)
    U_MINUS         reduce using rule 31 (assignOper -> MOD_EQ .)
    NOT             reduce using rule 31 (assignOper -> MOD_EQ .)
    BIT_NOT         reduce using rule 31 (assignOper -> MOD_EQ .)
    LPAREN          reduce using rule 31 (assignOper -> MOD_EQ .)
    ID              reduce using rule 31 (assignOper -> MOD_EQ .)
    STRING          reduce using rule 31 (assignOper -> MOD_EQ .)
    INTNUM          reduce using rule 31 (assignOper -> MOD_EQ .)
    FLOATNUM        reduce using rule 31 (assignOper -> MOD_EQ .)
    CHAR_CONST      reduce using rule 31 (assignOper -> MOD_EQ .)


state 93

    (32) assignOper -> PLUS_EQ .

    PLUSPLUS        reduce using rule 32 (assignOper -> PLUS_EQ .)
    MINUSMINUS      reduce using rule 32 (assignOper -> PLUS_EQ .)
    SIZEOF          reduce using rule 32 (assignOper -> PLUS_EQ .)
    TIMES           reduce using rule 32 (assignOper -> PLUS_EQ .)
    BIT_AND         reduce using rule 32 (assignOper -> PLUS_EQ .)
    U_PLUS          reduce using rule 32 (assignOper -> PLUS_EQ .)
    U_MINUS         reduce using rule 32 (assignOper -> PLUS_EQ .)
    NOT             reduce using rule 32 (assignOper -> PLUS_EQ .)
    BIT_NOT         reduce using rule 32 (assignOper -> PLUS_EQ .)
    LPAREN          reduce using rule 32 (assignOper -> PLUS_EQ .)
    ID              reduce using rule 32 (assignOper -> PLUS_EQ .)
    STRING          reduce using rule 32 (assignOper -> PLUS_EQ .)
    INTNUM          reduce using rule 32 (assignOper -> PLUS_EQ .)
    FLOATNUM        reduce using rule 32 (assignOper -> PLUS_EQ .)
    CHAR_CONST      reduce using rule 32 (assignOper -> PLUS_EQ .)


state 94

    (33) assignOper -> MINUS_EQ .

    PLUSPLUS        reduce using rule 33 (assignOper -> MINUS_EQ .)
    MINUSMINUS      reduce using rule 33 (assignOper -> MINUS_EQ .)
    SIZEOF          reduce using rule 33 (assignOper -> MINUS_EQ .)
    TIMES           reduce using rule 33 (assignOper -> MINUS_EQ .)
    BIT_AND         reduce using rule 33 (assignOper -> MINUS_EQ .)
    U_PLUS          reduce using rule 33 (assignOper -> MINUS_EQ .)
    U_MINUS         reduce using rule 33 (assignOper -> MINUS_EQ .)
    NOT             reduce using rule 33 (assignOper -> MINUS_EQ .)
    BIT_NOT         reduce using rule 33 (assignOper -> MINUS_EQ .)
    LPAREN          reduce using rule 33 (assignOper -> MINUS_EQ .)
    ID              reduce using rule 33 (assignOper -> MINUS_EQ .)
    STRING          reduce using rule 33 (assignOper -> MINUS_EQ .)
    INTNUM          reduce using rule 33 (assignOper -> MINUS_EQ .)
    FLOATNUM        reduce using rule 33 (assignOper -> MINUS_EQ .)
    CHAR_CONST      reduce using rule 33 (assignOper -> MINUS_EQ .)


state 95

    (34) assignOper -> GTEQ .

    PLUSPLUS        reduce using rule 34 (assignOper -> GTEQ .)
    MINUSMINUS      reduce using rule 34 (assignOper -> GTEQ .)
    SIZEOF          reduce using rule 34 (assignOper -> GTEQ .)
    TIMES           reduce using rule 34 (assignOper -> GTEQ .)
    BIT_AND         reduce using rule 34 (assignOper -> GTEQ .)
    U_PLUS          reduce using rule 34 (assignOper -> GTEQ .)
    U_MINUS         reduce using rule 34 (assignOper -> GTEQ .)
    NOT             reduce using rule 34 (assignOper -> GTEQ .)
    BIT_NOT         reduce using rule 34 (assignOper -> GTEQ .)
    LPAREN          reduce using rule 34 (assignOper -> GTEQ .)
    ID              reduce using rule 34 (assignOper -> GTEQ .)
    STRING          reduce using rule 34 (assignOper -> GTEQ .)
    INTNUM          reduce using rule 34 (assignOper -> GTEQ .)
    FLOATNUM        reduce using rule 34 (assignOper -> GTEQ .)
    CHAR_CONST      reduce using rule 34 (assignOper -> GTEQ .)


state 96

    (35) assignOper -> LTEQ .

    PLUSPLUS        reduce using rule 35 (assignOper -> LTEQ .)
    MINUSMINUS      reduce using rule 35 (assignOper -> LTEQ .)
    SIZEOF          reduce using rule 35 (assignOper -> LTEQ .)
    TIMES           reduce using rule 35 (assignOper -> LTEQ .)
    BIT_AND         reduce using rule 35 (assignOper -> LTEQ .)
    U_PLUS          reduce using rule 35 (assignOper -> LTEQ .)
    U_MINUS         reduce using rule 35 (assignOper -> LTEQ .)
    NOT             reduce using rule 35 (assignOper -> LTEQ .)
    BIT_NOT         reduce using rule 35 (assignOper -> LTEQ .)
    LPAREN          reduce using rule 35 (assignOper -> LTEQ .)
    ID              reduce using rule 35 (assignOper -> LTEQ .)
    STRING          reduce using rule 35 (assignOper -> LTEQ .)
    INTNUM          reduce using rule 35 (assignOper -> LTEQ .)
    FLOATNUM        reduce using rule 35 (assignOper -> LTEQ .)
    CHAR_CONST      reduce using rule 35 (assignOper -> LTEQ .)


state 97

    (36) assignOper -> AND_EQ .

    PLUSPLUS        reduce using rule 36 (assignOper -> AND_EQ .)
    MINUSMINUS      reduce using rule 36 (assignOper -> AND_EQ .)
    SIZEOF          reduce using rule 36 (assignOper -> AND_EQ .)
    TIMES           reduce using rule 36 (assignOper -> AND_EQ .)
    BIT_AND         reduce using rule 36 (assignOper -> AND_EQ .)
    U_PLUS          reduce using rule 36 (assignOper -> AND_EQ .)
    U_MINUS         reduce using rule 36 (assignOper -> AND_EQ .)
    NOT             reduce using rule 36 (assignOper -> AND_EQ .)
    BIT_NOT         reduce using rule 36 (assignOper -> AND_EQ .)
    LPAREN          reduce using rule 36 (assignOper -> AND_EQ .)
    ID              reduce using rule 36 (assignOper -> AND_EQ .)
    STRING          reduce using rule 36 (assignOper -> AND_EQ .)
    INTNUM          reduce using rule 36 (assignOper -> AND_EQ .)
    FLOATNUM        reduce using rule 36 (assignOper -> AND_EQ .)
    CHAR_CONST      reduce using rule 36 (assignOper -> AND_EQ .)


state 98

    (37) assignOper -> XOR_EQ .

    PLUSPLUS        reduce using rule 37 (assignOper -> XOR_EQ .)
    MINUSMINUS      reduce using rule 37 (assignOper -> XOR_EQ .)
    SIZEOF          reduce using rule 37 (assignOper -> XOR_EQ .)
    TIMES           reduce using rule 37 (assignOper -> XOR_EQ .)
    BIT_AND         reduce using rule 37 (assignOper -> XOR_EQ .)
    U_PLUS          reduce using rule 37 (assignOper -> XOR_EQ .)
    U_MINUS         reduce using rule 37 (assignOper -> XOR_EQ .)
    NOT             reduce using rule 37 (assignOper -> XOR_EQ .)
    BIT_NOT         reduce using rule 37 (assignOper -> XOR_EQ .)
    LPAREN          reduce using rule 37 (assignOper -> XOR_EQ .)
    ID              reduce using rule 37 (assignOper -> XOR_EQ .)
    STRING          reduce using rule 37 (assignOper -> XOR_EQ .)
    INTNUM          reduce using rule 37 (assignOper -> XOR_EQ .)
    FLOATNUM        reduce using rule 37 (assignOper -> XOR_EQ .)
    CHAR_CONST      reduce using rule 37 (assignOper -> XOR_EQ .)


state 99

    (38) assignOper -> OR_EQ .

    PLUSPLUS        reduce using rule 38 (assignOper -> OR_EQ .)
    MINUSMINUS      reduce using rule 38 (assignOper -> OR_EQ .)
    SIZEOF          reduce using rule 38 (assignOper -> OR_EQ .)
    TIMES           reduce using rule 38 (assignOper -> OR_EQ .)
    BIT_AND         reduce using rule 38 (assignOper -> OR_EQ .)
    U_PLUS          reduce using rule 38 (assignOper -> OR_EQ .)
    U_MINUS         reduce using rule 38 (assignOper -> OR_EQ .)
    NOT             reduce using rule 38 (assignOper -> OR_EQ .)
    BIT_NOT         reduce using rule 38 (assignOper -> OR_EQ .)
    LPAREN          reduce using rule 38 (assignOper -> OR_EQ .)
    ID              reduce using rule 38 (assignOper -> OR_EQ .)
    STRING          reduce using rule 38 (assignOper -> OR_EQ .)
    INTNUM          reduce using rule 38 (assignOper -> OR_EQ .)
    FLOATNUM        reduce using rule 38 (assignOper -> OR_EQ .)
    CHAR_CONST      reduce using rule 38 (assignOper -> OR_EQ .)


state 100

    (40) conditionalExpression -> logicalOrExpression QUES_MARK . expression COLON conditionalExpression
    (2) expression -> . assignmentExpression
    (3) expression -> . expression COMMA assignmentExpression
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (86) empty -> .
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    logicalOrExpression            shift and go to state 30
    expression                     shift and go to state 164
    conditionalExpression          shift and go to state 28
    assignmentExpression           shift and go to state 26
    unaryExpression                shift and go to state 29
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    empty                          shift and go to state 71
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58

state 101

    (42) logicalOrExpression -> logicalOrExpression OR . logicalAndExpression
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    logicalAndExpression           shift and go to state 165
    inclusiveOrExpression          shift and go to state 44
    exclusiveOrExpression          shift and go to state 48
    andExpression                  shift and go to state 52
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 102

    (19) postfixExpression -> postfixExpression LEFTSQRBRACKET . expression RIGHTSQRBRACKET
    (2) expression -> . assignmentExpression
    (3) expression -> . expression COMMA assignmentExpression
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (86) empty -> .
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    postfixExpression              shift and go to state 31
    expression                     shift and go to state 166
    assignmentExpression           shift and go to state 26
    conditionalExpression          shift and go to state 28
    unaryExpression                shift and go to state 29
    logicalOrExpression            shift and go to state 30
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    empty                          shift and go to state 71
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58

state 103

    (20) postfixExpression -> postfixExpression PLUSPLUS .

    LEFTSQRBRACKET  reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    PLUSPLUS        reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    MINUSMINUS      reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    ASSIGNMENT      reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    MULT_EQ         reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    DIVIDE_EQ       reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    MOD_EQ          reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    PLUS_EQ         reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    MINUS_EQ        reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    GTEQ            reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    LTEQ            reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    AND_EQ          reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    XOR_EQ          reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    OR_EQ           reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    TIMES           reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    DIVIDE          reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    MOD             reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    U_PLUS          reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    U_MINUS         reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    LSHIFT          reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    RSHIFT          reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    LT              reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    GT              reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    EQUAL           reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    NEQUAL          reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    BIT_AND         reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    BIT_XOR         reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    BIT_OR          reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    AND             reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    QUES_MARK       reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    OR              reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    TERMINAL        reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    COMMA           reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    RPAREN          reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    COLON           reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)
    RIGHTSQRBRACKET reduce using rule 20 (postfixExpression -> postfixExpression PLUSPLUS .)


state 104

    (21) postfixExpression -> postfixExpression MINUSMINUS .

    LEFTSQRBRACKET  reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    PLUSPLUS        reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    MINUSMINUS      reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    ASSIGNMENT      reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    MULT_EQ         reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    DIVIDE_EQ       reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    MOD_EQ          reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    PLUS_EQ         reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    MINUS_EQ        reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    GTEQ            reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    LTEQ            reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    AND_EQ          reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    XOR_EQ          reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    OR_EQ           reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    TIMES           reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    DIVIDE          reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    MOD             reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    U_PLUS          reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    U_MINUS         reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    LSHIFT          reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    RSHIFT          reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    LT              reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    GT              reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    EQUAL           reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    NEQUAL          reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    BIT_AND         reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    BIT_XOR         reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    BIT_OR          reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    AND             reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    QUES_MARK       reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    OR              reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    TERMINAL        reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    COMMA           reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    RPAREN          reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    COLON           reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)
    RIGHTSQRBRACKET reduce using rule 21 (postfixExpression -> postfixExpression MINUSMINUS .)


state 105

    (7) unaryExpression -> PLUSPLUS unaryExpression .

    ASSIGNMENT      reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    MULT_EQ         reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    DIVIDE_EQ       reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    MOD_EQ          reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    PLUS_EQ         reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    MINUS_EQ        reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    GTEQ            reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    LTEQ            reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    AND_EQ          reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    XOR_EQ          reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    OR_EQ           reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    TIMES           reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    DIVIDE          reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    MOD             reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    U_PLUS          reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    U_MINUS         reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    LSHIFT          reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    RSHIFT          reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    LT              reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    GT              reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    EQUAL           reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    NEQUAL          reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    BIT_AND         reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    BIT_XOR         reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    BIT_OR          reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    AND             reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    QUES_MARK       reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    OR              reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    TERMINAL        reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    COMMA           reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    RPAREN          reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    COLON           reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)
    RIGHTSQRBRACKET reduce using rule 7 (unaryExpression -> PLUSPLUS unaryExpression .)


state 106

    (15) primaryExpression -> LPAREN . expression RPAREN
    (2) expression -> . assignmentExpression
    (3) expression -> . expression COMMA assignmentExpression
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (86) empty -> .
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    expression                     shift and go to state 59
    assignmentExpression           shift and go to state 26
    conditionalExpression          shift and go to state 28
    unaryExpression                shift and go to state 29
    logicalOrExpression            shift and go to state 30
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    empty                          shift and go to state 71
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58

state 107

    (8) unaryExpression -> MINUSMINUS unaryExpression .

    ASSIGNMENT      reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    MULT_EQ         reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    DIVIDE_EQ       reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    MOD_EQ          reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    PLUS_EQ         reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    MINUS_EQ        reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    GTEQ            reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    LTEQ            reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    AND_EQ          reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    XOR_EQ          reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    OR_EQ           reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    TIMES           reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    DIVIDE          reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    MOD             reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    U_PLUS          reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    U_MINUS         reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    LSHIFT          reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    RSHIFT          reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    LT              reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    GT              reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    EQUAL           reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    NEQUAL          reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    BIT_AND         reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    BIT_XOR         reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    BIT_OR          reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    AND             reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    QUES_MARK       reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    OR              reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    TERMINAL        reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    COMMA           reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    RPAREN          reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    COLON           reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)
    RIGHTSQRBRACKET reduce using rule 8 (unaryExpression -> MINUSMINUS unaryExpression .)


state 108

    (9) unaryExpression -> unaryOper unaryExpression .

    ASSIGNMENT      reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    MULT_EQ         reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    DIVIDE_EQ       reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    MOD_EQ          reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    PLUS_EQ         reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    MINUS_EQ        reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    GTEQ            reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    LTEQ            reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    AND_EQ          reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    XOR_EQ          reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    OR_EQ           reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    TIMES           reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    DIVIDE          reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    MOD             reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    U_PLUS          reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    U_MINUS         reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    LSHIFT          reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    RSHIFT          reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    LT              reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    GT              reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    EQUAL           reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    NEQUAL          reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    BIT_AND         reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    BIT_XOR         reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    BIT_OR          reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    AND             reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    QUES_MARK       reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    OR              reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    TERMINAL        reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    COMMA           reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    RPAREN          reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    COLON           reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)
    RIGHTSQRBRACKET reduce using rule 9 (unaryExpression -> unaryOper unaryExpression .)


state 109

    (10) unaryExpression -> SIZEOF unaryExpression .

    ASSIGNMENT      reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    MULT_EQ         reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    DIVIDE_EQ       reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    MOD_EQ          reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    PLUS_EQ         reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    MINUS_EQ        reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    GTEQ            reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    LTEQ            reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    AND_EQ          reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    XOR_EQ          reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    OR_EQ           reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    TIMES           reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    DIVIDE          reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    MOD             reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    U_PLUS          reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    U_MINUS         reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    LSHIFT          reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    RSHIFT          reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    LT              reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    GT              reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    EQUAL           reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    NEQUAL          reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    BIT_AND         reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    BIT_XOR         reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    BIT_OR          reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    AND             reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    QUES_MARK       reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    OR              reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    TERMINAL        reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    COMMA           reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    RPAREN          reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    COLON           reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)
    RIGHTSQRBRACKET reduce using rule 10 (unaryExpression -> SIZEOF unaryExpression .)


state 110

    (11) unaryExpression -> SIZEOF LPAREN . simpleTypeName RPAREN
    (15) primaryExpression -> LPAREN . expression RPAREN
    (77) simpleTypeName -> . CHAR
    (78) simpleTypeName -> . SHORT
    (79) simpleTypeName -> . INT
    (80) simpleTypeName -> . LONG
    (81) simpleTypeName -> . SIGNED
    (82) simpleTypeName -> . UNSIGNED
    (83) simpleTypeName -> . FLOAT
    (84) simpleTypeName -> . DOUBLE
    (85) simpleTypeName -> . VOID
    (2) expression -> . assignmentExpression
    (3) expression -> . expression COMMA assignmentExpression
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (86) empty -> .
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

    CHAR            shift and go to state 61
    SHORT           shift and go to state 62
    INT             shift and go to state 63
    LONG            shift and go to state 64
    SIGNED          shift and go to state 65
    UNSIGNED        shift and go to state 66
    FLOAT           shift and go to state 67
    DOUBLE          shift and go to state 68
    VOID            shift and go to state 69
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    simpleTypeName                 shift and go to state 167
    expression                     shift and go to state 59
    assignmentExpression           shift and go to state 26
    conditionalExpression          shift and go to state 28
    unaryExpression                shift and go to state 29
    logicalOrExpression            shift and go to state 30
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    empty                          shift and go to state 71
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58

state 111

    (44) logicalAndExpression -> logicalAndExpression AND . inclusiveOrExpression
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    inclusiveOrExpression          shift and go to state 168
    exclusiveOrExpression          shift and go to state 48
    andExpression                  shift and go to state 52
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 112

    (46) inclusiveOrExpression -> inclusiveOrExpression BIT_OR . exclusiveOrExpression
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    exclusiveOrExpression          shift and go to state 169
    andExpression                  shift and go to state 52
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 113

    (14) primaryExpression -> markstr STRING .

    LEFTSQRBRACKET  reduce using rule 14 (primaryExpression -> markstr STRING .)
    PLUSPLUS        reduce using rule 14 (primaryExpression -> markstr STRING .)
    MINUSMINUS      reduce using rule 14 (primaryExpression -> markstr STRING .)
    ASSIGNMENT      reduce using rule 14 (primaryExpression -> markstr STRING .)
    MULT_EQ         reduce using rule 14 (primaryExpression -> markstr STRING .)
    DIVIDE_EQ       reduce using rule 14 (primaryExpression -> markstr STRING .)
    MOD_EQ          reduce using rule 14 (primaryExpression -> markstr STRING .)
    PLUS_EQ         reduce using rule 14 (primaryExpression -> markstr STRING .)
    MINUS_EQ        reduce using rule 14 (primaryExpression -> markstr STRING .)
    GTEQ            reduce using rule 14 (primaryExpression -> markstr STRING .)
    LTEQ            reduce using rule 14 (primaryExpression -> markstr STRING .)
    AND_EQ          reduce using rule 14 (primaryExpression -> markstr STRING .)
    XOR_EQ          reduce using rule 14 (primaryExpression -> markstr STRING .)
    OR_EQ           reduce using rule 14 (primaryExpression -> markstr STRING .)
    TIMES           reduce using rule 14 (primaryExpression -> markstr STRING .)
    DIVIDE          reduce using rule 14 (primaryExpression -> markstr STRING .)
    MOD             reduce using rule 14 (primaryExpression -> markstr STRING .)
    U_PLUS          reduce using rule 14 (primaryExpression -> markstr STRING .)
    U_MINUS         reduce using rule 14 (primaryExpression -> markstr STRING .)
    LSHIFT          reduce using rule 14 (primaryExpression -> markstr STRING .)
    RSHIFT          reduce using rule 14 (primaryExpression -> markstr STRING .)
    LT              reduce using rule 14 (primaryExpression -> markstr STRING .)
    GT              reduce using rule 14 (primaryExpression -> markstr STRING .)
    EQUAL           reduce using rule 14 (primaryExpression -> markstr STRING .)
    NEQUAL          reduce using rule 14 (primaryExpression -> markstr STRING .)
    BIT_AND         reduce using rule 14 (primaryExpression -> markstr STRING .)
    BIT_XOR         reduce using rule 14 (primaryExpression -> markstr STRING .)
    BIT_OR          reduce using rule 14 (primaryExpression -> markstr STRING .)
    AND             reduce using rule 14 (primaryExpression -> markstr STRING .)
    QUES_MARK       reduce using rule 14 (primaryExpression -> markstr STRING .)
    OR              reduce using rule 14 (primaryExpression -> markstr STRING .)
    TERMINAL        reduce using rule 14 (primaryExpression -> markstr STRING .)
    COMMA           reduce using rule 14 (primaryExpression -> markstr STRING .)
    RPAREN          reduce using rule 14 (primaryExpression -> markstr STRING .)
    COLON           reduce using rule 14 (primaryExpression -> markstr STRING .)
    RIGHTSQRBRACKET reduce using rule 14 (primaryExpression -> markstr STRING .)


state 114

    (48) exclusiveOrExpression -> exclusiveOrExpression BIT_XOR . andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    andExpression                  shift and go to state 170
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 115

    (22) constant -> markint INTNUM .

    LEFTSQRBRACKET  reduce using rule 22 (constant -> markint INTNUM .)
    PLUSPLUS        reduce using rule 22 (constant -> markint INTNUM .)
    MINUSMINUS      reduce using rule 22 (constant -> markint INTNUM .)
    ASSIGNMENT      reduce using rule 22 (constant -> markint INTNUM .)
    MULT_EQ         reduce using rule 22 (constant -> markint INTNUM .)
    DIVIDE_EQ       reduce using rule 22 (constant -> markint INTNUM .)
    MOD_EQ          reduce using rule 22 (constant -> markint INTNUM .)
    PLUS_EQ         reduce using rule 22 (constant -> markint INTNUM .)
    MINUS_EQ        reduce using rule 22 (constant -> markint INTNUM .)
    GTEQ            reduce using rule 22 (constant -> markint INTNUM .)
    LTEQ            reduce using rule 22 (constant -> markint INTNUM .)
    AND_EQ          reduce using rule 22 (constant -> markint INTNUM .)
    XOR_EQ          reduce using rule 22 (constant -> markint INTNUM .)
    OR_EQ           reduce using rule 22 (constant -> markint INTNUM .)
    TIMES           reduce using rule 22 (constant -> markint INTNUM .)
    DIVIDE          reduce using rule 22 (constant -> markint INTNUM .)
    MOD             reduce using rule 22 (constant -> markint INTNUM .)
    U_PLUS          reduce using rule 22 (constant -> markint INTNUM .)
    U_MINUS         reduce using rule 22 (constant -> markint INTNUM .)
    LSHIFT          reduce using rule 22 (constant -> markint INTNUM .)
    RSHIFT          reduce using rule 22 (constant -> markint INTNUM .)
    LT              reduce using rule 22 (constant -> markint INTNUM .)
    GT              reduce using rule 22 (constant -> markint INTNUM .)
    EQUAL           reduce using rule 22 (constant -> markint INTNUM .)
    NEQUAL          reduce using rule 22 (constant -> markint INTNUM .)
    BIT_AND         reduce using rule 22 (constant -> markint INTNUM .)
    BIT_XOR         reduce using rule 22 (constant -> markint INTNUM .)
    BIT_OR          reduce using rule 22 (constant -> markint INTNUM .)
    AND             reduce using rule 22 (constant -> markint INTNUM .)
    QUES_MARK       reduce using rule 22 (constant -> markint INTNUM .)
    OR              reduce using rule 22 (constant -> markint INTNUM .)
    TERMINAL        reduce using rule 22 (constant -> markint INTNUM .)
    COMMA           reduce using rule 22 (constant -> markint INTNUM .)
    RPAREN          reduce using rule 22 (constant -> markint INTNUM .)
    COLON           reduce using rule 22 (constant -> markint INTNUM .)
    RIGHTSQRBRACKET reduce using rule 22 (constant -> markint INTNUM .)


state 116

    (23) constant -> markfloat FLOATNUM .

    LEFTSQRBRACKET  reduce using rule 23 (constant -> markfloat FLOATNUM .)
    PLUSPLUS        reduce using rule 23 (constant -> markfloat FLOATNUM .)
    MINUSMINUS      reduce using rule 23 (constant -> markfloat FLOATNUM .)
    ASSIGNMENT      reduce using rule 23 (constant -> markfloat FLOATNUM .)
    MULT_EQ         reduce using rule 23 (constant -> markfloat FLOATNUM .)
    DIVIDE_EQ       reduce using rule 23 (constant -> markfloat FLOATNUM .)
    MOD_EQ          reduce using rule 23 (constant -> markfloat FLOATNUM .)
    PLUS_EQ         reduce using rule 23 (constant -> markfloat FLOATNUM .)
    MINUS_EQ        reduce using rule 23 (constant -> markfloat FLOATNUM .)
    GTEQ            reduce using rule 23 (constant -> markfloat FLOATNUM .)
    LTEQ            reduce using rule 23 (constant -> markfloat FLOATNUM .)
    AND_EQ          reduce using rule 23 (constant -> markfloat FLOATNUM .)
    XOR_EQ          reduce using rule 23 (constant -> markfloat FLOATNUM .)
    OR_EQ           reduce using rule 23 (constant -> markfloat FLOATNUM .)
    TIMES           reduce using rule 23 (constant -> markfloat FLOATNUM .)
    DIVIDE          reduce using rule 23 (constant -> markfloat FLOATNUM .)
    MOD             reduce using rule 23 (constant -> markfloat FLOATNUM .)
    U_PLUS          reduce using rule 23 (constant -> markfloat FLOATNUM .)
    U_MINUS         reduce using rule 23 (constant -> markfloat FLOATNUM .)
    LSHIFT          reduce using rule 23 (constant -> markfloat FLOATNUM .)
    RSHIFT          reduce using rule 23 (constant -> markfloat FLOATNUM .)
    LT              reduce using rule 23 (constant -> markfloat FLOATNUM .)
    GT              reduce using rule 23 (constant -> markfloat FLOATNUM .)
    EQUAL           reduce using rule 23 (constant -> markfloat FLOATNUM .)
    NEQUAL          reduce using rule 23 (constant -> markfloat FLOATNUM .)
    BIT_AND         reduce using rule 23 (constant -> markfloat FLOATNUM .)
    BIT_XOR         reduce using rule 23 (constant -> markfloat FLOATNUM .)
    BIT_OR          reduce using rule 23 (constant -> markfloat FLOATNUM .)
    AND             reduce using rule 23 (constant -> markfloat FLOATNUM .)
    QUES_MARK       reduce using rule 23 (constant -> markfloat FLOATNUM .)
    OR              reduce using rule 23 (constant -> markfloat FLOATNUM .)
    TERMINAL        reduce using rule 23 (constant -> markfloat FLOATNUM .)
    COMMA           reduce using rule 23 (constant -> markfloat FLOATNUM .)
    RPAREN          reduce using rule 23 (constant -> markfloat FLOATNUM .)
    COLON           reduce using rule 23 (constant -> markfloat FLOATNUM .)
    RIGHTSQRBRACKET reduce using rule 23 (constant -> markfloat FLOATNUM .)


state 117

    (24) constant -> markchar CHAR_CONST .

    LEFTSQRBRACKET  reduce using rule 24 (constant -> markchar CHAR_CONST .)
    PLUSPLUS        reduce using rule 24 (constant -> markchar CHAR_CONST .)
    MINUSMINUS      reduce using rule 24 (constant -> markchar CHAR_CONST .)
    ASSIGNMENT      reduce using rule 24 (constant -> markchar CHAR_CONST .)
    MULT_EQ         reduce using rule 24 (constant -> markchar CHAR_CONST .)
    DIVIDE_EQ       reduce using rule 24 (constant -> markchar CHAR_CONST .)
    MOD_EQ          reduce using rule 24 (constant -> markchar CHAR_CONST .)
    PLUS_EQ         reduce using rule 24 (constant -> markchar CHAR_CONST .)
    MINUS_EQ        reduce using rule 24 (constant -> markchar CHAR_CONST .)
    GTEQ            reduce using rule 24 (constant -> markchar CHAR_CONST .)
    LTEQ            reduce using rule 24 (constant -> markchar CHAR_CONST .)
    AND_EQ          reduce using rule 24 (constant -> markchar CHAR_CONST .)
    XOR_EQ          reduce using rule 24 (constant -> markchar CHAR_CONST .)
    OR_EQ           reduce using rule 24 (constant -> markchar CHAR_CONST .)
    TIMES           reduce using rule 24 (constant -> markchar CHAR_CONST .)
    DIVIDE          reduce using rule 24 (constant -> markchar CHAR_CONST .)
    MOD             reduce using rule 24 (constant -> markchar CHAR_CONST .)
    U_PLUS          reduce using rule 24 (constant -> markchar CHAR_CONST .)
    U_MINUS         reduce using rule 24 (constant -> markchar CHAR_CONST .)
    LSHIFT          reduce using rule 24 (constant -> markchar CHAR_CONST .)
    RSHIFT          reduce using rule 24 (constant -> markchar CHAR_CONST .)
    LT              reduce using rule 24 (constant -> markchar CHAR_CONST .)
    GT              reduce using rule 24 (constant -> markchar CHAR_CONST .)
    EQUAL           reduce using rule 24 (constant -> markchar CHAR_CONST .)
    NEQUAL          reduce using rule 24 (constant -> markchar CHAR_CONST .)
    BIT_AND         reduce using rule 24 (constant -> markchar CHAR_CONST .)
    BIT_XOR         reduce using rule 24 (constant -> markchar CHAR_CONST .)
    BIT_OR          reduce using rule 24 (constant -> markchar CHAR_CONST .)
    AND             reduce using rule 24 (constant -> markchar CHAR_CONST .)
    QUES_MARK       reduce using rule 24 (constant -> markchar CHAR_CONST .)
    OR              reduce using rule 24 (constant -> markchar CHAR_CONST .)
    TERMINAL        reduce using rule 24 (constant -> markchar CHAR_CONST .)
    COMMA           reduce using rule 24 (constant -> markchar CHAR_CONST .)
    RPAREN          reduce using rule 24 (constant -> markchar CHAR_CONST .)
    COLON           reduce using rule 24 (constant -> markchar CHAR_CONST .)
    RIGHTSQRBRACKET reduce using rule 24 (constant -> markchar CHAR_CONST .)


state 118

    (50) andExpression -> andExpression BIT_AND . equalityExpression
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    equalityExpression             shift and go to state 171
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 119

    (52) equalityExpression -> equalityExpression EQUAL . relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    relationalExpression           shift and go to state 172
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 120

    (53) equalityExpression -> equalityExpression NEQUAL . relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    relationalExpression           shift and go to state 173
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 121

    (55) relationalExpression -> relationalExpression LT . shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    shiftExpression                shift and go to state 174
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 122

    (56) relationalExpression -> relationalExpression GT . shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    shiftExpression                shift and go to state 175
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 123

    (57) relationalExpression -> relationalExpression LTEQ . shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    shiftExpression                shift and go to state 176
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 124

    (58) relationalExpression -> relationalExpression GTEQ . shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    shiftExpression                shift and go to state 177
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 125

    (60) shiftExpression -> shiftExpression LSHIFT . additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    additiveExpression             shift and go to state 178
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 126

    (61) shiftExpression -> shiftExpression RSHIFT . additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    additiveExpression             shift and go to state 179
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 127

    (63) additiveExpression -> additiveExpression U_PLUS . multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    multiplicativeExpression       shift and go to state 180
    castExpression                 shift and go to state 58
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 128

    (64) additiveExpression -> additiveExpression U_MINUS . multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    multiplicativeExpression       shift and go to state 181
    castExpression                 shift and go to state 58
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 129

    (66) multiplicativeExpression -> multiplicativeExpression TIMES . castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    castExpression                 shift and go to state 182
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 130

    (67) multiplicativeExpression -> multiplicativeExpression DIVIDE . castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    castExpression                 shift and go to state 183
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 131

    (68) multiplicativeExpression -> multiplicativeExpression MOD . castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    castExpression                 shift and go to state 184
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 132

    (15) primaryExpression -> LPAREN expression RPAREN .

    LEFTSQRBRACKET  reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    ASSIGNMENT      reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    MULT_EQ         reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    DIVIDE_EQ       reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    MOD_EQ          reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    PLUS_EQ         reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    MINUS_EQ        reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    GTEQ            reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    LTEQ            reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    AND_EQ          reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    XOR_EQ          reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    OR_EQ           reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    U_PLUS          reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    U_MINUS         reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    LT              reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    GT              reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    NEQUAL          reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    BIT_AND         reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    BIT_XOR         reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    BIT_OR          reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    AND             reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    QUES_MARK       reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    OR              reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    TERMINAL        reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)
    RIGHTSQRBRACKET reduce using rule 15 (primaryExpression -> LPAREN expression RPAREN .)


state 133

    (70) castExpression -> LPAREN simpleTypeName RPAREN . castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    castExpression                 shift and go to state 185
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 134

    (92) labeledStatement -> identifier COLON statement .

    $end            reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    RIGHTCURLYBRACKET reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    IF              reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    SWITCH          reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    BREAK           reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    CONTINUE        reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    RETURN          reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    GOTO            reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    ID              reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    LEFTCURLYBRACKET reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    PLUSPLUS        reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    MINUSMINUS      reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    SIZEOF          reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    TIMES           reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    BIT_AND         reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    U_PLUS          reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    U_MINUS         reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    NOT             reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    BIT_NOT         reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    LPAREN          reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    CASE            reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    DEFAULT         reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    STRING          reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    INTNUM          reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    FLOATNUM        reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    CHAR_CONST      reduce using rule 92 (labeledStatement -> identifier COLON statement .)
    ELSE            reduce using rule 92 (labeledStatement -> identifier COLON statement .)


state 135

    (94) caseList -> caseList CASE constantExpression . COLON statement

    COLON           shift and go to state 186


state 136

    (100) constantExpression -> conditionalExpression .

    COLON           reduce using rule 100 (constantExpression -> conditionalExpression .)


state 137

    (69) castExpression -> unaryExpression .

    TIMES           reduce using rule 69 (castExpression -> unaryExpression .)
    DIVIDE          reduce using rule 69 (castExpression -> unaryExpression .)
    MOD             reduce using rule 69 (castExpression -> unaryExpression .)
    U_PLUS          reduce using rule 69 (castExpression -> unaryExpression .)
    U_MINUS         reduce using rule 69 (castExpression -> unaryExpression .)
    LSHIFT          reduce using rule 69 (castExpression -> unaryExpression .)
    RSHIFT          reduce using rule 69 (castExpression -> unaryExpression .)
    LT              reduce using rule 69 (castExpression -> unaryExpression .)
    GT              reduce using rule 69 (castExpression -> unaryExpression .)
    LTEQ            reduce using rule 69 (castExpression -> unaryExpression .)
    GTEQ            reduce using rule 69 (castExpression -> unaryExpression .)
    EQUAL           reduce using rule 69 (castExpression -> unaryExpression .)
    NEQUAL          reduce using rule 69 (castExpression -> unaryExpression .)
    BIT_AND         reduce using rule 69 (castExpression -> unaryExpression .)
    BIT_XOR         reduce using rule 69 (castExpression -> unaryExpression .)
    BIT_OR          reduce using rule 69 (castExpression -> unaryExpression .)
    AND             reduce using rule 69 (castExpression -> unaryExpression .)
    QUES_MARK       reduce using rule 69 (castExpression -> unaryExpression .)
    OR              reduce using rule 69 (castExpression -> unaryExpression .)
    COLON           reduce using rule 69 (castExpression -> unaryExpression .)
    TERMINAL        reduce using rule 69 (castExpression -> unaryExpression .)
    COMMA           reduce using rule 69 (castExpression -> unaryExpression .)
    RPAREN          reduce using rule 69 (castExpression -> unaryExpression .)
    RIGHTSQRBRACKET reduce using rule 69 (castExpression -> unaryExpression .)


state 138

    (70) castExpression -> LPAREN . simpleTypeName RPAREN castExpression
    (15) primaryExpression -> LPAREN . expression RPAREN
    (77) simpleTypeName -> . CHAR
    (78) simpleTypeName -> . SHORT
    (79) simpleTypeName -> . INT
    (80) simpleTypeName -> . LONG
    (81) simpleTypeName -> . SIGNED
    (82) simpleTypeName -> . UNSIGNED
    (83) simpleTypeName -> . FLOAT
    (84) simpleTypeName -> . DOUBLE
    (85) simpleTypeName -> . VOID
    (2) expression -> . assignmentExpression
    (3) expression -> . expression COMMA assignmentExpression
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (86) empty -> .
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

    CHAR            shift and go to state 61
    SHORT           shift and go to state 62
    INT             shift and go to state 63
    LONG            shift and go to state 64
    SIGNED          shift and go to state 65
    UNSIGNED        shift and go to state 66
    FLOAT           shift and go to state 67
    DOUBLE          shift and go to state 68
    VOID            shift and go to state 69
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    simpleTypeName                 shift and go to state 60
    castExpression                 shift and go to state 58
    expression                     shift and go to state 59
    assignmentExpression           shift and go to state 26
    conditionalExpression          shift and go to state 28
    unaryExpression                shift and go to state 29
    logicalOrExpression            shift and go to state 30
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    empty                          shift and go to state 71
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57

state 139

    (96) default -> DEFAULT defaultmark . COLON statement enddefault

    COLON           shift and go to state 187


state 140

    (98) defaultmark -> empty .

    COLON           reduce using rule 98 (defaultmark -> empty .)


state 141

    (3) expression -> expression COMMA assignmentExpression .

    TERMINAL        reduce using rule 3 (expression -> expression COMMA assignmentExpression .)
    COMMA           reduce using rule 3 (expression -> expression COMMA assignmentExpression .)
    RPAREN          reduce using rule 3 (expression -> expression COMMA assignmentExpression .)
    COLON           reduce using rule 3 (expression -> expression COMMA assignmentExpression .)
    RIGHTSQRBRACKET reduce using rule 3 (expression -> expression COMMA assignmentExpression .)


state 142

    (103) compoundStatement -> oscope declarationList statementList . cscope
    (107) statementList -> statementList . statement
    (106) cscope -> . RIGHTCURLYBRACKET
    (87) statement -> . labeledStatement
    (88) statement -> . expressionStatement
    (89) statement -> . compoundStatement
    (90) statement -> . selectionStatement
    (91) statement -> . jumpStatement
    (92) labeledStatement -> . identifier COLON statement
    (93) labeledStatement -> . caseList default
    (101) expressionStatement -> . expression TERMINAL
    (102) expressionStatement -> . empty
    (103) compoundStatement -> . oscope declarationList statementList cscope
    (104) compoundStatement -> . empty
    (143) selectionStatement -> . IF LPAREN ifmark expression RPAREN statement endifmark
    (144) selectionStatement -> . IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement
    (145) selectionStatement -> . SWITCH LPAREN switchmark expression RPAREN statement endswitchmark
    (151) jumpStatement -> . BREAK TERMINAL
    (152) jumpStatement -> . CONTINUE TERMINAL
    (153) jumpStatement -> . RETURN expression TERMINAL
    (154) jumpStatement -> . RETURN TERMINAL
    (155) jumpStatement -> . GOTO identifier TERMINAL
    (132) identifier -> . ID
    (94) caseList -> . caseList CASE constantExpression COLON statement
    (95) caseList -> . empty
    (2) expression -> . assignmentExpression
    (3) expression -> . expression COMMA assignmentExpression
    (86) empty -> .
    (105) oscope -> . LEFTCURLYBRACKET
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

  ! shift/reduce conflict for RIGHTCURLYBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTCURLYBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for SIZEOF resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for U_PLUS resolved as shift
  ! shift/reduce conflict for U_MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BIT_NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for STRING resolved using rule 17 (markstr -> .)
    RIGHTCURLYBRACKET shift and go to state 190
    IF              shift and go to state 19
    SWITCH          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    RETURN          shift and go to state 23
    GOTO            shift and go to state 24
    ID              shift and go to state 25
    CASE            reduce using rule 86 (empty -> .)
    DEFAULT         reduce using rule 86 (empty -> .)
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)
    LEFTCURLYBRACKET shift and go to state 27
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)

  ! RIGHTCURLYBRACKET [ reduce using rule 86 (empty -> .) ]
  ! IF              [ reduce using rule 86 (empty -> .) ]
  ! SWITCH          [ reduce using rule 86 (empty -> .) ]
  ! BREAK           [ reduce using rule 86 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 86 (empty -> .) ]
  ! RETURN          [ reduce using rule 86 (empty -> .) ]
  ! GOTO            [ reduce using rule 86 (empty -> .) ]
  ! ID              [ reduce using rule 86 (empty -> .) ]
  ! LEFTCURLYBRACKET [ reduce using rule 86 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 86 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 86 (empty -> .) ]
  ! SIZEOF          [ reduce using rule 86 (empty -> .) ]
  ! TIMES           [ reduce using rule 86 (empty -> .) ]
  ! BIT_AND         [ reduce using rule 86 (empty -> .) ]
  ! U_PLUS          [ reduce using rule 86 (empty -> .) ]
  ! U_MINUS         [ reduce using rule 86 (empty -> .) ]
  ! NOT             [ reduce using rule 86 (empty -> .) ]
  ! BIT_NOT         [ reduce using rule 86 (empty -> .) ]
  ! LPAREN          [ reduce using rule 86 (empty -> .) ]
  ! STRING          [ reduce using rule 86 (empty -> .) ]

    oscope                         shift and go to state 18
    cscope                         shift and go to state 188
    statement                      shift and go to state 189
    labeledStatement               shift and go to state 9
    expressionStatement            shift and go to state 10
    compoundStatement              shift and go to state 11
    selectionStatement             shift and go to state 12
    jumpStatement                  shift and go to state 13
    identifier                     shift and go to state 14
    caseList                       shift and go to state 15
    expression                     shift and go to state 16
    empty                          shift and go to state 17
    assignmentExpression           shift and go to state 26
    conditionalExpression          shift and go to state 28
    unaryExpression                shift and go to state 29
    logicalOrExpression            shift and go to state 30
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58

state 143

    (109) declarationList -> declarationList declaration .

    AUTO            reduce using rule 109 (declarationList -> declarationList declaration .)
    REGISTER        reduce using rule 109 (declarationList -> declarationList declaration .)
    STATIC          reduce using rule 109 (declarationList -> declarationList declaration .)
    EXTERN          reduce using rule 109 (declarationList -> declarationList declaration .)
    TYPEDEF         reduce using rule 109 (declarationList -> declarationList declaration .)
    CHAR            reduce using rule 109 (declarationList -> declarationList declaration .)
    SHORT           reduce using rule 109 (declarationList -> declarationList declaration .)
    INT             reduce using rule 109 (declarationList -> declarationList declaration .)
    LONG            reduce using rule 109 (declarationList -> declarationList declaration .)
    SIGNED          reduce using rule 109 (declarationList -> declarationList declaration .)
    UNSIGNED        reduce using rule 109 (declarationList -> declarationList declaration .)
    FLOAT           reduce using rule 109 (declarationList -> declarationList declaration .)
    DOUBLE          reduce using rule 109 (declarationList -> declarationList declaration .)
    VOID            reduce using rule 109 (declarationList -> declarationList declaration .)
    CONST           reduce using rule 109 (declarationList -> declarationList declaration .)
    VOLATILE        reduce using rule 109 (declarationList -> declarationList declaration .)
    RIGHTCURLYBRACKET reduce using rule 109 (declarationList -> declarationList declaration .)
    IF              reduce using rule 109 (declarationList -> declarationList declaration .)
    SWITCH          reduce using rule 109 (declarationList -> declarationList declaration .)
    BREAK           reduce using rule 109 (declarationList -> declarationList declaration .)
    CONTINUE        reduce using rule 109 (declarationList -> declarationList declaration .)
    RETURN          reduce using rule 109 (declarationList -> declarationList declaration .)
    GOTO            reduce using rule 109 (declarationList -> declarationList declaration .)
    ID              reduce using rule 109 (declarationList -> declarationList declaration .)
    LEFTCURLYBRACKET reduce using rule 109 (declarationList -> declarationList declaration .)
    PLUSPLUS        reduce using rule 109 (declarationList -> declarationList declaration .)
    MINUSMINUS      reduce using rule 109 (declarationList -> declarationList declaration .)
    SIZEOF          reduce using rule 109 (declarationList -> declarationList declaration .)
    TIMES           reduce using rule 109 (declarationList -> declarationList declaration .)
    BIT_AND         reduce using rule 109 (declarationList -> declarationList declaration .)
    U_PLUS          reduce using rule 109 (declarationList -> declarationList declaration .)
    U_MINUS         reduce using rule 109 (declarationList -> declarationList declaration .)
    NOT             reduce using rule 109 (declarationList -> declarationList declaration .)
    BIT_NOT         reduce using rule 109 (declarationList -> declarationList declaration .)
    LPAREN          reduce using rule 109 (declarationList -> declarationList declaration .)
    CASE            reduce using rule 109 (declarationList -> declarationList declaration .)
    DEFAULT         reduce using rule 109 (declarationList -> declarationList declaration .)
    STRING          reduce using rule 109 (declarationList -> declarationList declaration .)
    INTNUM          reduce using rule 109 (declarationList -> declarationList declaration .)
    FLOATNUM        reduce using rule 109 (declarationList -> declarationList declaration .)
    CHAR_CONST      reduce using rule 109 (declarationList -> declarationList declaration .)


state 144

    (108) statementList -> empty .

    RIGHTCURLYBRACKET reduce using rule 108 (statementList -> empty .)
    IF              reduce using rule 108 (statementList -> empty .)
    SWITCH          reduce using rule 108 (statementList -> empty .)
    BREAK           reduce using rule 108 (statementList -> empty .)
    CONTINUE        reduce using rule 108 (statementList -> empty .)
    RETURN          reduce using rule 108 (statementList -> empty .)
    GOTO            reduce using rule 108 (statementList -> empty .)
    ID              reduce using rule 108 (statementList -> empty .)
    LEFTCURLYBRACKET reduce using rule 108 (statementList -> empty .)
    PLUSPLUS        reduce using rule 108 (statementList -> empty .)
    MINUSMINUS      reduce using rule 108 (statementList -> empty .)
    SIZEOF          reduce using rule 108 (statementList -> empty .)
    TIMES           reduce using rule 108 (statementList -> empty .)
    BIT_AND         reduce using rule 108 (statementList -> empty .)
    U_PLUS          reduce using rule 108 (statementList -> empty .)
    U_MINUS         reduce using rule 108 (statementList -> empty .)
    NOT             reduce using rule 108 (statementList -> empty .)
    BIT_NOT         reduce using rule 108 (statementList -> empty .)
    LPAREN          reduce using rule 108 (statementList -> empty .)
    CASE            reduce using rule 108 (statementList -> empty .)
    DEFAULT         reduce using rule 108 (statementList -> empty .)
    STRING          reduce using rule 108 (statementList -> empty .)
    INTNUM          reduce using rule 108 (statementList -> empty .)
    FLOATNUM        reduce using rule 108 (statementList -> empty .)
    CHAR_CONST      reduce using rule 108 (statementList -> empty .)


state 145

    (111) declaration -> decSpecList . initDecList TERMINAL
    (115) decSpecList -> decSpecList . decSpec
    (112) initDecList -> . initDecList COMMA markDec initDec
    (113) initDecList -> . initDec
    (133) decSpec -> . StorageClassSpec
    (134) decSpec -> . simpleTypeName
    (135) decSpec -> . typeQualifier
    (117) initDec -> . declarator
    (118) initDec -> . declarator ASSIGNMENT assignmentExpression
    (138) StorageClassSpec -> . AUTO
    (139) StorageClassSpec -> . REGISTER
    (140) StorageClassSpec -> . STATIC
    (141) StorageClassSpec -> . EXTERN
    (142) StorageClassSpec -> . TYPEDEF
    (77) simpleTypeName -> . CHAR
    (78) simpleTypeName -> . SHORT
    (79) simpleTypeName -> . INT
    (80) simpleTypeName -> . LONG
    (81) simpleTypeName -> . SIGNED
    (82) simpleTypeName -> . UNSIGNED
    (83) simpleTypeName -> . FLOAT
    (84) simpleTypeName -> . DOUBLE
    (85) simpleTypeName -> . VOID
    (136) typeQualifier -> . CONST
    (137) typeQualifier -> . VOLATILE
    (119) declarator -> . pointerList directDec
    (120) pointerList -> . pointer
    (121) pointerList -> . empty
    (122) pointer -> . star typeQualList
    (123) pointer -> . empty
    (86) empty -> .
    (124) star -> . star TIMES
    (125) star -> . TIMES

    AUTO            shift and go to state 150
    REGISTER        shift and go to state 151
    STATIC          shift and go to state 152
    EXTERN          shift and go to state 153
    TYPEDEF         shift and go to state 154
    CHAR            shift and go to state 61
    SHORT           shift and go to state 62
    INT             shift and go to state 63
    LONG            shift and go to state 64
    SIGNED          shift and go to state 65
    UNSIGNED        shift and go to state 66
    FLOAT           shift and go to state 67
    DOUBLE          shift and go to state 68
    VOID            shift and go to state 69
    CONST           shift and go to state 155
    VOLATILE        shift and go to state 156
    ID              reduce using rule 86 (empty -> .)
    TIMES           shift and go to state 199

    initDecList                    shift and go to state 191
    decSpec                        shift and go to state 192
    initDec                        shift and go to state 193
    StorageClassSpec               shift and go to state 147
    simpleTypeName                 shift and go to state 148
    typeQualifier                  shift and go to state 149
    declarator                     shift and go to state 194
    pointerList                    shift and go to state 195
    pointer                        shift and go to state 196
    empty                          shift and go to state 197
    star                           shift and go to state 198

state 146

    (116) decSpecList -> decSpec .

    AUTO            reduce using rule 116 (decSpecList -> decSpec .)
    REGISTER        reduce using rule 116 (decSpecList -> decSpec .)
    STATIC          reduce using rule 116 (decSpecList -> decSpec .)
    EXTERN          reduce using rule 116 (decSpecList -> decSpec .)
    TYPEDEF         reduce using rule 116 (decSpecList -> decSpec .)
    CHAR            reduce using rule 116 (decSpecList -> decSpec .)
    SHORT           reduce using rule 116 (decSpecList -> decSpec .)
    INT             reduce using rule 116 (decSpecList -> decSpec .)
    LONG            reduce using rule 116 (decSpecList -> decSpec .)
    SIGNED          reduce using rule 116 (decSpecList -> decSpec .)
    UNSIGNED        reduce using rule 116 (decSpecList -> decSpec .)
    FLOAT           reduce using rule 116 (decSpecList -> decSpec .)
    DOUBLE          reduce using rule 116 (decSpecList -> decSpec .)
    VOID            reduce using rule 116 (decSpecList -> decSpec .)
    CONST           reduce using rule 116 (decSpecList -> decSpec .)
    VOLATILE        reduce using rule 116 (decSpecList -> decSpec .)
    TIMES           reduce using rule 116 (decSpecList -> decSpec .)
    ID              reduce using rule 116 (decSpecList -> decSpec .)


state 147

    (133) decSpec -> StorageClassSpec .

    AUTO            reduce using rule 133 (decSpec -> StorageClassSpec .)
    REGISTER        reduce using rule 133 (decSpec -> StorageClassSpec .)
    STATIC          reduce using rule 133 (decSpec -> StorageClassSpec .)
    EXTERN          reduce using rule 133 (decSpec -> StorageClassSpec .)
    TYPEDEF         reduce using rule 133 (decSpec -> StorageClassSpec .)
    CHAR            reduce using rule 133 (decSpec -> StorageClassSpec .)
    SHORT           reduce using rule 133 (decSpec -> StorageClassSpec .)
    INT             reduce using rule 133 (decSpec -> StorageClassSpec .)
    LONG            reduce using rule 133 (decSpec -> StorageClassSpec .)
    SIGNED          reduce using rule 133 (decSpec -> StorageClassSpec .)
    UNSIGNED        reduce using rule 133 (decSpec -> StorageClassSpec .)
    FLOAT           reduce using rule 133 (decSpec -> StorageClassSpec .)
    DOUBLE          reduce using rule 133 (decSpec -> StorageClassSpec .)
    VOID            reduce using rule 133 (decSpec -> StorageClassSpec .)
    CONST           reduce using rule 133 (decSpec -> StorageClassSpec .)
    VOLATILE        reduce using rule 133 (decSpec -> StorageClassSpec .)
    TIMES           reduce using rule 133 (decSpec -> StorageClassSpec .)
    ID              reduce using rule 133 (decSpec -> StorageClassSpec .)


state 148

    (134) decSpec -> simpleTypeName .

    AUTO            reduce using rule 134 (decSpec -> simpleTypeName .)
    REGISTER        reduce using rule 134 (decSpec -> simpleTypeName .)
    STATIC          reduce using rule 134 (decSpec -> simpleTypeName .)
    EXTERN          reduce using rule 134 (decSpec -> simpleTypeName .)
    TYPEDEF         reduce using rule 134 (decSpec -> simpleTypeName .)
    CHAR            reduce using rule 134 (decSpec -> simpleTypeName .)
    SHORT           reduce using rule 134 (decSpec -> simpleTypeName .)
    INT             reduce using rule 134 (decSpec -> simpleTypeName .)
    LONG            reduce using rule 134 (decSpec -> simpleTypeName .)
    SIGNED          reduce using rule 134 (decSpec -> simpleTypeName .)
    UNSIGNED        reduce using rule 134 (decSpec -> simpleTypeName .)
    FLOAT           reduce using rule 134 (decSpec -> simpleTypeName .)
    DOUBLE          reduce using rule 134 (decSpec -> simpleTypeName .)
    VOID            reduce using rule 134 (decSpec -> simpleTypeName .)
    CONST           reduce using rule 134 (decSpec -> simpleTypeName .)
    VOLATILE        reduce using rule 134 (decSpec -> simpleTypeName .)
    TIMES           reduce using rule 134 (decSpec -> simpleTypeName .)
    ID              reduce using rule 134 (decSpec -> simpleTypeName .)


state 149

    (135) decSpec -> typeQualifier .

    AUTO            reduce using rule 135 (decSpec -> typeQualifier .)
    REGISTER        reduce using rule 135 (decSpec -> typeQualifier .)
    STATIC          reduce using rule 135 (decSpec -> typeQualifier .)
    EXTERN          reduce using rule 135 (decSpec -> typeQualifier .)
    TYPEDEF         reduce using rule 135 (decSpec -> typeQualifier .)
    CHAR            reduce using rule 135 (decSpec -> typeQualifier .)
    SHORT           reduce using rule 135 (decSpec -> typeQualifier .)
    INT             reduce using rule 135 (decSpec -> typeQualifier .)
    LONG            reduce using rule 135 (decSpec -> typeQualifier .)
    SIGNED          reduce using rule 135 (decSpec -> typeQualifier .)
    UNSIGNED        reduce using rule 135 (decSpec -> typeQualifier .)
    FLOAT           reduce using rule 135 (decSpec -> typeQualifier .)
    DOUBLE          reduce using rule 135 (decSpec -> typeQualifier .)
    VOID            reduce using rule 135 (decSpec -> typeQualifier .)
    CONST           reduce using rule 135 (decSpec -> typeQualifier .)
    VOLATILE        reduce using rule 135 (decSpec -> typeQualifier .)
    TIMES           reduce using rule 135 (decSpec -> typeQualifier .)
    ID              reduce using rule 135 (decSpec -> typeQualifier .)


state 150

    (138) StorageClassSpec -> AUTO .

    AUTO            reduce using rule 138 (StorageClassSpec -> AUTO .)
    REGISTER        reduce using rule 138 (StorageClassSpec -> AUTO .)
    STATIC          reduce using rule 138 (StorageClassSpec -> AUTO .)
    EXTERN          reduce using rule 138 (StorageClassSpec -> AUTO .)
    TYPEDEF         reduce using rule 138 (StorageClassSpec -> AUTO .)
    CHAR            reduce using rule 138 (StorageClassSpec -> AUTO .)
    SHORT           reduce using rule 138 (StorageClassSpec -> AUTO .)
    INT             reduce using rule 138 (StorageClassSpec -> AUTO .)
    LONG            reduce using rule 138 (StorageClassSpec -> AUTO .)
    SIGNED          reduce using rule 138 (StorageClassSpec -> AUTO .)
    UNSIGNED        reduce using rule 138 (StorageClassSpec -> AUTO .)
    FLOAT           reduce using rule 138 (StorageClassSpec -> AUTO .)
    DOUBLE          reduce using rule 138 (StorageClassSpec -> AUTO .)
    VOID            reduce using rule 138 (StorageClassSpec -> AUTO .)
    CONST           reduce using rule 138 (StorageClassSpec -> AUTO .)
    VOLATILE        reduce using rule 138 (StorageClassSpec -> AUTO .)
    TIMES           reduce using rule 138 (StorageClassSpec -> AUTO .)
    ID              reduce using rule 138 (StorageClassSpec -> AUTO .)


state 151

    (139) StorageClassSpec -> REGISTER .

    AUTO            reduce using rule 139 (StorageClassSpec -> REGISTER .)
    REGISTER        reduce using rule 139 (StorageClassSpec -> REGISTER .)
    STATIC          reduce using rule 139 (StorageClassSpec -> REGISTER .)
    EXTERN          reduce using rule 139 (StorageClassSpec -> REGISTER .)
    TYPEDEF         reduce using rule 139 (StorageClassSpec -> REGISTER .)
    CHAR            reduce using rule 139 (StorageClassSpec -> REGISTER .)
    SHORT           reduce using rule 139 (StorageClassSpec -> REGISTER .)
    INT             reduce using rule 139 (StorageClassSpec -> REGISTER .)
    LONG            reduce using rule 139 (StorageClassSpec -> REGISTER .)
    SIGNED          reduce using rule 139 (StorageClassSpec -> REGISTER .)
    UNSIGNED        reduce using rule 139 (StorageClassSpec -> REGISTER .)
    FLOAT           reduce using rule 139 (StorageClassSpec -> REGISTER .)
    DOUBLE          reduce using rule 139 (StorageClassSpec -> REGISTER .)
    VOID            reduce using rule 139 (StorageClassSpec -> REGISTER .)
    CONST           reduce using rule 139 (StorageClassSpec -> REGISTER .)
    VOLATILE        reduce using rule 139 (StorageClassSpec -> REGISTER .)
    TIMES           reduce using rule 139 (StorageClassSpec -> REGISTER .)
    ID              reduce using rule 139 (StorageClassSpec -> REGISTER .)


state 152

    (140) StorageClassSpec -> STATIC .

    AUTO            reduce using rule 140 (StorageClassSpec -> STATIC .)
    REGISTER        reduce using rule 140 (StorageClassSpec -> STATIC .)
    STATIC          reduce using rule 140 (StorageClassSpec -> STATIC .)
    EXTERN          reduce using rule 140 (StorageClassSpec -> STATIC .)
    TYPEDEF         reduce using rule 140 (StorageClassSpec -> STATIC .)
    CHAR            reduce using rule 140 (StorageClassSpec -> STATIC .)
    SHORT           reduce using rule 140 (StorageClassSpec -> STATIC .)
    INT             reduce using rule 140 (StorageClassSpec -> STATIC .)
    LONG            reduce using rule 140 (StorageClassSpec -> STATIC .)
    SIGNED          reduce using rule 140 (StorageClassSpec -> STATIC .)
    UNSIGNED        reduce using rule 140 (StorageClassSpec -> STATIC .)
    FLOAT           reduce using rule 140 (StorageClassSpec -> STATIC .)
    DOUBLE          reduce using rule 140 (StorageClassSpec -> STATIC .)
    VOID            reduce using rule 140 (StorageClassSpec -> STATIC .)
    CONST           reduce using rule 140 (StorageClassSpec -> STATIC .)
    VOLATILE        reduce using rule 140 (StorageClassSpec -> STATIC .)
    TIMES           reduce using rule 140 (StorageClassSpec -> STATIC .)
    ID              reduce using rule 140 (StorageClassSpec -> STATIC .)


state 153

    (141) StorageClassSpec -> EXTERN .

    AUTO            reduce using rule 141 (StorageClassSpec -> EXTERN .)
    REGISTER        reduce using rule 141 (StorageClassSpec -> EXTERN .)
    STATIC          reduce using rule 141 (StorageClassSpec -> EXTERN .)
    EXTERN          reduce using rule 141 (StorageClassSpec -> EXTERN .)
    TYPEDEF         reduce using rule 141 (StorageClassSpec -> EXTERN .)
    CHAR            reduce using rule 141 (StorageClassSpec -> EXTERN .)
    SHORT           reduce using rule 141 (StorageClassSpec -> EXTERN .)
    INT             reduce using rule 141 (StorageClassSpec -> EXTERN .)
    LONG            reduce using rule 141 (StorageClassSpec -> EXTERN .)
    SIGNED          reduce using rule 141 (StorageClassSpec -> EXTERN .)
    UNSIGNED        reduce using rule 141 (StorageClassSpec -> EXTERN .)
    FLOAT           reduce using rule 141 (StorageClassSpec -> EXTERN .)
    DOUBLE          reduce using rule 141 (StorageClassSpec -> EXTERN .)
    VOID            reduce using rule 141 (StorageClassSpec -> EXTERN .)
    CONST           reduce using rule 141 (StorageClassSpec -> EXTERN .)
    VOLATILE        reduce using rule 141 (StorageClassSpec -> EXTERN .)
    TIMES           reduce using rule 141 (StorageClassSpec -> EXTERN .)
    ID              reduce using rule 141 (StorageClassSpec -> EXTERN .)


state 154

    (142) StorageClassSpec -> TYPEDEF .

    AUTO            reduce using rule 142 (StorageClassSpec -> TYPEDEF .)
    REGISTER        reduce using rule 142 (StorageClassSpec -> TYPEDEF .)
    STATIC          reduce using rule 142 (StorageClassSpec -> TYPEDEF .)
    EXTERN          reduce using rule 142 (StorageClassSpec -> TYPEDEF .)
    TYPEDEF         reduce using rule 142 (StorageClassSpec -> TYPEDEF .)
    CHAR            reduce using rule 142 (StorageClassSpec -> TYPEDEF .)
    SHORT           reduce using rule 142 (StorageClassSpec -> TYPEDEF .)
    INT             reduce using rule 142 (StorageClassSpec -> TYPEDEF .)
    LONG            reduce using rule 142 (StorageClassSpec -> TYPEDEF .)
    SIGNED          reduce using rule 142 (StorageClassSpec -> TYPEDEF .)
    UNSIGNED        reduce using rule 142 (StorageClassSpec -> TYPEDEF .)
    FLOAT           reduce using rule 142 (StorageClassSpec -> TYPEDEF .)
    DOUBLE          reduce using rule 142 (StorageClassSpec -> TYPEDEF .)
    VOID            reduce using rule 142 (StorageClassSpec -> TYPEDEF .)
    CONST           reduce using rule 142 (StorageClassSpec -> TYPEDEF .)
    VOLATILE        reduce using rule 142 (StorageClassSpec -> TYPEDEF .)
    TIMES           reduce using rule 142 (StorageClassSpec -> TYPEDEF .)
    ID              reduce using rule 142 (StorageClassSpec -> TYPEDEF .)


state 155

    (136) typeQualifier -> CONST .

    AUTO            reduce using rule 136 (typeQualifier -> CONST .)
    REGISTER        reduce using rule 136 (typeQualifier -> CONST .)
    STATIC          reduce using rule 136 (typeQualifier -> CONST .)
    EXTERN          reduce using rule 136 (typeQualifier -> CONST .)
    TYPEDEF         reduce using rule 136 (typeQualifier -> CONST .)
    CHAR            reduce using rule 136 (typeQualifier -> CONST .)
    SHORT           reduce using rule 136 (typeQualifier -> CONST .)
    INT             reduce using rule 136 (typeQualifier -> CONST .)
    LONG            reduce using rule 136 (typeQualifier -> CONST .)
    SIGNED          reduce using rule 136 (typeQualifier -> CONST .)
    UNSIGNED        reduce using rule 136 (typeQualifier -> CONST .)
    FLOAT           reduce using rule 136 (typeQualifier -> CONST .)
    DOUBLE          reduce using rule 136 (typeQualifier -> CONST .)
    VOID            reduce using rule 136 (typeQualifier -> CONST .)
    CONST           reduce using rule 136 (typeQualifier -> CONST .)
    VOLATILE        reduce using rule 136 (typeQualifier -> CONST .)
    TIMES           reduce using rule 136 (typeQualifier -> CONST .)
    ID              reduce using rule 136 (typeQualifier -> CONST .)


state 156

    (137) typeQualifier -> VOLATILE .

    AUTO            reduce using rule 137 (typeQualifier -> VOLATILE .)
    REGISTER        reduce using rule 137 (typeQualifier -> VOLATILE .)
    STATIC          reduce using rule 137 (typeQualifier -> VOLATILE .)
    EXTERN          reduce using rule 137 (typeQualifier -> VOLATILE .)
    TYPEDEF         reduce using rule 137 (typeQualifier -> VOLATILE .)
    CHAR            reduce using rule 137 (typeQualifier -> VOLATILE .)
    SHORT           reduce using rule 137 (typeQualifier -> VOLATILE .)
    INT             reduce using rule 137 (typeQualifier -> VOLATILE .)
    LONG            reduce using rule 137 (typeQualifier -> VOLATILE .)
    SIGNED          reduce using rule 137 (typeQualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 137 (typeQualifier -> VOLATILE .)
    FLOAT           reduce using rule 137 (typeQualifier -> VOLATILE .)
    DOUBLE          reduce using rule 137 (typeQualifier -> VOLATILE .)
    VOID            reduce using rule 137 (typeQualifier -> VOLATILE .)
    CONST           reduce using rule 137 (typeQualifier -> VOLATILE .)
    VOLATILE        reduce using rule 137 (typeQualifier -> VOLATILE .)
    TIMES           reduce using rule 137 (typeQualifier -> VOLATILE .)
    ID              reduce using rule 137 (typeQualifier -> VOLATILE .)


state 157

    (143) selectionStatement -> IF LPAREN ifmark . expression RPAREN statement endifmark
    (144) selectionStatement -> IF LPAREN ifmark . expression RPAREN statement endifmark ELSE elsemark statement
    (2) expression -> . assignmentExpression
    (3) expression -> . expression COMMA assignmentExpression
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (86) empty -> .
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    expression                     shift and go to state 200
    assignmentExpression           shift and go to state 26
    conditionalExpression          shift and go to state 28
    unaryExpression                shift and go to state 29
    logicalOrExpression            shift and go to state 30
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    empty                          shift and go to state 71
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58

state 158

    (146) ifmark -> empty .

    PLUSPLUS        reduce using rule 146 (ifmark -> empty .)
    MINUSMINUS      reduce using rule 146 (ifmark -> empty .)
    SIZEOF          reduce using rule 146 (ifmark -> empty .)
    TIMES           reduce using rule 146 (ifmark -> empty .)
    BIT_AND         reduce using rule 146 (ifmark -> empty .)
    U_PLUS          reduce using rule 146 (ifmark -> empty .)
    U_MINUS         reduce using rule 146 (ifmark -> empty .)
    NOT             reduce using rule 146 (ifmark -> empty .)
    BIT_NOT         reduce using rule 146 (ifmark -> empty .)
    LPAREN          reduce using rule 146 (ifmark -> empty .)
    ID              reduce using rule 146 (ifmark -> empty .)
    STRING          reduce using rule 146 (ifmark -> empty .)
    INTNUM          reduce using rule 146 (ifmark -> empty .)
    FLOATNUM        reduce using rule 146 (ifmark -> empty .)
    CHAR_CONST      reduce using rule 146 (ifmark -> empty .)


state 159

    (145) selectionStatement -> SWITCH LPAREN switchmark . expression RPAREN statement endswitchmark
    (2) expression -> . assignmentExpression
    (3) expression -> . expression COMMA assignmentExpression
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (86) empty -> .
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    expression                     shift and go to state 201
    assignmentExpression           shift and go to state 26
    conditionalExpression          shift and go to state 28
    unaryExpression                shift and go to state 29
    logicalOrExpression            shift and go to state 30
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    empty                          shift and go to state 71
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58

state 160

    (149) switchmark -> empty .

    PLUSPLUS        reduce using rule 149 (switchmark -> empty .)
    MINUSMINUS      reduce using rule 149 (switchmark -> empty .)
    SIZEOF          reduce using rule 149 (switchmark -> empty .)
    TIMES           reduce using rule 149 (switchmark -> empty .)
    BIT_AND         reduce using rule 149 (switchmark -> empty .)
    U_PLUS          reduce using rule 149 (switchmark -> empty .)
    U_MINUS         reduce using rule 149 (switchmark -> empty .)
    NOT             reduce using rule 149 (switchmark -> empty .)
    BIT_NOT         reduce using rule 149 (switchmark -> empty .)
    LPAREN          reduce using rule 149 (switchmark -> empty .)
    ID              reduce using rule 149 (switchmark -> empty .)
    STRING          reduce using rule 149 (switchmark -> empty .)
    INTNUM          reduce using rule 149 (switchmark -> empty .)
    FLOATNUM        reduce using rule 149 (switchmark -> empty .)
    CHAR_CONST      reduce using rule 149 (switchmark -> empty .)


state 161

    (153) jumpStatement -> RETURN expression TERMINAL .

    $end            reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    RIGHTCURLYBRACKET reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    IF              reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    SWITCH          reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    BREAK           reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    CONTINUE        reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    RETURN          reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    GOTO            reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    ID              reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    LEFTCURLYBRACKET reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    PLUSPLUS        reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    MINUSMINUS      reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    SIZEOF          reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    TIMES           reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    BIT_AND         reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    U_PLUS          reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    U_MINUS         reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    NOT             reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    BIT_NOT         reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    LPAREN          reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    CASE            reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    DEFAULT         reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    STRING          reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    INTNUM          reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    FLOATNUM        reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    CHAR_CONST      reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)
    ELSE            reduce using rule 153 (jumpStatement -> RETURN expression TERMINAL .)


state 162

    (155) jumpStatement -> GOTO identifier TERMINAL .

    $end            reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    RIGHTCURLYBRACKET reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    IF              reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    SWITCH          reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    BREAK           reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    CONTINUE        reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    RETURN          reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    GOTO            reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    ID              reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    LEFTCURLYBRACKET reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    PLUSPLUS        reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    MINUSMINUS      reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    SIZEOF          reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    TIMES           reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    BIT_AND         reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    U_PLUS          reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    U_MINUS         reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    NOT             reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    BIT_NOT         reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    LPAREN          reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    CASE            reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    DEFAULT         reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    STRING          reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    INTNUM          reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    FLOATNUM        reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    CHAR_CONST      reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)
    ELSE            reduce using rule 155 (jumpStatement -> GOTO identifier TERMINAL .)


state 163

    (5) assignmentExpression -> unaryExpression assignOper assignmentExpression .

    TERMINAL        reduce using rule 5 (assignmentExpression -> unaryExpression assignOper assignmentExpression .)
    COMMA           reduce using rule 5 (assignmentExpression -> unaryExpression assignOper assignmentExpression .)
    RPAREN          reduce using rule 5 (assignmentExpression -> unaryExpression assignOper assignmentExpression .)
    COLON           reduce using rule 5 (assignmentExpression -> unaryExpression assignOper assignmentExpression .)
    RIGHTSQRBRACKET reduce using rule 5 (assignmentExpression -> unaryExpression assignOper assignmentExpression .)


state 164

    (40) conditionalExpression -> logicalOrExpression QUES_MARK expression . COLON conditionalExpression
    (3) expression -> expression . COMMA assignmentExpression

    COLON           shift and go to state 202
    COMMA           shift and go to state 78


state 165

    (42) logicalOrExpression -> logicalOrExpression OR logicalAndExpression .
    (44) logicalAndExpression -> logicalAndExpression . AND inclusiveOrExpression

    QUES_MARK       reduce using rule 42 (logicalOrExpression -> logicalOrExpression OR logicalAndExpression .)
    OR              reduce using rule 42 (logicalOrExpression -> logicalOrExpression OR logicalAndExpression .)
    TERMINAL        reduce using rule 42 (logicalOrExpression -> logicalOrExpression OR logicalAndExpression .)
    COMMA           reduce using rule 42 (logicalOrExpression -> logicalOrExpression OR logicalAndExpression .)
    RPAREN          reduce using rule 42 (logicalOrExpression -> logicalOrExpression OR logicalAndExpression .)
    COLON           reduce using rule 42 (logicalOrExpression -> logicalOrExpression OR logicalAndExpression .)
    RIGHTSQRBRACKET reduce using rule 42 (logicalOrExpression -> logicalOrExpression OR logicalAndExpression .)
    AND             shift and go to state 111


state 166

    (19) postfixExpression -> postfixExpression LEFTSQRBRACKET expression . RIGHTSQRBRACKET
    (3) expression -> expression . COMMA assignmentExpression

    RIGHTSQRBRACKET shift and go to state 203
    COMMA           shift and go to state 78


state 167

    (11) unaryExpression -> SIZEOF LPAREN simpleTypeName . RPAREN

    RPAREN          shift and go to state 204


state 168

    (44) logicalAndExpression -> logicalAndExpression AND inclusiveOrExpression .
    (46) inclusiveOrExpression -> inclusiveOrExpression . BIT_OR exclusiveOrExpression

    AND             reduce using rule 44 (logicalAndExpression -> logicalAndExpression AND inclusiveOrExpression .)
    QUES_MARK       reduce using rule 44 (logicalAndExpression -> logicalAndExpression AND inclusiveOrExpression .)
    OR              reduce using rule 44 (logicalAndExpression -> logicalAndExpression AND inclusiveOrExpression .)
    TERMINAL        reduce using rule 44 (logicalAndExpression -> logicalAndExpression AND inclusiveOrExpression .)
    COMMA           reduce using rule 44 (logicalAndExpression -> logicalAndExpression AND inclusiveOrExpression .)
    RPAREN          reduce using rule 44 (logicalAndExpression -> logicalAndExpression AND inclusiveOrExpression .)
    COLON           reduce using rule 44 (logicalAndExpression -> logicalAndExpression AND inclusiveOrExpression .)
    RIGHTSQRBRACKET reduce using rule 44 (logicalAndExpression -> logicalAndExpression AND inclusiveOrExpression .)
    BIT_OR          shift and go to state 112


state 169

    (46) inclusiveOrExpression -> inclusiveOrExpression BIT_OR exclusiveOrExpression .
    (48) exclusiveOrExpression -> exclusiveOrExpression . BIT_XOR andExpression

    BIT_OR          reduce using rule 46 (inclusiveOrExpression -> inclusiveOrExpression BIT_OR exclusiveOrExpression .)
    AND             reduce using rule 46 (inclusiveOrExpression -> inclusiveOrExpression BIT_OR exclusiveOrExpression .)
    QUES_MARK       reduce using rule 46 (inclusiveOrExpression -> inclusiveOrExpression BIT_OR exclusiveOrExpression .)
    OR              reduce using rule 46 (inclusiveOrExpression -> inclusiveOrExpression BIT_OR exclusiveOrExpression .)
    TERMINAL        reduce using rule 46 (inclusiveOrExpression -> inclusiveOrExpression BIT_OR exclusiveOrExpression .)
    COMMA           reduce using rule 46 (inclusiveOrExpression -> inclusiveOrExpression BIT_OR exclusiveOrExpression .)
    RPAREN          reduce using rule 46 (inclusiveOrExpression -> inclusiveOrExpression BIT_OR exclusiveOrExpression .)
    COLON           reduce using rule 46 (inclusiveOrExpression -> inclusiveOrExpression BIT_OR exclusiveOrExpression .)
    RIGHTSQRBRACKET reduce using rule 46 (inclusiveOrExpression -> inclusiveOrExpression BIT_OR exclusiveOrExpression .)
    BIT_XOR         shift and go to state 114


state 170

    (48) exclusiveOrExpression -> exclusiveOrExpression BIT_XOR andExpression .
    (50) andExpression -> andExpression . BIT_AND equalityExpression

    BIT_XOR         reduce using rule 48 (exclusiveOrExpression -> exclusiveOrExpression BIT_XOR andExpression .)
    BIT_OR          reduce using rule 48 (exclusiveOrExpression -> exclusiveOrExpression BIT_XOR andExpression .)
    AND             reduce using rule 48 (exclusiveOrExpression -> exclusiveOrExpression BIT_XOR andExpression .)
    QUES_MARK       reduce using rule 48 (exclusiveOrExpression -> exclusiveOrExpression BIT_XOR andExpression .)
    OR              reduce using rule 48 (exclusiveOrExpression -> exclusiveOrExpression BIT_XOR andExpression .)
    TERMINAL        reduce using rule 48 (exclusiveOrExpression -> exclusiveOrExpression BIT_XOR andExpression .)
    COMMA           reduce using rule 48 (exclusiveOrExpression -> exclusiveOrExpression BIT_XOR andExpression .)
    RPAREN          reduce using rule 48 (exclusiveOrExpression -> exclusiveOrExpression BIT_XOR andExpression .)
    COLON           reduce using rule 48 (exclusiveOrExpression -> exclusiveOrExpression BIT_XOR andExpression .)
    RIGHTSQRBRACKET reduce using rule 48 (exclusiveOrExpression -> exclusiveOrExpression BIT_XOR andExpression .)
    BIT_AND         shift and go to state 118


state 171

    (50) andExpression -> andExpression BIT_AND equalityExpression .
    (52) equalityExpression -> equalityExpression . EQUAL relationalExpression
    (53) equalityExpression -> equalityExpression . NEQUAL relationalExpression

    BIT_AND         reduce using rule 50 (andExpression -> andExpression BIT_AND equalityExpression .)
    BIT_XOR         reduce using rule 50 (andExpression -> andExpression BIT_AND equalityExpression .)
    BIT_OR          reduce using rule 50 (andExpression -> andExpression BIT_AND equalityExpression .)
    AND             reduce using rule 50 (andExpression -> andExpression BIT_AND equalityExpression .)
    QUES_MARK       reduce using rule 50 (andExpression -> andExpression BIT_AND equalityExpression .)
    OR              reduce using rule 50 (andExpression -> andExpression BIT_AND equalityExpression .)
    TERMINAL        reduce using rule 50 (andExpression -> andExpression BIT_AND equalityExpression .)
    COMMA           reduce using rule 50 (andExpression -> andExpression BIT_AND equalityExpression .)
    RPAREN          reduce using rule 50 (andExpression -> andExpression BIT_AND equalityExpression .)
    COLON           reduce using rule 50 (andExpression -> andExpression BIT_AND equalityExpression .)
    RIGHTSQRBRACKET reduce using rule 50 (andExpression -> andExpression BIT_AND equalityExpression .)
    EQUAL           shift and go to state 119
    NEQUAL          shift and go to state 120


state 172

    (52) equalityExpression -> equalityExpression EQUAL relationalExpression .
    (55) relationalExpression -> relationalExpression . LT shiftExpression
    (56) relationalExpression -> relationalExpression . GT shiftExpression
    (57) relationalExpression -> relationalExpression . LTEQ shiftExpression
    (58) relationalExpression -> relationalExpression . GTEQ shiftExpression

    EQUAL           reduce using rule 52 (equalityExpression -> equalityExpression EQUAL relationalExpression .)
    NEQUAL          reduce using rule 52 (equalityExpression -> equalityExpression EQUAL relationalExpression .)
    BIT_AND         reduce using rule 52 (equalityExpression -> equalityExpression EQUAL relationalExpression .)
    BIT_XOR         reduce using rule 52 (equalityExpression -> equalityExpression EQUAL relationalExpression .)
    BIT_OR          reduce using rule 52 (equalityExpression -> equalityExpression EQUAL relationalExpression .)
    AND             reduce using rule 52 (equalityExpression -> equalityExpression EQUAL relationalExpression .)
    QUES_MARK       reduce using rule 52 (equalityExpression -> equalityExpression EQUAL relationalExpression .)
    OR              reduce using rule 52 (equalityExpression -> equalityExpression EQUAL relationalExpression .)
    TERMINAL        reduce using rule 52 (equalityExpression -> equalityExpression EQUAL relationalExpression .)
    COMMA           reduce using rule 52 (equalityExpression -> equalityExpression EQUAL relationalExpression .)
    RPAREN          reduce using rule 52 (equalityExpression -> equalityExpression EQUAL relationalExpression .)
    COLON           reduce using rule 52 (equalityExpression -> equalityExpression EQUAL relationalExpression .)
    RIGHTSQRBRACKET reduce using rule 52 (equalityExpression -> equalityExpression EQUAL relationalExpression .)
    LT              shift and go to state 121
    GT              shift and go to state 122
    LTEQ            shift and go to state 123
    GTEQ            shift and go to state 124


state 173

    (53) equalityExpression -> equalityExpression NEQUAL relationalExpression .
    (55) relationalExpression -> relationalExpression . LT shiftExpression
    (56) relationalExpression -> relationalExpression . GT shiftExpression
    (57) relationalExpression -> relationalExpression . LTEQ shiftExpression
    (58) relationalExpression -> relationalExpression . GTEQ shiftExpression

    EQUAL           reduce using rule 53 (equalityExpression -> equalityExpression NEQUAL relationalExpression .)
    NEQUAL          reduce using rule 53 (equalityExpression -> equalityExpression NEQUAL relationalExpression .)
    BIT_AND         reduce using rule 53 (equalityExpression -> equalityExpression NEQUAL relationalExpression .)
    BIT_XOR         reduce using rule 53 (equalityExpression -> equalityExpression NEQUAL relationalExpression .)
    BIT_OR          reduce using rule 53 (equalityExpression -> equalityExpression NEQUAL relationalExpression .)
    AND             reduce using rule 53 (equalityExpression -> equalityExpression NEQUAL relationalExpression .)
    QUES_MARK       reduce using rule 53 (equalityExpression -> equalityExpression NEQUAL relationalExpression .)
    OR              reduce using rule 53 (equalityExpression -> equalityExpression NEQUAL relationalExpression .)
    TERMINAL        reduce using rule 53 (equalityExpression -> equalityExpression NEQUAL relationalExpression .)
    COMMA           reduce using rule 53 (equalityExpression -> equalityExpression NEQUAL relationalExpression .)
    RPAREN          reduce using rule 53 (equalityExpression -> equalityExpression NEQUAL relationalExpression .)
    COLON           reduce using rule 53 (equalityExpression -> equalityExpression NEQUAL relationalExpression .)
    RIGHTSQRBRACKET reduce using rule 53 (equalityExpression -> equalityExpression NEQUAL relationalExpression .)
    LT              shift and go to state 121
    GT              shift and go to state 122
    LTEQ            shift and go to state 123
    GTEQ            shift and go to state 124


state 174

    (55) relationalExpression -> relationalExpression LT shiftExpression .
    (60) shiftExpression -> shiftExpression . LSHIFT additiveExpression
    (61) shiftExpression -> shiftExpression . RSHIFT additiveExpression

    LT              reduce using rule 55 (relationalExpression -> relationalExpression LT shiftExpression .)
    GT              reduce using rule 55 (relationalExpression -> relationalExpression LT shiftExpression .)
    LTEQ            reduce using rule 55 (relationalExpression -> relationalExpression LT shiftExpression .)
    GTEQ            reduce using rule 55 (relationalExpression -> relationalExpression LT shiftExpression .)
    EQUAL           reduce using rule 55 (relationalExpression -> relationalExpression LT shiftExpression .)
    NEQUAL          reduce using rule 55 (relationalExpression -> relationalExpression LT shiftExpression .)
    BIT_AND         reduce using rule 55 (relationalExpression -> relationalExpression LT shiftExpression .)
    BIT_XOR         reduce using rule 55 (relationalExpression -> relationalExpression LT shiftExpression .)
    BIT_OR          reduce using rule 55 (relationalExpression -> relationalExpression LT shiftExpression .)
    AND             reduce using rule 55 (relationalExpression -> relationalExpression LT shiftExpression .)
    QUES_MARK       reduce using rule 55 (relationalExpression -> relationalExpression LT shiftExpression .)
    OR              reduce using rule 55 (relationalExpression -> relationalExpression LT shiftExpression .)
    TERMINAL        reduce using rule 55 (relationalExpression -> relationalExpression LT shiftExpression .)
    COMMA           reduce using rule 55 (relationalExpression -> relationalExpression LT shiftExpression .)
    RPAREN          reduce using rule 55 (relationalExpression -> relationalExpression LT shiftExpression .)
    COLON           reduce using rule 55 (relationalExpression -> relationalExpression LT shiftExpression .)
    RIGHTSQRBRACKET reduce using rule 55 (relationalExpression -> relationalExpression LT shiftExpression .)
    LSHIFT          shift and go to state 125
    RSHIFT          shift and go to state 126


state 175

    (56) relationalExpression -> relationalExpression GT shiftExpression .
    (60) shiftExpression -> shiftExpression . LSHIFT additiveExpression
    (61) shiftExpression -> shiftExpression . RSHIFT additiveExpression

    LT              reduce using rule 56 (relationalExpression -> relationalExpression GT shiftExpression .)
    GT              reduce using rule 56 (relationalExpression -> relationalExpression GT shiftExpression .)
    LTEQ            reduce using rule 56 (relationalExpression -> relationalExpression GT shiftExpression .)
    GTEQ            reduce using rule 56 (relationalExpression -> relationalExpression GT shiftExpression .)
    EQUAL           reduce using rule 56 (relationalExpression -> relationalExpression GT shiftExpression .)
    NEQUAL          reduce using rule 56 (relationalExpression -> relationalExpression GT shiftExpression .)
    BIT_AND         reduce using rule 56 (relationalExpression -> relationalExpression GT shiftExpression .)
    BIT_XOR         reduce using rule 56 (relationalExpression -> relationalExpression GT shiftExpression .)
    BIT_OR          reduce using rule 56 (relationalExpression -> relationalExpression GT shiftExpression .)
    AND             reduce using rule 56 (relationalExpression -> relationalExpression GT shiftExpression .)
    QUES_MARK       reduce using rule 56 (relationalExpression -> relationalExpression GT shiftExpression .)
    OR              reduce using rule 56 (relationalExpression -> relationalExpression GT shiftExpression .)
    TERMINAL        reduce using rule 56 (relationalExpression -> relationalExpression GT shiftExpression .)
    COMMA           reduce using rule 56 (relationalExpression -> relationalExpression GT shiftExpression .)
    RPAREN          reduce using rule 56 (relationalExpression -> relationalExpression GT shiftExpression .)
    COLON           reduce using rule 56 (relationalExpression -> relationalExpression GT shiftExpression .)
    RIGHTSQRBRACKET reduce using rule 56 (relationalExpression -> relationalExpression GT shiftExpression .)
    LSHIFT          shift and go to state 125
    RSHIFT          shift and go to state 126


state 176

    (57) relationalExpression -> relationalExpression LTEQ shiftExpression .
    (60) shiftExpression -> shiftExpression . LSHIFT additiveExpression
    (61) shiftExpression -> shiftExpression . RSHIFT additiveExpression

    LT              reduce using rule 57 (relationalExpression -> relationalExpression LTEQ shiftExpression .)
    GT              reduce using rule 57 (relationalExpression -> relationalExpression LTEQ shiftExpression .)
    LTEQ            reduce using rule 57 (relationalExpression -> relationalExpression LTEQ shiftExpression .)
    GTEQ            reduce using rule 57 (relationalExpression -> relationalExpression LTEQ shiftExpression .)
    EQUAL           reduce using rule 57 (relationalExpression -> relationalExpression LTEQ shiftExpression .)
    NEQUAL          reduce using rule 57 (relationalExpression -> relationalExpression LTEQ shiftExpression .)
    BIT_AND         reduce using rule 57 (relationalExpression -> relationalExpression LTEQ shiftExpression .)
    BIT_XOR         reduce using rule 57 (relationalExpression -> relationalExpression LTEQ shiftExpression .)
    BIT_OR          reduce using rule 57 (relationalExpression -> relationalExpression LTEQ shiftExpression .)
    AND             reduce using rule 57 (relationalExpression -> relationalExpression LTEQ shiftExpression .)
    QUES_MARK       reduce using rule 57 (relationalExpression -> relationalExpression LTEQ shiftExpression .)
    OR              reduce using rule 57 (relationalExpression -> relationalExpression LTEQ shiftExpression .)
    TERMINAL        reduce using rule 57 (relationalExpression -> relationalExpression LTEQ shiftExpression .)
    COMMA           reduce using rule 57 (relationalExpression -> relationalExpression LTEQ shiftExpression .)
    RPAREN          reduce using rule 57 (relationalExpression -> relationalExpression LTEQ shiftExpression .)
    COLON           reduce using rule 57 (relationalExpression -> relationalExpression LTEQ shiftExpression .)
    RIGHTSQRBRACKET reduce using rule 57 (relationalExpression -> relationalExpression LTEQ shiftExpression .)
    LSHIFT          shift and go to state 125
    RSHIFT          shift and go to state 126


state 177

    (58) relationalExpression -> relationalExpression GTEQ shiftExpression .
    (60) shiftExpression -> shiftExpression . LSHIFT additiveExpression
    (61) shiftExpression -> shiftExpression . RSHIFT additiveExpression

    LT              reduce using rule 58 (relationalExpression -> relationalExpression GTEQ shiftExpression .)
    GT              reduce using rule 58 (relationalExpression -> relationalExpression GTEQ shiftExpression .)
    LTEQ            reduce using rule 58 (relationalExpression -> relationalExpression GTEQ shiftExpression .)
    GTEQ            reduce using rule 58 (relationalExpression -> relationalExpression GTEQ shiftExpression .)
    EQUAL           reduce using rule 58 (relationalExpression -> relationalExpression GTEQ shiftExpression .)
    NEQUAL          reduce using rule 58 (relationalExpression -> relationalExpression GTEQ shiftExpression .)
    BIT_AND         reduce using rule 58 (relationalExpression -> relationalExpression GTEQ shiftExpression .)
    BIT_XOR         reduce using rule 58 (relationalExpression -> relationalExpression GTEQ shiftExpression .)
    BIT_OR          reduce using rule 58 (relationalExpression -> relationalExpression GTEQ shiftExpression .)
    AND             reduce using rule 58 (relationalExpression -> relationalExpression GTEQ shiftExpression .)
    QUES_MARK       reduce using rule 58 (relationalExpression -> relationalExpression GTEQ shiftExpression .)
    OR              reduce using rule 58 (relationalExpression -> relationalExpression GTEQ shiftExpression .)
    TERMINAL        reduce using rule 58 (relationalExpression -> relationalExpression GTEQ shiftExpression .)
    COMMA           reduce using rule 58 (relationalExpression -> relationalExpression GTEQ shiftExpression .)
    RPAREN          reduce using rule 58 (relationalExpression -> relationalExpression GTEQ shiftExpression .)
    COLON           reduce using rule 58 (relationalExpression -> relationalExpression GTEQ shiftExpression .)
    RIGHTSQRBRACKET reduce using rule 58 (relationalExpression -> relationalExpression GTEQ shiftExpression .)
    LSHIFT          shift and go to state 125
    RSHIFT          shift and go to state 126


state 178

    (60) shiftExpression -> shiftExpression LSHIFT additiveExpression .
    (63) additiveExpression -> additiveExpression . U_PLUS multiplicativeExpression
    (64) additiveExpression -> additiveExpression . U_MINUS multiplicativeExpression

    LSHIFT          reduce using rule 60 (shiftExpression -> shiftExpression LSHIFT additiveExpression .)
    RSHIFT          reduce using rule 60 (shiftExpression -> shiftExpression LSHIFT additiveExpression .)
    LT              reduce using rule 60 (shiftExpression -> shiftExpression LSHIFT additiveExpression .)
    GT              reduce using rule 60 (shiftExpression -> shiftExpression LSHIFT additiveExpression .)
    LTEQ            reduce using rule 60 (shiftExpression -> shiftExpression LSHIFT additiveExpression .)
    GTEQ            reduce using rule 60 (shiftExpression -> shiftExpression LSHIFT additiveExpression .)
    EQUAL           reduce using rule 60 (shiftExpression -> shiftExpression LSHIFT additiveExpression .)
    NEQUAL          reduce using rule 60 (shiftExpression -> shiftExpression LSHIFT additiveExpression .)
    BIT_AND         reduce using rule 60 (shiftExpression -> shiftExpression LSHIFT additiveExpression .)
    BIT_XOR         reduce using rule 60 (shiftExpression -> shiftExpression LSHIFT additiveExpression .)
    BIT_OR          reduce using rule 60 (shiftExpression -> shiftExpression LSHIFT additiveExpression .)
    AND             reduce using rule 60 (shiftExpression -> shiftExpression LSHIFT additiveExpression .)
    QUES_MARK       reduce using rule 60 (shiftExpression -> shiftExpression LSHIFT additiveExpression .)
    OR              reduce using rule 60 (shiftExpression -> shiftExpression LSHIFT additiveExpression .)
    TERMINAL        reduce using rule 60 (shiftExpression -> shiftExpression LSHIFT additiveExpression .)
    COMMA           reduce using rule 60 (shiftExpression -> shiftExpression LSHIFT additiveExpression .)
    RPAREN          reduce using rule 60 (shiftExpression -> shiftExpression LSHIFT additiveExpression .)
    COLON           reduce using rule 60 (shiftExpression -> shiftExpression LSHIFT additiveExpression .)
    RIGHTSQRBRACKET reduce using rule 60 (shiftExpression -> shiftExpression LSHIFT additiveExpression .)
    U_PLUS          shift and go to state 127
    U_MINUS         shift and go to state 128


state 179

    (61) shiftExpression -> shiftExpression RSHIFT additiveExpression .
    (63) additiveExpression -> additiveExpression . U_PLUS multiplicativeExpression
    (64) additiveExpression -> additiveExpression . U_MINUS multiplicativeExpression

    LSHIFT          reduce using rule 61 (shiftExpression -> shiftExpression RSHIFT additiveExpression .)
    RSHIFT          reduce using rule 61 (shiftExpression -> shiftExpression RSHIFT additiveExpression .)
    LT              reduce using rule 61 (shiftExpression -> shiftExpression RSHIFT additiveExpression .)
    GT              reduce using rule 61 (shiftExpression -> shiftExpression RSHIFT additiveExpression .)
    LTEQ            reduce using rule 61 (shiftExpression -> shiftExpression RSHIFT additiveExpression .)
    GTEQ            reduce using rule 61 (shiftExpression -> shiftExpression RSHIFT additiveExpression .)
    EQUAL           reduce using rule 61 (shiftExpression -> shiftExpression RSHIFT additiveExpression .)
    NEQUAL          reduce using rule 61 (shiftExpression -> shiftExpression RSHIFT additiveExpression .)
    BIT_AND         reduce using rule 61 (shiftExpression -> shiftExpression RSHIFT additiveExpression .)
    BIT_XOR         reduce using rule 61 (shiftExpression -> shiftExpression RSHIFT additiveExpression .)
    BIT_OR          reduce using rule 61 (shiftExpression -> shiftExpression RSHIFT additiveExpression .)
    AND             reduce using rule 61 (shiftExpression -> shiftExpression RSHIFT additiveExpression .)
    QUES_MARK       reduce using rule 61 (shiftExpression -> shiftExpression RSHIFT additiveExpression .)
    OR              reduce using rule 61 (shiftExpression -> shiftExpression RSHIFT additiveExpression .)
    TERMINAL        reduce using rule 61 (shiftExpression -> shiftExpression RSHIFT additiveExpression .)
    COMMA           reduce using rule 61 (shiftExpression -> shiftExpression RSHIFT additiveExpression .)
    RPAREN          reduce using rule 61 (shiftExpression -> shiftExpression RSHIFT additiveExpression .)
    COLON           reduce using rule 61 (shiftExpression -> shiftExpression RSHIFT additiveExpression .)
    RIGHTSQRBRACKET reduce using rule 61 (shiftExpression -> shiftExpression RSHIFT additiveExpression .)
    U_PLUS          shift and go to state 127
    U_MINUS         shift and go to state 128


state 180

    (63) additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .
    (66) multiplicativeExpression -> multiplicativeExpression . TIMES castExpression
    (67) multiplicativeExpression -> multiplicativeExpression . DIVIDE castExpression
    (68) multiplicativeExpression -> multiplicativeExpression . MOD castExpression

    U_PLUS          reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    U_MINUS         reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    LSHIFT          reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    RSHIFT          reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    LT              reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    GT              reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    LTEQ            reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    GTEQ            reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    EQUAL           reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    NEQUAL          reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    BIT_AND         reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    BIT_XOR         reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    BIT_OR          reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    AND             reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    QUES_MARK       reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    OR              reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    TERMINAL        reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    COMMA           reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    RPAREN          reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    COLON           reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    RIGHTSQRBRACKET reduce using rule 63 (additiveExpression -> additiveExpression U_PLUS multiplicativeExpression .)
    TIMES           shift and go to state 129
    DIVIDE          shift and go to state 130
    MOD             shift and go to state 131


state 181

    (64) additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .
    (66) multiplicativeExpression -> multiplicativeExpression . TIMES castExpression
    (67) multiplicativeExpression -> multiplicativeExpression . DIVIDE castExpression
    (68) multiplicativeExpression -> multiplicativeExpression . MOD castExpression

    U_PLUS          reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    U_MINUS         reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    LSHIFT          reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    RSHIFT          reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    LT              reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    GT              reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    LTEQ            reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    GTEQ            reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    EQUAL           reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    NEQUAL          reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    BIT_AND         reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    BIT_XOR         reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    BIT_OR          reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    AND             reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    QUES_MARK       reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    OR              reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    TERMINAL        reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    COMMA           reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    RPAREN          reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    COLON           reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    RIGHTSQRBRACKET reduce using rule 64 (additiveExpression -> additiveExpression U_MINUS multiplicativeExpression .)
    TIMES           shift and go to state 129
    DIVIDE          shift and go to state 130
    MOD             shift and go to state 131


state 182

    (66) multiplicativeExpression -> multiplicativeExpression TIMES castExpression .

    TIMES           reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    DIVIDE          reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    MOD             reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    U_PLUS          reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    U_MINUS         reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    LSHIFT          reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    RSHIFT          reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    LT              reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    GT              reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    LTEQ            reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    GTEQ            reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    EQUAL           reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    NEQUAL          reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    BIT_AND         reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    BIT_XOR         reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    BIT_OR          reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    AND             reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    QUES_MARK       reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    OR              reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    TERMINAL        reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    COMMA           reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    RPAREN          reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    COLON           reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)
    RIGHTSQRBRACKET reduce using rule 66 (multiplicativeExpression -> multiplicativeExpression TIMES castExpression .)


state 183

    (67) multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .

    TIMES           reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    DIVIDE          reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    MOD             reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    U_PLUS          reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    U_MINUS         reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    LSHIFT          reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    RSHIFT          reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    LT              reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    GT              reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    LTEQ            reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    GTEQ            reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    EQUAL           reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    NEQUAL          reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    BIT_AND         reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    BIT_XOR         reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    BIT_OR          reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    AND             reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    QUES_MARK       reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    OR              reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    TERMINAL        reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    COMMA           reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    RPAREN          reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    COLON           reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)
    RIGHTSQRBRACKET reduce using rule 67 (multiplicativeExpression -> multiplicativeExpression DIVIDE castExpression .)


state 184

    (68) multiplicativeExpression -> multiplicativeExpression MOD castExpression .

    TIMES           reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    DIVIDE          reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    MOD             reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    U_PLUS          reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    U_MINUS         reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    LSHIFT          reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    RSHIFT          reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    LT              reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    GT              reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    LTEQ            reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    GTEQ            reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    EQUAL           reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    NEQUAL          reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    BIT_AND         reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    BIT_XOR         reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    BIT_OR          reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    AND             reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    QUES_MARK       reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    OR              reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    TERMINAL        reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    COMMA           reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    RPAREN          reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    COLON           reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)
    RIGHTSQRBRACKET reduce using rule 68 (multiplicativeExpression -> multiplicativeExpression MOD castExpression .)


state 185

    (70) castExpression -> LPAREN simpleTypeName RPAREN castExpression .

    TIMES           reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    DIVIDE          reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    MOD             reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    U_PLUS          reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    U_MINUS         reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    LSHIFT          reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    RSHIFT          reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    LT              reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    GT              reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    LTEQ            reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    GTEQ            reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    EQUAL           reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    NEQUAL          reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    BIT_AND         reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    BIT_XOR         reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    BIT_OR          reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    AND             reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    QUES_MARK       reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    OR              reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    TERMINAL        reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    COMMA           reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    RPAREN          reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    COLON           reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)
    RIGHTSQRBRACKET reduce using rule 70 (castExpression -> LPAREN simpleTypeName RPAREN castExpression .)


state 186

    (94) caseList -> caseList CASE constantExpression COLON . statement
    (87) statement -> . labeledStatement
    (88) statement -> . expressionStatement
    (89) statement -> . compoundStatement
    (90) statement -> . selectionStatement
    (91) statement -> . jumpStatement
    (92) labeledStatement -> . identifier COLON statement
    (93) labeledStatement -> . caseList default
    (101) expressionStatement -> . expression TERMINAL
    (102) expressionStatement -> . empty
    (103) compoundStatement -> . oscope declarationList statementList cscope
    (104) compoundStatement -> . empty
    (143) selectionStatement -> . IF LPAREN ifmark expression RPAREN statement endifmark
    (144) selectionStatement -> . IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement
    (145) selectionStatement -> . SWITCH LPAREN switchmark expression RPAREN statement endswitchmark
    (151) jumpStatement -> . BREAK TERMINAL
    (152) jumpStatement -> . CONTINUE TERMINAL
    (153) jumpStatement -> . RETURN expression TERMINAL
    (154) jumpStatement -> . RETURN TERMINAL
    (155) jumpStatement -> . GOTO identifier TERMINAL
    (132) identifier -> . ID
    (94) caseList -> . caseList CASE constantExpression COLON statement
    (95) caseList -> . empty
    (2) expression -> . assignmentExpression
    (3) expression -> . expression COMMA assignmentExpression
    (86) empty -> .
    (105) oscope -> . LEFTCURLYBRACKET
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTCURLYBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for SIZEOF resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for U_PLUS resolved as shift
  ! shift/reduce conflict for U_MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BIT_NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for STRING resolved using rule 17 (markstr -> .)
    IF              shift and go to state 19
    SWITCH          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    RETURN          shift and go to state 23
    GOTO            shift and go to state 24
    ID              shift and go to state 25
    $end            reduce using rule 86 (empty -> .)
    RIGHTCURLYBRACKET reduce using rule 86 (empty -> .)
    CASE            reduce using rule 86 (empty -> .)
    DEFAULT         reduce using rule 86 (empty -> .)
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)
    LEFTCURLYBRACKET shift and go to state 27
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)

  ! IF              [ reduce using rule 86 (empty -> .) ]
  ! SWITCH          [ reduce using rule 86 (empty -> .) ]
  ! BREAK           [ reduce using rule 86 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 86 (empty -> .) ]
  ! RETURN          [ reduce using rule 86 (empty -> .) ]
  ! GOTO            [ reduce using rule 86 (empty -> .) ]
  ! ID              [ reduce using rule 86 (empty -> .) ]
  ! LEFTCURLYBRACKET [ reduce using rule 86 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 86 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 86 (empty -> .) ]
  ! SIZEOF          [ reduce using rule 86 (empty -> .) ]
  ! TIMES           [ reduce using rule 86 (empty -> .) ]
  ! BIT_AND         [ reduce using rule 86 (empty -> .) ]
  ! U_PLUS          [ reduce using rule 86 (empty -> .) ]
  ! U_MINUS         [ reduce using rule 86 (empty -> .) ]
  ! NOT             [ reduce using rule 86 (empty -> .) ]
  ! BIT_NOT         [ reduce using rule 86 (empty -> .) ]
  ! LPAREN          [ reduce using rule 86 (empty -> .) ]
  ! STRING          [ reduce using rule 86 (empty -> .) ]

    caseList                       shift and go to state 15
    statement                      shift and go to state 205
    labeledStatement               shift and go to state 9
    expressionStatement            shift and go to state 10
    compoundStatement              shift and go to state 11
    selectionStatement             shift and go to state 12
    jumpStatement                  shift and go to state 13
    identifier                     shift and go to state 14
    expression                     shift and go to state 16
    empty                          shift and go to state 17
    oscope                         shift and go to state 18
    assignmentExpression           shift and go to state 26
    conditionalExpression          shift and go to state 28
    unaryExpression                shift and go to state 29
    logicalOrExpression            shift and go to state 30
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58

state 187

    (96) default -> DEFAULT defaultmark COLON . statement enddefault
    (87) statement -> . labeledStatement
    (88) statement -> . expressionStatement
    (89) statement -> . compoundStatement
    (90) statement -> . selectionStatement
    (91) statement -> . jumpStatement
    (92) labeledStatement -> . identifier COLON statement
    (93) labeledStatement -> . caseList default
    (101) expressionStatement -> . expression TERMINAL
    (102) expressionStatement -> . empty
    (103) compoundStatement -> . oscope declarationList statementList cscope
    (104) compoundStatement -> . empty
    (143) selectionStatement -> . IF LPAREN ifmark expression RPAREN statement endifmark
    (144) selectionStatement -> . IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement
    (145) selectionStatement -> . SWITCH LPAREN switchmark expression RPAREN statement endswitchmark
    (151) jumpStatement -> . BREAK TERMINAL
    (152) jumpStatement -> . CONTINUE TERMINAL
    (153) jumpStatement -> . RETURN expression TERMINAL
    (154) jumpStatement -> . RETURN TERMINAL
    (155) jumpStatement -> . GOTO identifier TERMINAL
    (132) identifier -> . ID
    (94) caseList -> . caseList CASE constantExpression COLON statement
    (95) caseList -> . empty
    (2) expression -> . assignmentExpression
    (3) expression -> . expression COMMA assignmentExpression
    (86) empty -> .
    (105) oscope -> . LEFTCURLYBRACKET
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTCURLYBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for SIZEOF resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for U_PLUS resolved as shift
  ! shift/reduce conflict for U_MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BIT_NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for STRING resolved using rule 17 (markstr -> .)
    IF              shift and go to state 19
    SWITCH          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    RETURN          shift and go to state 23
    GOTO            shift and go to state 24
    ID              shift and go to state 25
    $end            reduce using rule 86 (empty -> .)
    RIGHTCURLYBRACKET reduce using rule 86 (empty -> .)
    CASE            reduce using rule 86 (empty -> .)
    DEFAULT         reduce using rule 86 (empty -> .)
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)
    LEFTCURLYBRACKET shift and go to state 27
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)

  ! IF              [ reduce using rule 86 (empty -> .) ]
  ! SWITCH          [ reduce using rule 86 (empty -> .) ]
  ! BREAK           [ reduce using rule 86 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 86 (empty -> .) ]
  ! RETURN          [ reduce using rule 86 (empty -> .) ]
  ! GOTO            [ reduce using rule 86 (empty -> .) ]
  ! ID              [ reduce using rule 86 (empty -> .) ]
  ! LEFTCURLYBRACKET [ reduce using rule 86 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 86 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 86 (empty -> .) ]
  ! SIZEOF          [ reduce using rule 86 (empty -> .) ]
  ! TIMES           [ reduce using rule 86 (empty -> .) ]
  ! BIT_AND         [ reduce using rule 86 (empty -> .) ]
  ! U_PLUS          [ reduce using rule 86 (empty -> .) ]
  ! U_MINUS         [ reduce using rule 86 (empty -> .) ]
  ! NOT             [ reduce using rule 86 (empty -> .) ]
  ! BIT_NOT         [ reduce using rule 86 (empty -> .) ]
  ! LPAREN          [ reduce using rule 86 (empty -> .) ]
  ! STRING          [ reduce using rule 86 (empty -> .) ]

    statement                      shift and go to state 206
    labeledStatement               shift and go to state 9
    expressionStatement            shift and go to state 10
    compoundStatement              shift and go to state 11
    selectionStatement             shift and go to state 12
    jumpStatement                  shift and go to state 13
    identifier                     shift and go to state 14
    caseList                       shift and go to state 15
    expression                     shift and go to state 16
    empty                          shift and go to state 17
    oscope                         shift and go to state 18
    assignmentExpression           shift and go to state 26
    conditionalExpression          shift and go to state 28
    unaryExpression                shift and go to state 29
    logicalOrExpression            shift and go to state 30
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58

state 188

    (103) compoundStatement -> oscope declarationList statementList cscope .

    $end            reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    RIGHTCURLYBRACKET reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    IF              reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    SWITCH          reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    BREAK           reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    CONTINUE        reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    RETURN          reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    GOTO            reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    ID              reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    LEFTCURLYBRACKET reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    PLUSPLUS        reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    MINUSMINUS      reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    SIZEOF          reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    TIMES           reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    BIT_AND         reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    U_PLUS          reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    U_MINUS         reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    NOT             reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    BIT_NOT         reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    LPAREN          reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    CASE            reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    DEFAULT         reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    STRING          reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    INTNUM          reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    FLOATNUM        reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    CHAR_CONST      reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)
    ELSE            reduce using rule 103 (compoundStatement -> oscope declarationList statementList cscope .)


state 189

    (107) statementList -> statementList statement .

    RIGHTCURLYBRACKET reduce using rule 107 (statementList -> statementList statement .)
    IF              reduce using rule 107 (statementList -> statementList statement .)
    SWITCH          reduce using rule 107 (statementList -> statementList statement .)
    BREAK           reduce using rule 107 (statementList -> statementList statement .)
    CONTINUE        reduce using rule 107 (statementList -> statementList statement .)
    RETURN          reduce using rule 107 (statementList -> statementList statement .)
    GOTO            reduce using rule 107 (statementList -> statementList statement .)
    ID              reduce using rule 107 (statementList -> statementList statement .)
    LEFTCURLYBRACKET reduce using rule 107 (statementList -> statementList statement .)
    PLUSPLUS        reduce using rule 107 (statementList -> statementList statement .)
    MINUSMINUS      reduce using rule 107 (statementList -> statementList statement .)
    SIZEOF          reduce using rule 107 (statementList -> statementList statement .)
    TIMES           reduce using rule 107 (statementList -> statementList statement .)
    BIT_AND         reduce using rule 107 (statementList -> statementList statement .)
    U_PLUS          reduce using rule 107 (statementList -> statementList statement .)
    U_MINUS         reduce using rule 107 (statementList -> statementList statement .)
    NOT             reduce using rule 107 (statementList -> statementList statement .)
    BIT_NOT         reduce using rule 107 (statementList -> statementList statement .)
    LPAREN          reduce using rule 107 (statementList -> statementList statement .)
    CASE            reduce using rule 107 (statementList -> statementList statement .)
    DEFAULT         reduce using rule 107 (statementList -> statementList statement .)
    STRING          reduce using rule 107 (statementList -> statementList statement .)
    INTNUM          reduce using rule 107 (statementList -> statementList statement .)
    FLOATNUM        reduce using rule 107 (statementList -> statementList statement .)
    CHAR_CONST      reduce using rule 107 (statementList -> statementList statement .)


state 190

    (106) cscope -> RIGHTCURLYBRACKET .

    $end            reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    RIGHTCURLYBRACKET reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    IF              reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    SWITCH          reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    BREAK           reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    CONTINUE        reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    RETURN          reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    GOTO            reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    ID              reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    LEFTCURLYBRACKET reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    PLUSPLUS        reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    MINUSMINUS      reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    SIZEOF          reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    TIMES           reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    BIT_AND         reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    U_PLUS          reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    U_MINUS         reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    NOT             reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    BIT_NOT         reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    LPAREN          reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    CASE            reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    DEFAULT         reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    STRING          reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    INTNUM          reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    FLOATNUM        reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    CHAR_CONST      reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)
    ELSE            reduce using rule 106 (cscope -> RIGHTCURLYBRACKET .)


state 191

    (111) declaration -> decSpecList initDecList . TERMINAL
    (112) initDecList -> initDecList . COMMA markDec initDec

    TERMINAL        shift and go to state 207
    COMMA           shift and go to state 208


state 192

    (115) decSpecList -> decSpecList decSpec .

    AUTO            reduce using rule 115 (decSpecList -> decSpecList decSpec .)
    REGISTER        reduce using rule 115 (decSpecList -> decSpecList decSpec .)
    STATIC          reduce using rule 115 (decSpecList -> decSpecList decSpec .)
    EXTERN          reduce using rule 115 (decSpecList -> decSpecList decSpec .)
    TYPEDEF         reduce using rule 115 (decSpecList -> decSpecList decSpec .)
    CHAR            reduce using rule 115 (decSpecList -> decSpecList decSpec .)
    SHORT           reduce using rule 115 (decSpecList -> decSpecList decSpec .)
    INT             reduce using rule 115 (decSpecList -> decSpecList decSpec .)
    LONG            reduce using rule 115 (decSpecList -> decSpecList decSpec .)
    SIGNED          reduce using rule 115 (decSpecList -> decSpecList decSpec .)
    UNSIGNED        reduce using rule 115 (decSpecList -> decSpecList decSpec .)
    FLOAT           reduce using rule 115 (decSpecList -> decSpecList decSpec .)
    DOUBLE          reduce using rule 115 (decSpecList -> decSpecList decSpec .)
    VOID            reduce using rule 115 (decSpecList -> decSpecList decSpec .)
    CONST           reduce using rule 115 (decSpecList -> decSpecList decSpec .)
    VOLATILE        reduce using rule 115 (decSpecList -> decSpecList decSpec .)
    TIMES           reduce using rule 115 (decSpecList -> decSpecList decSpec .)
    ID              reduce using rule 115 (decSpecList -> decSpecList decSpec .)


state 193

    (113) initDecList -> initDec .

    TERMINAL        reduce using rule 113 (initDecList -> initDec .)
    COMMA           reduce using rule 113 (initDecList -> initDec .)


state 194

    (117) initDec -> declarator .
    (118) initDec -> declarator . ASSIGNMENT assignmentExpression

    TERMINAL        reduce using rule 117 (initDec -> declarator .)
    COMMA           reduce using rule 117 (initDec -> declarator .)
    ASSIGNMENT      shift and go to state 209


state 195

    (119) declarator -> pointerList . directDec
    (128) directDec -> . identifier
    (129) directDec -> . identifier arrayDec
    (132) identifier -> . ID

    ID              shift and go to state 25

    directDec                      shift and go to state 210
    identifier                     shift and go to state 211

state 196

    (120) pointerList -> pointer .

    ID              reduce using rule 120 (pointerList -> pointer .)


state 197

    (121) pointerList -> empty .
    (123) pointer -> empty .

  ! reduce/reduce conflict for ID resolved using rule 121 (pointerList -> empty .)
    ID              reduce using rule 121 (pointerList -> empty .)

  ! ID              [ reduce using rule 123 (pointer -> empty .) ]


state 198

    (122) pointer -> star . typeQualList
    (124) star -> star . TIMES
    (126) typeQualList -> . typeQualifier
    (127) typeQualList -> . empty
    (136) typeQualifier -> . CONST
    (137) typeQualifier -> . VOLATILE
    (86) empty -> .

    TIMES           shift and go to state 213
    CONST           shift and go to state 155
    VOLATILE        shift and go to state 156
    ID              reduce using rule 86 (empty -> .)

    typeQualList                   shift and go to state 212
    typeQualifier                  shift and go to state 214
    empty                          shift and go to state 215

state 199

    (125) star -> TIMES .

    TIMES           reduce using rule 125 (star -> TIMES .)
    CONST           reduce using rule 125 (star -> TIMES .)
    VOLATILE        reduce using rule 125 (star -> TIMES .)
    ID              reduce using rule 125 (star -> TIMES .)


state 200

    (143) selectionStatement -> IF LPAREN ifmark expression . RPAREN statement endifmark
    (144) selectionStatement -> IF LPAREN ifmark expression . RPAREN statement endifmark ELSE elsemark statement
    (3) expression -> expression . COMMA assignmentExpression

    RPAREN          shift and go to state 216
    COMMA           shift and go to state 78


state 201

    (145) selectionStatement -> SWITCH LPAREN switchmark expression . RPAREN statement endswitchmark
    (3) expression -> expression . COMMA assignmentExpression

    RPAREN          shift and go to state 217
    COMMA           shift and go to state 78


state 202

    (40) conditionalExpression -> logicalOrExpression QUES_MARK expression COLON . conditionalExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (86) empty -> .

    LPAREN          shift and go to state 138
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    logicalOrExpression            shift and go to state 30
    conditionalExpression          shift and go to state 218
    logicalAndExpression           shift and go to state 36
    inclusiveOrExpression          shift and go to state 44
    exclusiveOrExpression          shift and go to state 48
    andExpression                  shift and go to state 52
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58
    unaryExpression                shift and go to state 137
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    primaryExpression              shift and go to state 37
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    empty                          shift and go to state 71

state 203

    (19) postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .

    LEFTSQRBRACKET  reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    PLUSPLUS        reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    MINUSMINUS      reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    ASSIGNMENT      reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    MULT_EQ         reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    DIVIDE_EQ       reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    MOD_EQ          reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    PLUS_EQ         reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    MINUS_EQ        reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    GTEQ            reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    LTEQ            reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    AND_EQ          reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    XOR_EQ          reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    OR_EQ           reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    TIMES           reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    DIVIDE          reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    MOD             reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    U_PLUS          reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    U_MINUS         reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    LSHIFT          reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    RSHIFT          reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    LT              reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    GT              reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    EQUAL           reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    NEQUAL          reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    BIT_AND         reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    BIT_XOR         reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    BIT_OR          reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    AND             reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    QUES_MARK       reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    OR              reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    TERMINAL        reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    COMMA           reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    RPAREN          reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    COLON           reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)
    RIGHTSQRBRACKET reduce using rule 19 (postfixExpression -> postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET .)


state 204

    (11) unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .

    ASSIGNMENT      reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    MULT_EQ         reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    DIVIDE_EQ       reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    MOD_EQ          reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    PLUS_EQ         reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    MINUS_EQ        reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    GTEQ            reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    LTEQ            reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    AND_EQ          reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    XOR_EQ          reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    OR_EQ           reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    TIMES           reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    DIVIDE          reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    MOD             reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    U_PLUS          reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    U_MINUS         reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    LSHIFT          reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    RSHIFT          reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    LT              reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    GT              reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    EQUAL           reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    NEQUAL          reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    BIT_AND         reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    BIT_XOR         reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    BIT_OR          reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    AND             reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    QUES_MARK       reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    OR              reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    TERMINAL        reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    COMMA           reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    RPAREN          reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    COLON           reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)
    RIGHTSQRBRACKET reduce using rule 11 (unaryExpression -> SIZEOF LPAREN simpleTypeName RPAREN .)


state 205

    (94) caseList -> caseList CASE constantExpression COLON statement .

    CASE            reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    DEFAULT         reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    $end            reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    RIGHTCURLYBRACKET reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    IF              reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    SWITCH          reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    BREAK           reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    CONTINUE        reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    RETURN          reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    GOTO            reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    ID              reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    LEFTCURLYBRACKET reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    PLUSPLUS        reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    MINUSMINUS      reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    SIZEOF          reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    TIMES           reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    BIT_AND         reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    U_PLUS          reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    U_MINUS         reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    NOT             reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    BIT_NOT         reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    LPAREN          reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    STRING          reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    INTNUM          reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    FLOATNUM        reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    CHAR_CONST      reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)
    ELSE            reduce using rule 94 (caseList -> caseList CASE constantExpression COLON statement .)


state 206

    (96) default -> DEFAULT defaultmark COLON statement . enddefault
    (99) enddefault -> . empty
    (86) empty -> .

    $end            reduce using rule 86 (empty -> .)
    RIGHTCURLYBRACKET reduce using rule 86 (empty -> .)
    IF              reduce using rule 86 (empty -> .)
    SWITCH          reduce using rule 86 (empty -> .)
    BREAK           reduce using rule 86 (empty -> .)
    CONTINUE        reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    GOTO            reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    LEFTCURLYBRACKET reduce using rule 86 (empty -> .)
    PLUSPLUS        reduce using rule 86 (empty -> .)
    MINUSMINUS      reduce using rule 86 (empty -> .)
    SIZEOF          reduce using rule 86 (empty -> .)
    TIMES           reduce using rule 86 (empty -> .)
    BIT_AND         reduce using rule 86 (empty -> .)
    U_PLUS          reduce using rule 86 (empty -> .)
    U_MINUS         reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    BIT_NOT         reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    CASE            reduce using rule 86 (empty -> .)
    DEFAULT         reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)

    enddefault                     shift and go to state 219
    empty                          shift and go to state 220

state 207

    (111) declaration -> decSpecList initDecList TERMINAL .

    AUTO            reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    REGISTER        reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    STATIC          reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    EXTERN          reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    TYPEDEF         reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    CHAR            reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    SHORT           reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    INT             reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    LONG            reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    SIGNED          reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    UNSIGNED        reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    FLOAT           reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    DOUBLE          reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    VOID            reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    CONST           reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    VOLATILE        reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    RIGHTCURLYBRACKET reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    IF              reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    SWITCH          reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    BREAK           reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    CONTINUE        reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    RETURN          reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    GOTO            reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    ID              reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    LEFTCURLYBRACKET reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    PLUSPLUS        reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    MINUSMINUS      reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    SIZEOF          reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    TIMES           reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    BIT_AND         reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    U_PLUS          reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    U_MINUS         reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    NOT             reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    BIT_NOT         reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    LPAREN          reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    CASE            reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    DEFAULT         reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    STRING          reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    INTNUM          reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    FLOATNUM        reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)
    CHAR_CONST      reduce using rule 111 (declaration -> decSpecList initDecList TERMINAL .)


state 208

    (112) initDecList -> initDecList COMMA . markDec initDec
    (114) markDec -> . empty
    (86) empty -> .

    TIMES           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)

    markDec                        shift and go to state 221
    empty                          shift and go to state 222

state 209

    (118) initDec -> declarator ASSIGNMENT . assignmentExpression
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (132) identifier -> . ID
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (86) empty -> .
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)
    ID              shift and go to state 25
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    assignmentExpression           shift and go to state 223
    conditionalExpression          shift and go to state 28
    unaryExpression                shift and go to state 29
    logicalOrExpression            shift and go to state 30
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    identifier                     shift and go to state 70
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    empty                          shift and go to state 71
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58

state 210

    (119) declarator -> pointerList directDec .

    ASSIGNMENT      reduce using rule 119 (declarator -> pointerList directDec .)
    TERMINAL        reduce using rule 119 (declarator -> pointerList directDec .)
    COMMA           reduce using rule 119 (declarator -> pointerList directDec .)


state 211

    (128) directDec -> identifier .
    (129) directDec -> identifier . arrayDec
    (130) arrayDec -> . arrayDec LEFTSQRBRACKET INTNUM RIGHTSQRBRACKET
    (131) arrayDec -> . LEFTSQRBRACKET INTNUM RIGHTSQRBRACKET

    ASSIGNMENT      reduce using rule 128 (directDec -> identifier .)
    TERMINAL        reduce using rule 128 (directDec -> identifier .)
    COMMA           reduce using rule 128 (directDec -> identifier .)
    LEFTSQRBRACKET  shift and go to state 225

    arrayDec                       shift and go to state 224

state 212

    (122) pointer -> star typeQualList .

    ID              reduce using rule 122 (pointer -> star typeQualList .)


state 213

    (124) star -> star TIMES .

    TIMES           reduce using rule 124 (star -> star TIMES .)
    CONST           reduce using rule 124 (star -> star TIMES .)
    VOLATILE        reduce using rule 124 (star -> star TIMES .)
    ID              reduce using rule 124 (star -> star TIMES .)


state 214

    (126) typeQualList -> typeQualifier .

    ID              reduce using rule 126 (typeQualList -> typeQualifier .)


state 215

    (127) typeQualList -> empty .

    ID              reduce using rule 127 (typeQualList -> empty .)


state 216

    (143) selectionStatement -> IF LPAREN ifmark expression RPAREN . statement endifmark
    (144) selectionStatement -> IF LPAREN ifmark expression RPAREN . statement endifmark ELSE elsemark statement
    (87) statement -> . labeledStatement
    (88) statement -> . expressionStatement
    (89) statement -> . compoundStatement
    (90) statement -> . selectionStatement
    (91) statement -> . jumpStatement
    (92) labeledStatement -> . identifier COLON statement
    (93) labeledStatement -> . caseList default
    (101) expressionStatement -> . expression TERMINAL
    (102) expressionStatement -> . empty
    (103) compoundStatement -> . oscope declarationList statementList cscope
    (104) compoundStatement -> . empty
    (143) selectionStatement -> . IF LPAREN ifmark expression RPAREN statement endifmark
    (144) selectionStatement -> . IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement
    (145) selectionStatement -> . SWITCH LPAREN switchmark expression RPAREN statement endswitchmark
    (151) jumpStatement -> . BREAK TERMINAL
    (152) jumpStatement -> . CONTINUE TERMINAL
    (153) jumpStatement -> . RETURN expression TERMINAL
    (154) jumpStatement -> . RETURN TERMINAL
    (155) jumpStatement -> . GOTO identifier TERMINAL
    (132) identifier -> . ID
    (94) caseList -> . caseList CASE constantExpression COLON statement
    (95) caseList -> . empty
    (2) expression -> . assignmentExpression
    (3) expression -> . expression COMMA assignmentExpression
    (86) empty -> .
    (105) oscope -> . LEFTCURLYBRACKET
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTCURLYBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for SIZEOF resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for U_PLUS resolved as shift
  ! shift/reduce conflict for U_MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BIT_NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for STRING resolved using rule 17 (markstr -> .)
    IF              shift and go to state 19
    SWITCH          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    RETURN          shift and go to state 23
    GOTO            shift and go to state 24
    ID              shift and go to state 25
    $end            reduce using rule 86 (empty -> .)
    RIGHTCURLYBRACKET reduce using rule 86 (empty -> .)
    CASE            reduce using rule 86 (empty -> .)
    DEFAULT         reduce using rule 86 (empty -> .)
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)
    LEFTCURLYBRACKET shift and go to state 27
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)

  ! IF              [ reduce using rule 86 (empty -> .) ]
  ! SWITCH          [ reduce using rule 86 (empty -> .) ]
  ! BREAK           [ reduce using rule 86 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 86 (empty -> .) ]
  ! RETURN          [ reduce using rule 86 (empty -> .) ]
  ! GOTO            [ reduce using rule 86 (empty -> .) ]
  ! ID              [ reduce using rule 86 (empty -> .) ]
  ! LEFTCURLYBRACKET [ reduce using rule 86 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 86 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 86 (empty -> .) ]
  ! SIZEOF          [ reduce using rule 86 (empty -> .) ]
  ! TIMES           [ reduce using rule 86 (empty -> .) ]
  ! BIT_AND         [ reduce using rule 86 (empty -> .) ]
  ! U_PLUS          [ reduce using rule 86 (empty -> .) ]
  ! U_MINUS         [ reduce using rule 86 (empty -> .) ]
  ! NOT             [ reduce using rule 86 (empty -> .) ]
  ! BIT_NOT         [ reduce using rule 86 (empty -> .) ]
  ! LPAREN          [ reduce using rule 86 (empty -> .) ]
  ! STRING          [ reduce using rule 86 (empty -> .) ]

    expression                     shift and go to state 16
    statement                      shift and go to state 226
    labeledStatement               shift and go to state 9
    expressionStatement            shift and go to state 10
    compoundStatement              shift and go to state 11
    selectionStatement             shift and go to state 12
    jumpStatement                  shift and go to state 13
    identifier                     shift and go to state 14
    caseList                       shift and go to state 15
    empty                          shift and go to state 17
    oscope                         shift and go to state 18
    assignmentExpression           shift and go to state 26
    conditionalExpression          shift and go to state 28
    unaryExpression                shift and go to state 29
    logicalOrExpression            shift and go to state 30
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58

state 217

    (145) selectionStatement -> SWITCH LPAREN switchmark expression RPAREN . statement endswitchmark
    (87) statement -> . labeledStatement
    (88) statement -> . expressionStatement
    (89) statement -> . compoundStatement
    (90) statement -> . selectionStatement
    (91) statement -> . jumpStatement
    (92) labeledStatement -> . identifier COLON statement
    (93) labeledStatement -> . caseList default
    (101) expressionStatement -> . expression TERMINAL
    (102) expressionStatement -> . empty
    (103) compoundStatement -> . oscope declarationList statementList cscope
    (104) compoundStatement -> . empty
    (143) selectionStatement -> . IF LPAREN ifmark expression RPAREN statement endifmark
    (144) selectionStatement -> . IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement
    (145) selectionStatement -> . SWITCH LPAREN switchmark expression RPAREN statement endswitchmark
    (151) jumpStatement -> . BREAK TERMINAL
    (152) jumpStatement -> . CONTINUE TERMINAL
    (153) jumpStatement -> . RETURN expression TERMINAL
    (154) jumpStatement -> . RETURN TERMINAL
    (155) jumpStatement -> . GOTO identifier TERMINAL
    (132) identifier -> . ID
    (94) caseList -> . caseList CASE constantExpression COLON statement
    (95) caseList -> . empty
    (2) expression -> . assignmentExpression
    (3) expression -> . expression COMMA assignmentExpression
    (86) empty -> .
    (105) oscope -> . LEFTCURLYBRACKET
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTCURLYBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for SIZEOF resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for U_PLUS resolved as shift
  ! shift/reduce conflict for U_MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BIT_NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for STRING resolved using rule 17 (markstr -> .)
    IF              shift and go to state 19
    SWITCH          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    RETURN          shift and go to state 23
    GOTO            shift and go to state 24
    ID              shift and go to state 25
    $end            reduce using rule 86 (empty -> .)
    RIGHTCURLYBRACKET reduce using rule 86 (empty -> .)
    CASE            reduce using rule 86 (empty -> .)
    DEFAULT         reduce using rule 86 (empty -> .)
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)
    LEFTCURLYBRACKET shift and go to state 27
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)

  ! IF              [ reduce using rule 86 (empty -> .) ]
  ! SWITCH          [ reduce using rule 86 (empty -> .) ]
  ! BREAK           [ reduce using rule 86 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 86 (empty -> .) ]
  ! RETURN          [ reduce using rule 86 (empty -> .) ]
  ! GOTO            [ reduce using rule 86 (empty -> .) ]
  ! ID              [ reduce using rule 86 (empty -> .) ]
  ! LEFTCURLYBRACKET [ reduce using rule 86 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 86 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 86 (empty -> .) ]
  ! SIZEOF          [ reduce using rule 86 (empty -> .) ]
  ! TIMES           [ reduce using rule 86 (empty -> .) ]
  ! BIT_AND         [ reduce using rule 86 (empty -> .) ]
  ! U_PLUS          [ reduce using rule 86 (empty -> .) ]
  ! U_MINUS         [ reduce using rule 86 (empty -> .) ]
  ! NOT             [ reduce using rule 86 (empty -> .) ]
  ! BIT_NOT         [ reduce using rule 86 (empty -> .) ]
  ! LPAREN          [ reduce using rule 86 (empty -> .) ]
  ! STRING          [ reduce using rule 86 (empty -> .) ]

    expression                     shift and go to state 16
    statement                      shift and go to state 227
    labeledStatement               shift and go to state 9
    expressionStatement            shift and go to state 10
    compoundStatement              shift and go to state 11
    selectionStatement             shift and go to state 12
    jumpStatement                  shift and go to state 13
    identifier                     shift and go to state 14
    caseList                       shift and go to state 15
    empty                          shift and go to state 17
    oscope                         shift and go to state 18
    assignmentExpression           shift and go to state 26
    conditionalExpression          shift and go to state 28
    unaryExpression                shift and go to state 29
    logicalOrExpression            shift and go to state 30
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58

state 218

    (40) conditionalExpression -> logicalOrExpression QUES_MARK expression COLON conditionalExpression .

    TERMINAL        reduce using rule 40 (conditionalExpression -> logicalOrExpression QUES_MARK expression COLON conditionalExpression .)
    COMMA           reduce using rule 40 (conditionalExpression -> logicalOrExpression QUES_MARK expression COLON conditionalExpression .)
    RPAREN          reduce using rule 40 (conditionalExpression -> logicalOrExpression QUES_MARK expression COLON conditionalExpression .)
    COLON           reduce using rule 40 (conditionalExpression -> logicalOrExpression QUES_MARK expression COLON conditionalExpression .)
    RIGHTSQRBRACKET reduce using rule 40 (conditionalExpression -> logicalOrExpression QUES_MARK expression COLON conditionalExpression .)


state 219

    (96) default -> DEFAULT defaultmark COLON statement enddefault .

    $end            reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    RIGHTCURLYBRACKET reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    IF              reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    SWITCH          reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    BREAK           reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    CONTINUE        reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    RETURN          reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    GOTO            reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    ID              reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    LEFTCURLYBRACKET reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    PLUSPLUS        reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    MINUSMINUS      reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    SIZEOF          reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    TIMES           reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    BIT_AND         reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    U_PLUS          reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    U_MINUS         reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    NOT             reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    BIT_NOT         reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    LPAREN          reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    CASE            reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    DEFAULT         reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    STRING          reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    INTNUM          reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    FLOATNUM        reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    CHAR_CONST      reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)
    ELSE            reduce using rule 96 (default -> DEFAULT defaultmark COLON statement enddefault .)


state 220

    (99) enddefault -> empty .

    $end            reduce using rule 99 (enddefault -> empty .)
    RIGHTCURLYBRACKET reduce using rule 99 (enddefault -> empty .)
    IF              reduce using rule 99 (enddefault -> empty .)
    SWITCH          reduce using rule 99 (enddefault -> empty .)
    BREAK           reduce using rule 99 (enddefault -> empty .)
    CONTINUE        reduce using rule 99 (enddefault -> empty .)
    RETURN          reduce using rule 99 (enddefault -> empty .)
    GOTO            reduce using rule 99 (enddefault -> empty .)
    ID              reduce using rule 99 (enddefault -> empty .)
    LEFTCURLYBRACKET reduce using rule 99 (enddefault -> empty .)
    PLUSPLUS        reduce using rule 99 (enddefault -> empty .)
    MINUSMINUS      reduce using rule 99 (enddefault -> empty .)
    SIZEOF          reduce using rule 99 (enddefault -> empty .)
    TIMES           reduce using rule 99 (enddefault -> empty .)
    BIT_AND         reduce using rule 99 (enddefault -> empty .)
    U_PLUS          reduce using rule 99 (enddefault -> empty .)
    U_MINUS         reduce using rule 99 (enddefault -> empty .)
    NOT             reduce using rule 99 (enddefault -> empty .)
    BIT_NOT         reduce using rule 99 (enddefault -> empty .)
    LPAREN          reduce using rule 99 (enddefault -> empty .)
    CASE            reduce using rule 99 (enddefault -> empty .)
    DEFAULT         reduce using rule 99 (enddefault -> empty .)
    STRING          reduce using rule 99 (enddefault -> empty .)
    INTNUM          reduce using rule 99 (enddefault -> empty .)
    FLOATNUM        reduce using rule 99 (enddefault -> empty .)
    CHAR_CONST      reduce using rule 99 (enddefault -> empty .)
    ELSE            reduce using rule 99 (enddefault -> empty .)


state 221

    (112) initDecList -> initDecList COMMA markDec . initDec
    (117) initDec -> . declarator
    (118) initDec -> . declarator ASSIGNMENT assignmentExpression
    (119) declarator -> . pointerList directDec
    (120) pointerList -> . pointer
    (121) pointerList -> . empty
    (122) pointer -> . star typeQualList
    (123) pointer -> . empty
    (86) empty -> .
    (124) star -> . star TIMES
    (125) star -> . TIMES

    ID              reduce using rule 86 (empty -> .)
    TIMES           shift and go to state 199

    initDec                        shift and go to state 228
    declarator                     shift and go to state 194
    pointerList                    shift and go to state 195
    pointer                        shift and go to state 196
    empty                          shift and go to state 197
    star                           shift and go to state 198

state 222

    (114) markDec -> empty .

    TIMES           reduce using rule 114 (markDec -> empty .)
    ID              reduce using rule 114 (markDec -> empty .)


state 223

    (118) initDec -> declarator ASSIGNMENT assignmentExpression .

    TERMINAL        reduce using rule 118 (initDec -> declarator ASSIGNMENT assignmentExpression .)
    COMMA           reduce using rule 118 (initDec -> declarator ASSIGNMENT assignmentExpression .)


state 224

    (129) directDec -> identifier arrayDec .
    (130) arrayDec -> arrayDec . LEFTSQRBRACKET INTNUM RIGHTSQRBRACKET

    ASSIGNMENT      reduce using rule 129 (directDec -> identifier arrayDec .)
    TERMINAL        reduce using rule 129 (directDec -> identifier arrayDec .)
    COMMA           reduce using rule 129 (directDec -> identifier arrayDec .)
    LEFTSQRBRACKET  shift and go to state 229


state 225

    (131) arrayDec -> LEFTSQRBRACKET . INTNUM RIGHTSQRBRACKET

    INTNUM          shift and go to state 230


state 226

    (143) selectionStatement -> IF LPAREN ifmark expression RPAREN statement . endifmark
    (144) selectionStatement -> IF LPAREN ifmark expression RPAREN statement . endifmark ELSE elsemark statement
    (147) endifmark -> . empty
    (86) empty -> .

    ELSE            reduce using rule 86 (empty -> .)
    $end            reduce using rule 86 (empty -> .)
    RIGHTCURLYBRACKET reduce using rule 86 (empty -> .)
    IF              reduce using rule 86 (empty -> .)
    SWITCH          reduce using rule 86 (empty -> .)
    BREAK           reduce using rule 86 (empty -> .)
    CONTINUE        reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    GOTO            reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    LEFTCURLYBRACKET reduce using rule 86 (empty -> .)
    PLUSPLUS        reduce using rule 86 (empty -> .)
    MINUSMINUS      reduce using rule 86 (empty -> .)
    SIZEOF          reduce using rule 86 (empty -> .)
    TIMES           reduce using rule 86 (empty -> .)
    BIT_AND         reduce using rule 86 (empty -> .)
    U_PLUS          reduce using rule 86 (empty -> .)
    U_MINUS         reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    BIT_NOT         reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    CASE            reduce using rule 86 (empty -> .)
    DEFAULT         reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)

    endifmark                      shift and go to state 231
    empty                          shift and go to state 232

state 227

    (145) selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement . endswitchmark
    (150) endswitchmark -> . empty
    (86) empty -> .

    $end            reduce using rule 86 (empty -> .)
    RIGHTCURLYBRACKET reduce using rule 86 (empty -> .)
    IF              reduce using rule 86 (empty -> .)
    SWITCH          reduce using rule 86 (empty -> .)
    BREAK           reduce using rule 86 (empty -> .)
    CONTINUE        reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    GOTO            reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    LEFTCURLYBRACKET reduce using rule 86 (empty -> .)
    PLUSPLUS        reduce using rule 86 (empty -> .)
    MINUSMINUS      reduce using rule 86 (empty -> .)
    SIZEOF          reduce using rule 86 (empty -> .)
    TIMES           reduce using rule 86 (empty -> .)
    BIT_AND         reduce using rule 86 (empty -> .)
    U_PLUS          reduce using rule 86 (empty -> .)
    U_MINUS         reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    BIT_NOT         reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    CASE            reduce using rule 86 (empty -> .)
    DEFAULT         reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)

    endswitchmark                  shift and go to state 233
    empty                          shift and go to state 234

state 228

    (112) initDecList -> initDecList COMMA markDec initDec .

    TERMINAL        reduce using rule 112 (initDecList -> initDecList COMMA markDec initDec .)
    COMMA           reduce using rule 112 (initDecList -> initDecList COMMA markDec initDec .)


state 229

    (130) arrayDec -> arrayDec LEFTSQRBRACKET . INTNUM RIGHTSQRBRACKET

    INTNUM          shift and go to state 235


state 230

    (131) arrayDec -> LEFTSQRBRACKET INTNUM . RIGHTSQRBRACKET

    RIGHTSQRBRACKET shift and go to state 236


state 231

    (143) selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .
    (144) selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark . ELSE elsemark statement

  ! shift/reduce conflict for ELSE resolved as shift
    $end            reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    RIGHTCURLYBRACKET reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    IF              reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    SWITCH          reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    BREAK           reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    CONTINUE        reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    RETURN          reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    GOTO            reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    ID              reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    LEFTCURLYBRACKET reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    PLUSPLUS        reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    MINUSMINUS      reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    SIZEOF          reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    TIMES           reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    BIT_AND         reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    U_PLUS          reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    U_MINUS         reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    NOT             reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    BIT_NOT         reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    LPAREN          reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    CASE            reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    DEFAULT         reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    STRING          reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    INTNUM          reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    FLOATNUM        reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    CHAR_CONST      reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .)
    ELSE            shift and go to state 237

  ! ELSE            [ reduce using rule 143 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark .) ]


state 232

    (147) endifmark -> empty .

    ELSE            reduce using rule 147 (endifmark -> empty .)
    $end            reduce using rule 147 (endifmark -> empty .)
    RIGHTCURLYBRACKET reduce using rule 147 (endifmark -> empty .)
    IF              reduce using rule 147 (endifmark -> empty .)
    SWITCH          reduce using rule 147 (endifmark -> empty .)
    BREAK           reduce using rule 147 (endifmark -> empty .)
    CONTINUE        reduce using rule 147 (endifmark -> empty .)
    RETURN          reduce using rule 147 (endifmark -> empty .)
    GOTO            reduce using rule 147 (endifmark -> empty .)
    ID              reduce using rule 147 (endifmark -> empty .)
    LEFTCURLYBRACKET reduce using rule 147 (endifmark -> empty .)
    PLUSPLUS        reduce using rule 147 (endifmark -> empty .)
    MINUSMINUS      reduce using rule 147 (endifmark -> empty .)
    SIZEOF          reduce using rule 147 (endifmark -> empty .)
    TIMES           reduce using rule 147 (endifmark -> empty .)
    BIT_AND         reduce using rule 147 (endifmark -> empty .)
    U_PLUS          reduce using rule 147 (endifmark -> empty .)
    U_MINUS         reduce using rule 147 (endifmark -> empty .)
    NOT             reduce using rule 147 (endifmark -> empty .)
    BIT_NOT         reduce using rule 147 (endifmark -> empty .)
    LPAREN          reduce using rule 147 (endifmark -> empty .)
    CASE            reduce using rule 147 (endifmark -> empty .)
    DEFAULT         reduce using rule 147 (endifmark -> empty .)
    STRING          reduce using rule 147 (endifmark -> empty .)
    INTNUM          reduce using rule 147 (endifmark -> empty .)
    FLOATNUM        reduce using rule 147 (endifmark -> empty .)
    CHAR_CONST      reduce using rule 147 (endifmark -> empty .)


state 233

    (145) selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .

    $end            reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    RIGHTCURLYBRACKET reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    IF              reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    SWITCH          reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    BREAK           reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    CONTINUE        reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    RETURN          reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    GOTO            reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    ID              reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    LEFTCURLYBRACKET reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    PLUSPLUS        reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    MINUSMINUS      reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    SIZEOF          reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    TIMES           reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    BIT_AND         reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    U_PLUS          reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    U_MINUS         reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    NOT             reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    BIT_NOT         reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    LPAREN          reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    CASE            reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    DEFAULT         reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    STRING          reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    INTNUM          reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    FLOATNUM        reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    CHAR_CONST      reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)
    ELSE            reduce using rule 145 (selectionStatement -> SWITCH LPAREN switchmark expression RPAREN statement endswitchmark .)


state 234

    (150) endswitchmark -> empty .

    $end            reduce using rule 150 (endswitchmark -> empty .)
    RIGHTCURLYBRACKET reduce using rule 150 (endswitchmark -> empty .)
    IF              reduce using rule 150 (endswitchmark -> empty .)
    SWITCH          reduce using rule 150 (endswitchmark -> empty .)
    BREAK           reduce using rule 150 (endswitchmark -> empty .)
    CONTINUE        reduce using rule 150 (endswitchmark -> empty .)
    RETURN          reduce using rule 150 (endswitchmark -> empty .)
    GOTO            reduce using rule 150 (endswitchmark -> empty .)
    ID              reduce using rule 150 (endswitchmark -> empty .)
    LEFTCURLYBRACKET reduce using rule 150 (endswitchmark -> empty .)
    PLUSPLUS        reduce using rule 150 (endswitchmark -> empty .)
    MINUSMINUS      reduce using rule 150 (endswitchmark -> empty .)
    SIZEOF          reduce using rule 150 (endswitchmark -> empty .)
    TIMES           reduce using rule 150 (endswitchmark -> empty .)
    BIT_AND         reduce using rule 150 (endswitchmark -> empty .)
    U_PLUS          reduce using rule 150 (endswitchmark -> empty .)
    U_MINUS         reduce using rule 150 (endswitchmark -> empty .)
    NOT             reduce using rule 150 (endswitchmark -> empty .)
    BIT_NOT         reduce using rule 150 (endswitchmark -> empty .)
    LPAREN          reduce using rule 150 (endswitchmark -> empty .)
    CASE            reduce using rule 150 (endswitchmark -> empty .)
    DEFAULT         reduce using rule 150 (endswitchmark -> empty .)
    STRING          reduce using rule 150 (endswitchmark -> empty .)
    INTNUM          reduce using rule 150 (endswitchmark -> empty .)
    FLOATNUM        reduce using rule 150 (endswitchmark -> empty .)
    CHAR_CONST      reduce using rule 150 (endswitchmark -> empty .)
    ELSE            reduce using rule 150 (endswitchmark -> empty .)


state 235

    (130) arrayDec -> arrayDec LEFTSQRBRACKET INTNUM . RIGHTSQRBRACKET

    RIGHTSQRBRACKET shift and go to state 238


state 236

    (131) arrayDec -> LEFTSQRBRACKET INTNUM RIGHTSQRBRACKET .

    LEFTSQRBRACKET  reduce using rule 131 (arrayDec -> LEFTSQRBRACKET INTNUM RIGHTSQRBRACKET .)
    ASSIGNMENT      reduce using rule 131 (arrayDec -> LEFTSQRBRACKET INTNUM RIGHTSQRBRACKET .)
    TERMINAL        reduce using rule 131 (arrayDec -> LEFTSQRBRACKET INTNUM RIGHTSQRBRACKET .)
    COMMA           reduce using rule 131 (arrayDec -> LEFTSQRBRACKET INTNUM RIGHTSQRBRACKET .)


state 237

    (144) selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE . elsemark statement
    (148) elsemark -> . empty
    (86) empty -> .

    IF              reduce using rule 86 (empty -> .)
    SWITCH          reduce using rule 86 (empty -> .)
    BREAK           reduce using rule 86 (empty -> .)
    CONTINUE        reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    GOTO            reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    LEFTCURLYBRACKET reduce using rule 86 (empty -> .)
    PLUSPLUS        reduce using rule 86 (empty -> .)
    MINUSMINUS      reduce using rule 86 (empty -> .)
    SIZEOF          reduce using rule 86 (empty -> .)
    TIMES           reduce using rule 86 (empty -> .)
    BIT_AND         reduce using rule 86 (empty -> .)
    U_PLUS          reduce using rule 86 (empty -> .)
    U_MINUS         reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    BIT_NOT         reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    CASE            reduce using rule 86 (empty -> .)
    DEFAULT         reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)
    $end            reduce using rule 86 (empty -> .)
    RIGHTCURLYBRACKET reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)

    elsemark                       shift and go to state 239
    empty                          shift and go to state 240

state 238

    (130) arrayDec -> arrayDec LEFTSQRBRACKET INTNUM RIGHTSQRBRACKET .

    LEFTSQRBRACKET  reduce using rule 130 (arrayDec -> arrayDec LEFTSQRBRACKET INTNUM RIGHTSQRBRACKET .)
    ASSIGNMENT      reduce using rule 130 (arrayDec -> arrayDec LEFTSQRBRACKET INTNUM RIGHTSQRBRACKET .)
    TERMINAL        reduce using rule 130 (arrayDec -> arrayDec LEFTSQRBRACKET INTNUM RIGHTSQRBRACKET .)
    COMMA           reduce using rule 130 (arrayDec -> arrayDec LEFTSQRBRACKET INTNUM RIGHTSQRBRACKET .)


state 239

    (144) selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark . statement
    (87) statement -> . labeledStatement
    (88) statement -> . expressionStatement
    (89) statement -> . compoundStatement
    (90) statement -> . selectionStatement
    (91) statement -> . jumpStatement
    (92) labeledStatement -> . identifier COLON statement
    (93) labeledStatement -> . caseList default
    (101) expressionStatement -> . expression TERMINAL
    (102) expressionStatement -> . empty
    (103) compoundStatement -> . oscope declarationList statementList cscope
    (104) compoundStatement -> . empty
    (143) selectionStatement -> . IF LPAREN ifmark expression RPAREN statement endifmark
    (144) selectionStatement -> . IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement
    (145) selectionStatement -> . SWITCH LPAREN switchmark expression RPAREN statement endswitchmark
    (151) jumpStatement -> . BREAK TERMINAL
    (152) jumpStatement -> . CONTINUE TERMINAL
    (153) jumpStatement -> . RETURN expression TERMINAL
    (154) jumpStatement -> . RETURN TERMINAL
    (155) jumpStatement -> . GOTO identifier TERMINAL
    (132) identifier -> . ID
    (94) caseList -> . caseList CASE constantExpression COLON statement
    (95) caseList -> . empty
    (2) expression -> . assignmentExpression
    (3) expression -> . expression COMMA assignmentExpression
    (86) empty -> .
    (105) oscope -> . LEFTCURLYBRACKET
    (4) assignmentExpression -> . conditionalExpression
    (5) assignmentExpression -> . unaryExpression assignOper assignmentExpression
    (39) conditionalExpression -> . logicalOrExpression
    (40) conditionalExpression -> . logicalOrExpression QUES_MARK expression COLON conditionalExpression
    (6) unaryExpression -> . postfixExpression
    (7) unaryExpression -> . PLUSPLUS unaryExpression
    (8) unaryExpression -> . MINUSMINUS unaryExpression
    (9) unaryExpression -> . unaryOper unaryExpression
    (10) unaryExpression -> . SIZEOF unaryExpression
    (11) unaryExpression -> . SIZEOF LPAREN simpleTypeName RPAREN
    (41) logicalOrExpression -> . logicalAndExpression
    (42) logicalOrExpression -> . logicalOrExpression OR logicalAndExpression
    (18) postfixExpression -> . primaryExpression
    (19) postfixExpression -> . postfixExpression LEFTSQRBRACKET expression RIGHTSQRBRACKET
    (20) postfixExpression -> . postfixExpression PLUSPLUS
    (21) postfixExpression -> . postfixExpression MINUSMINUS
    (71) unaryOper -> . TIMES
    (72) unaryOper -> . BIT_AND
    (73) unaryOper -> . U_PLUS
    (74) unaryOper -> . U_MINUS
    (75) unaryOper -> . NOT
    (76) unaryOper -> . BIT_NOT
    (43) logicalAndExpression -> . inclusiveOrExpression
    (44) logicalAndExpression -> . logicalAndExpression AND inclusiveOrExpression
    (12) primaryExpression -> . markid
    (13) primaryExpression -> . constant
    (14) primaryExpression -> . markstr STRING
    (15) primaryExpression -> . LPAREN expression RPAREN
    (45) inclusiveOrExpression -> . exclusiveOrExpression
    (46) inclusiveOrExpression -> . inclusiveOrExpression BIT_OR exclusiveOrExpression
    (16) markid -> . identifier
    (22) constant -> . markint INTNUM
    (23) constant -> . markfloat FLOATNUM
    (24) constant -> . markchar CHAR_CONST
    (17) markstr -> .
    (47) exclusiveOrExpression -> . andExpression
    (48) exclusiveOrExpression -> . exclusiveOrExpression BIT_XOR andExpression
    (25) markint -> . empty
    (26) markfloat -> . empty
    (27) markchar -> . empty
    (49) andExpression -> . equalityExpression
    (50) andExpression -> . andExpression BIT_AND equalityExpression
    (51) equalityExpression -> . relationalExpression
    (52) equalityExpression -> . equalityExpression EQUAL relationalExpression
    (53) equalityExpression -> . equalityExpression NEQUAL relationalExpression
    (54) relationalExpression -> . shiftExpression
    (55) relationalExpression -> . relationalExpression LT shiftExpression
    (56) relationalExpression -> . relationalExpression GT shiftExpression
    (57) relationalExpression -> . relationalExpression LTEQ shiftExpression
    (58) relationalExpression -> . relationalExpression GTEQ shiftExpression
    (59) shiftExpression -> . additiveExpression
    (60) shiftExpression -> . shiftExpression LSHIFT additiveExpression
    (61) shiftExpression -> . shiftExpression RSHIFT additiveExpression
    (62) additiveExpression -> . multiplicativeExpression
    (63) additiveExpression -> . additiveExpression U_PLUS multiplicativeExpression
    (64) additiveExpression -> . additiveExpression U_MINUS multiplicativeExpression
    (65) multiplicativeExpression -> . castExpression
    (66) multiplicativeExpression -> . multiplicativeExpression TIMES castExpression
    (67) multiplicativeExpression -> . multiplicativeExpression DIVIDE castExpression
    (68) multiplicativeExpression -> . multiplicativeExpression MOD castExpression
    (69) castExpression -> . unaryExpression
    (70) castExpression -> . LPAREN simpleTypeName RPAREN castExpression

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEFTCURLYBRACKET resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for SIZEOF resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for BIT_AND resolved as shift
  ! shift/reduce conflict for U_PLUS resolved as shift
  ! shift/reduce conflict for U_MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BIT_NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for STRING resolved using rule 17 (markstr -> .)
    IF              shift and go to state 19
    SWITCH          shift and go to state 20
    BREAK           shift and go to state 21
    CONTINUE        shift and go to state 22
    RETURN          shift and go to state 23
    GOTO            shift and go to state 24
    ID              shift and go to state 25
    $end            reduce using rule 86 (empty -> .)
    RIGHTCURLYBRACKET reduce using rule 86 (empty -> .)
    CASE            reduce using rule 86 (empty -> .)
    DEFAULT         reduce using rule 86 (empty -> .)
    INTNUM          reduce using rule 86 (empty -> .)
    FLOATNUM        reduce using rule 86 (empty -> .)
    CHAR_CONST      reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)
    LEFTCURLYBRACKET shift and go to state 27
    PLUSPLUS        shift and go to state 32
    MINUSMINUS      shift and go to state 33
    SIZEOF          shift and go to state 35
    TIMES           shift and go to state 38
    BIT_AND         shift and go to state 39
    U_PLUS          shift and go to state 40
    U_MINUS         shift and go to state 41
    NOT             shift and go to state 42
    BIT_NOT         shift and go to state 43
    LPAREN          shift and go to state 7
    STRING          reduce using rule 17 (markstr -> .)

  ! IF              [ reduce using rule 86 (empty -> .) ]
  ! SWITCH          [ reduce using rule 86 (empty -> .) ]
  ! BREAK           [ reduce using rule 86 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 86 (empty -> .) ]
  ! RETURN          [ reduce using rule 86 (empty -> .) ]
  ! GOTO            [ reduce using rule 86 (empty -> .) ]
  ! ID              [ reduce using rule 86 (empty -> .) ]
  ! LEFTCURLYBRACKET [ reduce using rule 86 (empty -> .) ]
  ! PLUSPLUS        [ reduce using rule 86 (empty -> .) ]
  ! MINUSMINUS      [ reduce using rule 86 (empty -> .) ]
  ! SIZEOF          [ reduce using rule 86 (empty -> .) ]
  ! TIMES           [ reduce using rule 86 (empty -> .) ]
  ! BIT_AND         [ reduce using rule 86 (empty -> .) ]
  ! U_PLUS          [ reduce using rule 86 (empty -> .) ]
  ! U_MINUS         [ reduce using rule 86 (empty -> .) ]
  ! NOT             [ reduce using rule 86 (empty -> .) ]
  ! BIT_NOT         [ reduce using rule 86 (empty -> .) ]
  ! LPAREN          [ reduce using rule 86 (empty -> .) ]
  ! STRING          [ reduce using rule 86 (empty -> .) ]

    expression                     shift and go to state 16
    statement                      shift and go to state 241
    labeledStatement               shift and go to state 9
    expressionStatement            shift and go to state 10
    compoundStatement              shift and go to state 11
    selectionStatement             shift and go to state 12
    jumpStatement                  shift and go to state 13
    identifier                     shift and go to state 14
    caseList                       shift and go to state 15
    empty                          shift and go to state 17
    oscope                         shift and go to state 18
    assignmentExpression           shift and go to state 26
    conditionalExpression          shift and go to state 28
    unaryExpression                shift and go to state 29
    logicalOrExpression            shift and go to state 30
    postfixExpression              shift and go to state 31
    unaryOper                      shift and go to state 34
    logicalAndExpression           shift and go to state 36
    primaryExpression              shift and go to state 37
    inclusiveOrExpression          shift and go to state 44
    markid                         shift and go to state 45
    constant                       shift and go to state 46
    markstr                        shift and go to state 47
    exclusiveOrExpression          shift and go to state 48
    markint                        shift and go to state 49
    markfloat                      shift and go to state 50
    markchar                       shift and go to state 51
    andExpression                  shift and go to state 52
    equalityExpression             shift and go to state 53
    relationalExpression           shift and go to state 54
    shiftExpression                shift and go to state 55
    additiveExpression             shift and go to state 56
    multiplicativeExpression       shift and go to state 57
    castExpression                 shift and go to state 58

state 240

    (148) elsemark -> empty .

    IF              reduce using rule 148 (elsemark -> empty .)
    SWITCH          reduce using rule 148 (elsemark -> empty .)
    BREAK           reduce using rule 148 (elsemark -> empty .)
    CONTINUE        reduce using rule 148 (elsemark -> empty .)
    RETURN          reduce using rule 148 (elsemark -> empty .)
    GOTO            reduce using rule 148 (elsemark -> empty .)
    ID              reduce using rule 148 (elsemark -> empty .)
    LEFTCURLYBRACKET reduce using rule 148 (elsemark -> empty .)
    PLUSPLUS        reduce using rule 148 (elsemark -> empty .)
    MINUSMINUS      reduce using rule 148 (elsemark -> empty .)
    SIZEOF          reduce using rule 148 (elsemark -> empty .)
    TIMES           reduce using rule 148 (elsemark -> empty .)
    BIT_AND         reduce using rule 148 (elsemark -> empty .)
    U_PLUS          reduce using rule 148 (elsemark -> empty .)
    U_MINUS         reduce using rule 148 (elsemark -> empty .)
    NOT             reduce using rule 148 (elsemark -> empty .)
    BIT_NOT         reduce using rule 148 (elsemark -> empty .)
    LPAREN          reduce using rule 148 (elsemark -> empty .)
    CASE            reduce using rule 148 (elsemark -> empty .)
    DEFAULT         reduce using rule 148 (elsemark -> empty .)
    STRING          reduce using rule 148 (elsemark -> empty .)
    INTNUM          reduce using rule 148 (elsemark -> empty .)
    FLOATNUM        reduce using rule 148 (elsemark -> empty .)
    CHAR_CONST      reduce using rule 148 (elsemark -> empty .)
    $end            reduce using rule 148 (elsemark -> empty .)
    RIGHTCURLYBRACKET reduce using rule 148 (elsemark -> empty .)
    ELSE            reduce using rule 148 (elsemark -> empty .)


state 241

    (144) selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .

    $end            reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    RIGHTCURLYBRACKET reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    IF              reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    SWITCH          reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    BREAK           reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    CONTINUE        reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    RETURN          reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    GOTO            reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    ID              reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    LEFTCURLYBRACKET reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    PLUSPLUS        reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    MINUSMINUS      reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    SIZEOF          reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    TIMES           reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    BIT_AND         reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    U_PLUS          reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    U_MINUS         reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    NOT             reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    BIT_NOT         reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    LPAREN          reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    CASE            reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    DEFAULT         reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    STRING          reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    INTNUM          reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    FLOATNUM        reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    CHAR_CONST      reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)
    ELSE            reduce using rule 144 (selectionStatement -> IF LPAREN ifmark expression RPAREN statement endifmark ELSE elsemark statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CASE in state 15 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 15 resolved as shift
WARNING: shift/reduce conflict for GTEQ in state 29 resolved as shift
WARNING: shift/reduce conflict for LTEQ in state 29 resolved as shift
WARNING: shift/reduce conflict for IF in state 72 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 72 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 72 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 72 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 72 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 72 resolved as shift
WARNING: shift/reduce conflict for ID in state 72 resolved as shift
WARNING: shift/reduce conflict for LEFTCURLYBRACKET in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for SIZEOF in state 72 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 72 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 72 resolved as shift
WARNING: shift/reduce conflict for U_PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for U_MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for NOT in state 72 resolved as shift
WARNING: shift/reduce conflict for BIT_NOT in state 72 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 72 resolved as shift
WARNING: shift/reduce conflict for RIGHTCURLYBRACKET in state 142 resolved as shift
WARNING: shift/reduce conflict for IF in state 142 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 142 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 142 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 142 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 142 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 142 resolved as shift
WARNING: shift/reduce conflict for ID in state 142 resolved as shift
WARNING: shift/reduce conflict for LEFTCURLYBRACKET in state 142 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 142 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 142 resolved as shift
WARNING: shift/reduce conflict for SIZEOF in state 142 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 142 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 142 resolved as shift
WARNING: shift/reduce conflict for U_PLUS in state 142 resolved as shift
WARNING: shift/reduce conflict for U_MINUS in state 142 resolved as shift
WARNING: shift/reduce conflict for NOT in state 142 resolved as shift
WARNING: shift/reduce conflict for BIT_NOT in state 142 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 142 resolved as shift
WARNING: shift/reduce conflict for IF in state 186 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 186 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 186 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 186 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 186 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 186 resolved as shift
WARNING: shift/reduce conflict for ID in state 186 resolved as shift
WARNING: shift/reduce conflict for LEFTCURLYBRACKET in state 186 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 186 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 186 resolved as shift
WARNING: shift/reduce conflict for SIZEOF in state 186 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 186 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 186 resolved as shift
WARNING: shift/reduce conflict for U_PLUS in state 186 resolved as shift
WARNING: shift/reduce conflict for U_MINUS in state 186 resolved as shift
WARNING: shift/reduce conflict for NOT in state 186 resolved as shift
WARNING: shift/reduce conflict for BIT_NOT in state 186 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 186 resolved as shift
WARNING: shift/reduce conflict for IF in state 187 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 187 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 187 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 187 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 187 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 187 resolved as shift
WARNING: shift/reduce conflict for ID in state 187 resolved as shift
WARNING: shift/reduce conflict for LEFTCURLYBRACKET in state 187 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 187 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 187 resolved as shift
WARNING: shift/reduce conflict for SIZEOF in state 187 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 187 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 187 resolved as shift
WARNING: shift/reduce conflict for U_PLUS in state 187 resolved as shift
WARNING: shift/reduce conflict for U_MINUS in state 187 resolved as shift
WARNING: shift/reduce conflict for NOT in state 187 resolved as shift
WARNING: shift/reduce conflict for BIT_NOT in state 187 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 187 resolved as shift
WARNING: shift/reduce conflict for IF in state 216 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 216 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 216 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 216 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 216 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 216 resolved as shift
WARNING: shift/reduce conflict for ID in state 216 resolved as shift
WARNING: shift/reduce conflict for LEFTCURLYBRACKET in state 216 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 216 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 216 resolved as shift
WARNING: shift/reduce conflict for SIZEOF in state 216 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 216 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 216 resolved as shift
WARNING: shift/reduce conflict for U_PLUS in state 216 resolved as shift
WARNING: shift/reduce conflict for U_MINUS in state 216 resolved as shift
WARNING: shift/reduce conflict for NOT in state 216 resolved as shift
WARNING: shift/reduce conflict for BIT_NOT in state 216 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 216 resolved as shift
WARNING: shift/reduce conflict for IF in state 217 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 217 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 217 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 217 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 217 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 217 resolved as shift
WARNING: shift/reduce conflict for ID in state 217 resolved as shift
WARNING: shift/reduce conflict for LEFTCURLYBRACKET in state 217 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 217 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 217 resolved as shift
WARNING: shift/reduce conflict for SIZEOF in state 217 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 217 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 217 resolved as shift
WARNING: shift/reduce conflict for U_PLUS in state 217 resolved as shift
WARNING: shift/reduce conflict for U_MINUS in state 217 resolved as shift
WARNING: shift/reduce conflict for NOT in state 217 resolved as shift
WARNING: shift/reduce conflict for BIT_NOT in state 217 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 217 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 231 resolved as shift
WARNING: shift/reduce conflict for IF in state 239 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 239 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 239 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 239 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 239 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 239 resolved as shift
WARNING: shift/reduce conflict for ID in state 239 resolved as shift
WARNING: shift/reduce conflict for LEFTCURLYBRACKET in state 239 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 239 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 239 resolved as shift
WARNING: shift/reduce conflict for SIZEOF in state 239 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 239 resolved as shift
WARNING: shift/reduce conflict for BIT_AND in state 239 resolved as shift
WARNING: shift/reduce conflict for U_PLUS in state 239 resolved as shift
WARNING: shift/reduce conflict for U_MINUS in state 239 resolved as shift
WARNING: shift/reduce conflict for NOT in state 239 resolved as shift
WARNING: shift/reduce conflict for BIT_NOT in state 239 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 239 resolved as shift
WARNING: reduce/reduce conflict in state 17 resolved using rule (expressionStatement -> empty)
WARNING: rejected rule (compoundStatement -> empty) in state 17
WARNING: reduce/reduce conflict in state 17 resolved using rule (caseList -> empty)
WARNING: rejected rule (expressionStatement -> empty) in state 17
WARNING: reduce/reduce conflict in state 17 resolved using rule (markint -> empty)
WARNING: rejected rule (caseList -> empty) in state 17
WARNING: reduce/reduce conflict in state 17 resolved using rule (markfloat -> empty)
WARNING: rejected rule (caseList -> empty) in state 17
WARNING: reduce/reduce conflict in state 17 resolved using rule (markchar -> empty)
WARNING: rejected rule (caseList -> empty) in state 17
WARNING: reduce/reduce conflict in state 72 resolved using rule (markstr -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 72
WARNING: reduce/reduce conflict in state 142 resolved using rule (markstr -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 142
WARNING: reduce/reduce conflict in state 186 resolved using rule (markstr -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 186
WARNING: reduce/reduce conflict in state 187 resolved using rule (markstr -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 187
WARNING: reduce/reduce conflict in state 197 resolved using rule (pointerList -> empty)
WARNING: rejected rule (pointer -> empty) in state 197
WARNING: reduce/reduce conflict in state 216 resolved using rule (markstr -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 216
WARNING: reduce/reduce conflict in state 217 resolved using rule (markstr -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 217
WARNING: reduce/reduce conflict in state 239 resolved using rule (markstr -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 239
WARNING: Rule (compoundStatement -> empty) is never reduced
WARNING: Rule (expressionStatement -> empty) is never reduced
WARNING: Rule (pointer -> empty) is never reduced
